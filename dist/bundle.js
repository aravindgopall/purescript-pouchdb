// Generated by psc-bundle 0.8.0.0
var PS = { };
(function(exports) {
  
  // module API.PouchDB

  const _PouchDB = require('pouchdb');

  //This is a helper for creating internal callbacks to process responses.
  var createCallback = function(api, callback){
    var cb = null;
    if(callback &&
         callback.constructor &&
         callback.constructor.name == 'Nothing'){
          cb = function(ignore){
            var ignr = ignore.then(function(){
              return {};
            }).catch(function(error){
              console.log(api + ' failed, error: ' + error);
            });
            var ret = function(){
              return ignr;
            };
            return ret;
        };
      } else {
        cb = function(val){
          return function(){
            val.then(function(v){
              callback(v)();
            }).catch(function(err){
              console.error(err);
            });
            return {};
          }
        };
      }
      return cb;
  };

  var extractOptions = function(options){
    var _options = null;
    if(!options || (options.constructor &&
      options.constructor.name == 'Nothing')){
      _options = {};
    }else{
      _options = options.value0;
    }
    return _options;
  }

  var _pouchDB = function(name){
    return function(options){
      return function(){
        var _name = null;
        var _options = extractOptions(options);
        if(name && name.value0){
          _name = name.value0;
        }else{
          if(_options.name)
          _name = _options.name;
        }
        var db = new _PouchDB(_name, _options);
        return db;
      };
    };
  };

  var _info = function(callback){
    var cb = createCallback('info', callback);
    return function(db){
      return function(){
        cb(db)();
        return {};
      }
    };
  };

  /* HELPERS */

  var logRaw = function(str) {
    return function () {
      console.log(str);
      return {};
    };
  };
  exports["logRaw"] = logRaw;
  exports["pouchDB"] = _pouchDB;
  exports["info"] = _info;;
})(PS["API.PouchDB"] = PS["API.PouchDB"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Prelude

  //- Functor --------------------------------------------------------------------

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };

  //- Bind -----------------------------------------------------------------------

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };

  //- Monoid ---------------------------------------------------------------------

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  };

  //- Semiring -------------------------------------------------------------------

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };

  //- ModuloSemiring -------------------------------------------------------------

  exports.intDiv = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x / y | 0;
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      return x % y;
    };
  };

  exports.numDiv = function (n1) {
    return function (n2) {
      return n1 / n2;
    };
  };

  //- Ring -----------------------------------------------------------------------

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };

  //- Eq -------------------------------------------------------------------------

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.refIneq = function (r1) {
    return function (r2) {
      return r1 !== r2;
    };
  };

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };

  exports.ordArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        var i = 0;
        var xlen = xs.length;
        var ylen = ys.length;
        while (i < xlen && i < ylen) {
          var x = xs[i];
          var y = ys[i];
          var o = f(x)(y);
          if (o !== 0) {
            return o;
          }
          i++;
        }
        if (xlen === ylen) {
          return 0;
        } else if (xlen > ylen) {
          return -1;
        } else {
          return 1;
        }
      };
    };
  };

  //- Ord ------------------------------------------------------------------------

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x > y ? gt : eq;
          };
        };
      };
    };
  };

  //- Bounded --------------------------------------------------------------------

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);

  //- BooleanAlgebra -------------------------------------------------------------

  exports.boolOr = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolAnd = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };

  //- Show -----------------------------------------------------------------------

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    /* jshint bitwise: false */
    return n === (n | 0) ? n + ".0" : n.toString();
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\a": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g,
      function (c, i) { // jshint ignore:line
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\a": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Prelude"];       
  var Unit = function (x) {
      return x;
  };
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Semigroup = function (append) {
      this.append = append;
  };
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var Ring = function (__superclass_Prelude$dotSemiring_0, sub) {
      this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
      this.sub = sub;
  };
  var ModuloSemiring = function (__superclass_Prelude$dotSemiring_0, div, mod) {
      this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
      this.div = div;
      this.mod = mod;
  };
  var DivisionRing = function (__superclass_Prelude$dotModuloSemiring_1, __superclass_Prelude$dotRing_0) {
      this["__superclass_Prelude.ModuloSemiring_1"] = __superclass_Prelude$dotModuloSemiring_1;
      this["__superclass_Prelude.Ring_0"] = __superclass_Prelude$dotRing_0;
  };
  var Num = function (__superclass_Prelude$dotDivisionRing_0) {
      this["__superclass_Prelude.DivisionRing_0"] = __superclass_Prelude$dotDivisionRing_0;
  };
  var Eq = function (eq) {
      this.eq = eq;
  };
  var Ord = function (__superclass_Prelude$dotEq_0, compare) {
      this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
      this.compare = compare;
  };
  var Bounded = function (bottom, top) {
      this.bottom = bottom;
      this.top = top;
  };
  var BoundedOrd = function (__superclass_Prelude$dotBounded_0, __superclass_Prelude$dotOrd_1) {
      this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
      this["__superclass_Prelude.Ord_1"] = __superclass_Prelude$dotOrd_1;
  };
  var BooleanAlgebra = function (__superclass_Prelude$dotBounded_0, conj, disj, not) {
      this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
      this.conj = conj;
      this.disj = disj;
      this.not = not;
  };
  var Show = function (show) {
      this.show = show;
  };
  var $dollar = function (f) {
      return function (x) {
          return f(x);
      };
  };
  var $hash = function (x) {
      return function (f) {
          return f(x);
      };
  };
  var zero = function (dict) {
      return dict.zero;
  };
  var unsafeCompare = $foreign.unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
  var unit = {};
  var top = function (dict) {
      return dict.top;
  };
  var sub = function (dict) {
      return dict.sub;
  };
  var $minus = function (dictRing) {
      return sub(dictRing);
  };
  var showUnit = new Show(function (v) {
      return "unit";
  });
  var showString = new Show($foreign.showStringImpl);
  var showOrdering = new Show(function (v) {
      if (v instanceof LT) {
          return "LT";
      };
      if (v instanceof GT) {
          return "GT";
      };
      if (v instanceof EQ) {
          return "EQ";
      };
      throw new Error("Failed pattern match at Prelude line 863, column 1 - line 868, column 1: " + [ v.constructor.name ]);
  });
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var showBoolean = new Show(function (v) {
      if (v) {
          return "true";
      };
      if (!v) {
          return "false";
      };
      throw new Error("Failed pattern match at Prelude line 841, column 1 - line 845, column 1: " + [ v.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  var semiringUnit = new Semiring(function (v) {
      return function (v1) {
          return unit;
      };
  }, function (v) {
      return function (v1) {
          return unit;
      };
  }, unit, unit);
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var semigroupUnit = new Semigroup(function (v) {
      return function (v1) {
          return unit;
      };
  });
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupOrdering = new Semigroup(function (v) {
      return function (v1) {
          if (v instanceof LT) {
              return LT.value;
          };
          if (v instanceof GT) {
              return GT.value;
          };
          if (v instanceof EQ) {
              return v1;
          };
          throw new Error("Failed pattern match at Prelude line 413, column 1 - line 418, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var semigroupArray = new Semigroup($foreign.concatArray);
  var ringUnit = new Ring(function () {
      return semiringUnit;
  }, function (v) {
      return function (v1) {
          return unit;
      };
  });
  var ringNumber = new Ring(function () {
      return semiringNumber;
  }, $foreign.numSub);
  var ringInt = new Ring(function () {
      return semiringInt;
  }, $foreign.intSub);
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (dictApplicative) {
      return pure(dictApplicative);
  };
  var otherwise = true;
  var one = function (dict) {
      return dict.one;
  };
  var not = function (dict) {
      return dict.not;
  };
  var negate = function (dictRing) {
      return function (a) {
          return $minus(dictRing)(zero(dictRing["__superclass_Prelude.Semiring_0"]()))(a);
      };
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var $times = function (dictSemiring) {
      return mul(dictSemiring);
  };
  var moduloSemiringUnit = new ModuloSemiring(function () {
      return semiringUnit;
  }, function (v) {
      return function (v1) {
          return unit;
      };
  }, function (v) {
      return function (v1) {
          return unit;
      };
  });
  var moduloSemiringNumber = new ModuloSemiring(function () {
      return semiringNumber;
  }, $foreign.numDiv, function (v) {
      return function (v1) {
          return 0.0;
      };
  });
  var moduloSemiringInt = new ModuloSemiring(function () {
      return semiringInt;
  }, $foreign.intDiv, $foreign.intMod);
  var mod = function (dict) {
      return dict.mod;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (dictFunctor) {
      return map(dictFunctor);
  };
  var $less$hash$greater = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return $less$dollar$greater(dictFunctor)(f)(fa);
          };
      };
  };
  var id = function (dict) {
      return dict.id;
  };
  var functorArray = new Functor($foreign.arrayMap);
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var eqUnit = new Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var ordUnit = new Ord(function () {
      return eqUnit;
  }, function (v) {
      return function (v1) {
          return EQ.value;
      };
  });
  var eqString = new Eq($foreign.refEq);
  var ordString = new Ord(function () {
      return eqString;
  }, unsafeCompare);
  var eqOrdering = new Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  var ordOrdering = new Ord(function () {
      return eqOrdering;
  }, function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return EQ.value;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return EQ.value;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return EQ.value;
          };
          if (v instanceof LT) {
              return LT.value;
          };
          if (v instanceof EQ && v1 instanceof LT) {
              return GT.value;
          };
          if (v instanceof EQ && v1 instanceof GT) {
              return LT.value;
          };
          if (v instanceof GT) {
              return GT.value;
          };
          throw new Error("Failed pattern match at Prelude line 668, column 1 - line 677, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var eqNumber = new Eq($foreign.refEq);
  var ordNumber = new Ord(function () {
      return eqNumber;
  }, unsafeCompare);
  var eqInt = new Eq($foreign.refEq);
  var ordInt = new Ord(function () {
      return eqInt;
  }, unsafeCompare);
  var eqChar = new Eq($foreign.refEq);
  var ordChar = new Ord(function () {
      return eqChar;
  }, unsafeCompare);
  var eqBoolean = new Eq($foreign.refEq);
  var ordBoolean = new Ord(function () {
      return eqBoolean;
  }, unsafeCompare);
  var eq = function (dict) {
      return dict.eq;
  };
  var $eq$eq = function (dictEq) {
      return eq(dictEq);
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl($eq$eq(dictEq)));
  };
  var divisionRingUnit = new DivisionRing(function () {
      return moduloSemiringUnit;
  }, function () {
      return ringUnit;
  });
  var numUnit = new Num(function () {
      return divisionRingUnit;
  });
  var divisionRingNumber = new DivisionRing(function () {
      return moduloSemiringNumber;
  }, function () {
      return ringNumber;
  });
  var numNumber = new Num(function () {
      return divisionRingNumber;
  });
  var div = function (dict) {
      return dict.div;
  };
  var $div = function (dictModuloSemiring) {
      return div(dictModuloSemiring);
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var $bar$bar = function (dictBooleanAlgebra) {
      return disj(dictBooleanAlgebra);
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var $$void = function (dictFunctor) {
      return function (fa) {
          return $less$dollar$greater(dictFunctor)($$const(unit))(fa);
      };
  };
  var conj = function (dict) {
      return dict.conj;
  };
  var $amp$amp = function (dictBooleanAlgebra) {
      return conj(dictBooleanAlgebra);
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var functorFn = new Functor(compose(semigroupoidFn));
  var $less$less$less = function (dictSemigroupoid) {
      return compose(dictSemigroupoid);
  };
  var $greater$greater$greater = function (dictSemigroupoid) {
      return flip(compose(dictSemigroupoid));
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var ordArray = function (dictOrd) {
      return new Ord(function () {
          return eqArray(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (xs) {
          return function (ys) {
              return $dollar(compare(ordInt)(0))($foreign.ordArrayImpl(function (x) {
                  return function (y) {
                      var $79 = compare(dictOrd)(x)(y);
                      if ($79 instanceof EQ) {
                          return 0;
                      };
                      if ($79 instanceof LT) {
                          return 1;
                      };
                      if ($79 instanceof GT) {
                          return negate(ringInt)(1);
                      };
                      throw new Error("Failed pattern match at Prelude line 660, column 1 - line 666, column 1: " + [ $79.constructor.name ]);
                  };
              })(xs)(ys));
          };
      });
  };
  var $less = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $80 = compare(dictOrd)(a1)(a2);
              if ($80 instanceof LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var $less$eq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $81 = compare(dictOrd)(a1)(a2);
              if ($81 instanceof GT) {
                  return false;
              };
              return true;
          };
      };
  };
  var $greater = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $82 = compare(dictOrd)(a1)(a2);
              if ($82 instanceof GT) {
                  return true;
              };
              return false;
          };
      };
  };
  var $greater$eq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var $83 = compare(dictOrd)(a1)(a2);
              if ($83 instanceof LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var boundedUnit = new Bounded(unit, unit);
  var boundedOrdering = new Bounded(LT.value, GT.value);
  var boundedOrdUnit = new BoundedOrd(function () {
      return boundedUnit;
  }, function () {
      return ordUnit;
  });
  var boundedOrdOrdering = new BoundedOrd(function () {
      return boundedOrdering;
  }, function () {
      return ordOrdering;
  });
  var boundedInt = new Bounded($foreign.bottomInt, $foreign.topInt);
  var boundedOrdInt = new BoundedOrd(function () {
      return boundedInt;
  }, function () {
      return ordInt;
  });
  var boundedChar = new Bounded($foreign.bottomChar, $foreign.topChar);
  var boundedOrdChar = new BoundedOrd(function () {
      return boundedChar;
  }, function () {
      return ordChar;
  });
  var boundedBoolean = new Bounded(false, true);
  var boundedOrdBoolean = new BoundedOrd(function () {
      return boundedBoolean;
  }, function () {
      return ordBoolean;
  });
  var bottom = function (dict) {
      return dict.bottom;
  };
  var boundedFn = function (dictBounded) {
      return new Bounded(function (v) {
          return bottom(dictBounded);
      }, function (v) {
          return top(dictBounded);
      });
  };
  var booleanAlgebraUnit = new BooleanAlgebra(function () {
      return boundedUnit;
  }, function (v) {
      return function (v1) {
          return unit;
      };
  }, function (v) {
      return function (v1) {
          return unit;
      };
  }, function (v) {
      return unit;
  });
  var booleanAlgebraFn = function (dictBooleanAlgebra) {
      return new BooleanAlgebra(function () {
          return boundedFn(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]());
      }, function (fx) {
          return function (fy) {
              return function (a) {
                  return conj(dictBooleanAlgebra)(fx(a))(fy(a));
              };
          };
      }, function (fx) {
          return function (fy) {
              return function (a) {
                  return disj(dictBooleanAlgebra)(fx(a))(fy(a));
              };
          };
      }, function (fx) {
          return function (a) {
              return not(dictBooleanAlgebra)(fx(a));
          };
      });
  };
  var booleanAlgebraBoolean = new BooleanAlgebra(function () {
      return boundedBoolean;
  }, $foreign.boolAnd, $foreign.boolOr, $foreign.boolNot);
  var $div$eq = function (dictEq) {
      return function (x) {
          return function (y) {
              return not(booleanAlgebraBoolean)($eq$eq(dictEq)(x)(y));
          };
      };
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var liftM1 = function (dictMonad) {
      return function (f) {
          return function (a) {
              return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v) {
                  return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(f(v));
              });
          };
      };
  };
  var $greater$greater$eq = function (dictBind) {
      return bind(dictBind);
  };
  var asTypeOf = function (x) {
      return function (v) {
          return x;
      };
  };
  var applyFn = new Apply(function () {
      return functorFn;
  }, function (f) {
      return function (g) {
          return function (x) {
              return f(x)(g(x));
          };
      };
  });
  var bindFn = new Bind(function () {
      return applyFn;
  }, function (m) {
      return function (f) {
          return function (x) {
              return f(m(x))(x);
          };
      };
  });
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (dictApply) {
      return apply(dictApply);
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return $less$times$greater(dictApplicative["__superclass_Prelude.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  var applicativeFn = new Applicative(function () {
      return applyFn;
  }, $$const);
  var monadFn = new Monad(function () {
      return applicativeFn;
  }, function () {
      return bindFn;
  });
  var append = function (dict) {
      return dict.append;
  };
  var $plus$plus = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var $less$greater = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var semigroupFn = function (dictSemigroup) {
      return new Semigroup(function (f) {
          return function (g) {
              return function (x) {
                  return $less$greater(dictSemigroup)(f(x))(g(x));
              };
          };
      });
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return bind(dictMonad["__superclass_Prelude.Bind_1"]())(f)(function (v) {
                  return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v1) {
                      return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  var monadArray = new Monad(function () {
      return applicativeArray;
  }, function () {
      return bindArray;
  });
  var bindArray = new Bind(function () {
      return applyArray;
  }, $foreign.arrayBind);
  var applyArray = new Apply(function () {
      return functorArray;
  }, ap(monadArray));
  var applicativeArray = new Applicative(function () {
      return applyArray;
  }, function (x) {
      return [ x ];
  });
  var add = function (dict) {
      return dict.add;
  };
  var $plus = function (dictSemiring) {
      return add(dictSemiring);
  };
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["Show"] = Show;
  exports["BooleanAlgebra"] = BooleanAlgebra;
  exports["BoundedOrd"] = BoundedOrd;
  exports["Bounded"] = Bounded;
  exports["Ord"] = Ord;
  exports["Eq"] = Eq;
  exports["DivisionRing"] = DivisionRing;
  exports["Num"] = Num;
  exports["Ring"] = Ring;
  exports["ModuloSemiring"] = ModuloSemiring;
  exports["Semiring"] = Semiring;
  exports["Semigroup"] = Semigroup;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["show"] = show;
  exports["||"] = $bar$bar;
  exports["&&"] = $amp$amp;
  exports["not"] = not;
  exports["disj"] = disj;
  exports["conj"] = conj;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["unsafeCompare"] = unsafeCompare;
  exports[">="] = $greater$eq;
  exports["<="] = $less$eq;
  exports[">"] = $greater;
  exports["<"] = $less;
  exports["compare"] = compare;
  exports["/="] = $div$eq;
  exports["=="] = $eq$eq;
  exports["eq"] = eq;
  exports["-"] = $minus;
  exports["negate"] = negate;
  exports["sub"] = sub;
  exports["/"] = $div;
  exports["mod"] = mod;
  exports["div"] = div;
  exports["*"] = $times;
  exports["+"] = $plus;
  exports["one"] = one;
  exports["mul"] = mul;
  exports["zero"] = zero;
  exports["add"] = add;
  exports["++"] = $plus$plus;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports["liftM1"] = liftM1;
  exports["return"] = $$return;
  exports[">>="] = $greater$greater$eq;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["void"] = $$void;
  exports["<#>"] = $less$hash$greater;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["id"] = id;
  exports[">>>"] = $greater$greater$greater;
  exports["<<<"] = $less$less$less;
  exports["compose"] = compose;
  exports["otherwise"] = otherwise;
  exports["asTypeOf"] = asTypeOf;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["#"] = $hash;
  exports["$"] = $dollar;
  exports["unit"] = unit;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
  exports["applyFn"] = applyFn;
  exports["applyArray"] = applyArray;
  exports["applicativeFn"] = applicativeFn;
  exports["applicativeArray"] = applicativeArray;
  exports["bindFn"] = bindFn;
  exports["bindArray"] = bindArray;
  exports["monadFn"] = monadFn;
  exports["monadArray"] = monadArray;
  exports["semigroupString"] = semigroupString;
  exports["semigroupUnit"] = semigroupUnit;
  exports["semigroupFn"] = semigroupFn;
  exports["semigroupOrdering"] = semigroupOrdering;
  exports["semigroupArray"] = semigroupArray;
  exports["semiringInt"] = semiringInt;
  exports["semiringNumber"] = semiringNumber;
  exports["semiringUnit"] = semiringUnit;
  exports["ringInt"] = ringInt;
  exports["ringNumber"] = ringNumber;
  exports["ringUnit"] = ringUnit;
  exports["moduloSemiringInt"] = moduloSemiringInt;
  exports["moduloSemiringNumber"] = moduloSemiringNumber;
  exports["moduloSemiringUnit"] = moduloSemiringUnit;
  exports["divisionRingNumber"] = divisionRingNumber;
  exports["divisionRingUnit"] = divisionRingUnit;
  exports["numNumber"] = numNumber;
  exports["numUnit"] = numUnit;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["eqUnit"] = eqUnit;
  exports["eqArray"] = eqArray;
  exports["eqOrdering"] = eqOrdering;
  exports["ordBoolean"] = ordBoolean;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
  exports["ordUnit"] = ordUnit;
  exports["ordArray"] = ordArray;
  exports["ordOrdering"] = ordOrdering;
  exports["boundedBoolean"] = boundedBoolean;
  exports["boundedUnit"] = boundedUnit;
  exports["boundedOrdering"] = boundedOrdering;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
  exports["boundedFn"] = boundedFn;
  exports["boundedOrdBoolean"] = boundedOrdBoolean;
  exports["boundedOrdUnit"] = boundedOrdUnit;
  exports["boundedOrdOrdering"] = boundedOrdOrdering;
  exports["boundedOrdInt"] = boundedOrdInt;
  exports["boundedOrdChar"] = boundedOrdChar;
  exports["booleanAlgebraBoolean"] = booleanAlgebraBoolean;
  exports["booleanAlgebraUnit"] = booleanAlgebraUnit;
  exports["booleanAlgebraFn"] = booleanAlgebraFn;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
  exports["showUnit"] = showUnit;
  exports["showArray"] = showArray;
  exports["showOrdering"] = showOrdering;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Alt = function (__superclass_Prelude$dotFunctor_0, alt) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.alt = alt;
  };
  var altArray = new Alt(function () {
      return Prelude.functorArray;
  }, Prelude.append(Prelude.semigroupArray));
  var alt = function (dict) {
      return dict.alt;
  };
  var $less$bar$greater = function (dictAlt) {
      return alt(dictAlt);
  };
  exports["Alt"] = Alt;
  exports["<|>"] = $less$bar$greater;
  exports["alt"] = alt;
  exports["altArray"] = altArray;;
 
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];     
  var Plus = function (__superclass_Control$dotAlt$dotAlt_0, empty) {
      this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
      this.empty = empty;
  };
  var plusArray = new Plus(function () {
      return Control_Alt.altArray;
  }, [  ]);
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
  exports["plusArray"] = plusArray;;
 
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Plus = PS["Control.Plus"];     
  var Alternative = function (__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
      this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
  };
  var alternativeArray = new Alternative(function () {
      return Control_Plus.plusArray;
  }, function () {
      return Prelude.applicativeArray;
  });
  exports["Alternative"] = Alternative;
  exports["alternativeArray"] = alternativeArray;;
 
})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Extend = function (__superclass_Prelude$dotFunctor_0, extend) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.extend = extend;
  };
  var extendFn = function (dictSemigroup) {
      return new Extend(function () {
          return Prelude.functorFn;
      }, function (f) {
          return function (g) {
              return function (w) {
                  return f(function (w$prime) {
                      return g(Prelude["<>"](dictSemigroup)(w)(w$prime));
                  });
              };
          };
      });
  };
  var extend = function (dict) {
      return dict.extend;
  };
  var $less$less$eq = function (dictExtend) {
      return extend(dictExtend);
  };
  var $eq$less$eq = function (dictExtend) {
      return function (f) {
          return function (g) {
              return function (w) {
                  return f($less$less$eq(dictExtend)(g)(w));
              };
          };
      };
  };
  var $eq$greater$eq = function (dictExtend) {
      return function (f) {
          return function (g) {
              return function (w) {
                  return g($less$less$eq(dictExtend)(f)(w));
              };
          };
      };
  };
  var $eq$greater$greater = function (dictExtend) {
      return function (w) {
          return function (f) {
              return $less$less$eq(dictExtend)(f)(w);
          };
      };
  };
  var duplicate = function (dictExtend) {
      return extend(dictExtend)(Prelude.id(Prelude.categoryFn));
  };
  exports["Extend"] = Extend;
  exports["duplicate"] = duplicate;
  exports["=<="] = $eq$less$eq;
  exports["=>="] = $eq$greater$eq;
  exports["=>>"] = $eq$greater$greater;
  exports["<<="] = $less$less$eq;
  exports["extend"] = extend;
  exports["extendFn"] = extendFn;;
 
})(PS["Control.Extend"] = PS["Control.Extend"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Plus = PS["Control.Plus"];     
  var MonadPlus = function (__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Prelude$dotMonad_0) {
      this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
  };
  var monadPlusArray = new MonadPlus(function () {
      return Control_Alternative.alternativeArray;
  }, function () {
      return Prelude.monadArray;
  });
  var guard = function (dictMonadPlus) {
      return function (v) {
          if (v) {
              return Prelude["return"]((dictMonadPlus["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Prelude.Applicative_0"]())(Prelude.unit);
          };
          if (!v) {
              return Control_Plus.empty((dictMonadPlus["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
          };
          throw new Error("Failed pattern match at Control.MonadPlus line 35, column 1 - line 36, column 1: " + [ v.constructor.name ]);
      };
  };
  exports["MonadPlus"] = MonadPlus;
  exports["guard"] = guard;
  exports["monadPlusArray"] = monadPlusArray;;
 
})(PS["Control.MonadPlus"] = PS["Control.MonadPlus"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Invariant = function (imap) {
      this.imap = imap;
  };
  var imapF = function (dictFunctor) {
      return function ($1) {
          return Prelude["const"](Prelude.map(dictFunctor)($1));
      };
  };
  var invariantArray = new Invariant(imapF(Prelude.functorArray));
  var invariantFn = new Invariant(imapF(Prelude.functorFn));
  var imap = function (dict) {
      return dict.imap;
  };
  exports["Invariant"] = Invariant;
  exports["imapF"] = imapF;
  exports["imap"] = imap;
  exports["invariantFn"] = invariantFn;
  exports["invariantArray"] = invariantArray;;
 
})(PS["Data.Functor.Invariant"] = PS["Data.Functor.Invariant"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
      this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
      this.mempty = mempty;
  };
  var monoidUnit = new Monoid(function () {
      return Prelude.semigroupUnit;
  }, Prelude.unit);
  var monoidString = new Monoid(function () {
      return Prelude.semigroupString;
  }, "");
  var monoidArray = new Monoid(function () {
      return Prelude.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidFn = function (dictMonoid) {
      return new Monoid(function () {
          return Prelude.semigroupFn(dictMonoid["__superclass_Prelude.Semigroup_0"]());
      }, Prelude["const"](mempty(dictMonoid)));
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidUnit"] = monoidUnit;
  exports["monoidFn"] = monoidFn;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;;
 
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var showMaybe = function (dictShow) {
      return new Prelude.Show(function (v) {
          if (v instanceof Just) {
              return "Just (" + (Prelude.show(dictShow)(v.value0) + ")");
          };
          if (v instanceof Nothing) {
              return "Nothing";
          };
          throw new Error("Failed pattern match at Data.Maybe line 289, column 1 - line 291, column 19: " + [ v.constructor.name ]);
      });
  };
  var semigroupMaybe = function (dictSemigroup) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              if (v instanceof Nothing) {
                  return v1;
              };
              if (v1 instanceof Nothing) {
                  return v;
              };
              if (v instanceof Just && v1 instanceof Just) {
                  return new Just(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Maybe line 231, column 1 - line 236, column 1: " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  var monoidMaybe = function (dictSemigroup) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMaybe(dictSemigroup);
      }, Nothing.value);
  };
  var maybe$prime = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v(Prelude.unit);
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 39, column 1 - line 40, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 26, column 1 - line 27, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Prelude["const"](false));
  var isJust = maybe(false)(Prelude["const"](true));
  var functorMaybe = new Prelude.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var invariantMaybe = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorMaybe));
  var fromMaybe$prime = function (a) {
      return maybe$prime(a)(Prelude.id(Prelude.categoryFn));
  };
  var fromMaybe = function (a) {
      return maybe(a)(Prelude.id(Prelude.categoryFn));
  };
  var extendMaybe = new Control_Extend.Extend(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Nothing) {
              return Nothing.value;
          };
          return new Just(v(v1));
      };
  });
  var eqMaybe = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              if (v instanceof Nothing && v1 instanceof Nothing) {
                  return true;
              };
              if (v instanceof Just && v1 instanceof Just) {
                  return Prelude["=="](dictEq)(v.value0)(v1.value0);
              };
              return false;
          };
      });
  };
  var ordMaybe = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqMaybe(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              if (v instanceof Just && v1 instanceof Just) {
                  return Prelude.compare(dictOrd)(v.value0)(v1.value0);
              };
              if (v instanceof Nothing && v1 instanceof Nothing) {
                  return Prelude.EQ.value;
              };
              if (v instanceof Nothing) {
                  return Prelude.LT.value;
              };
              if (v1 instanceof Nothing) {
                  return Prelude.GT.value;
              };
              throw new Error("Failed pattern match at Data.Maybe line 269, column 1 - line 275, column 1: " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  var boundedMaybe = function (dictBounded) {
      return new Prelude.Bounded(Nothing.value, new Just(Prelude.top(dictBounded)));
  };
  var boundedOrdMaybe = function (dictBoundedOrd) {
      return new Prelude.BoundedOrd(function () {
          return boundedMaybe(dictBoundedOrd["__superclass_Prelude.Bounded_0"]());
      }, function () {
          return ordMaybe(dictBoundedOrd["__superclass_Prelude.Ord_1"]());
      });
  };
  var applyMaybe = new Prelude.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Prelude["<$>"](functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 121, column 1 - line 145, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Prelude.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 180, column 1 - line 199, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var booleanAlgebraMaybe = function (dictBooleanAlgebra) {
      return new Prelude.BooleanAlgebra(function () {
          return boundedMaybe(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]());
      }, function (x) {
          return function (y) {
              return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.conj(dictBooleanAlgebra))(x))(y);
          };
      }, function (x) {
          return function (y) {
              return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.disj(dictBooleanAlgebra))(x))(y);
          };
      }, Prelude.map(functorMaybe)(Prelude.not(dictBooleanAlgebra)));
  };
  var semiringMaybe = function (dictSemiring) {
      return new Prelude.Semiring(function (x) {
          return function (y) {
              return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.add(dictSemiring))(x))(y);
          };
      }, function (x) {
          return function (y) {
              return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.mul(dictSemiring))(x))(y);
          };
      }, new Just(Prelude.one(dictSemiring)), new Just(Prelude.zero(dictSemiring)));
  };
  var moduloSemiringMaybe = function (dictModuloSemiring) {
      return new Prelude.ModuloSemiring(function () {
          return semiringMaybe(dictModuloSemiring["__superclass_Prelude.Semiring_0"]());
      }, function (x) {
          return function (y) {
              return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.div(dictModuloSemiring))(x))(y);
          };
      }, function (x) {
          return function (y) {
              return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.mod(dictModuloSemiring))(x))(y);
          };
      });
  };
  var ringMaybe = function (dictRing) {
      return new Prelude.Ring(function () {
          return semiringMaybe(dictRing["__superclass_Prelude.Semiring_0"]());
      }, function (x) {
          return function (y) {
              return Prelude["<*>"](applyMaybe)(Prelude["<$>"](functorMaybe)(Prelude.sub(dictRing))(x))(y);
          };
      });
  };
  var divisionRingMaybe = function (dictDivisionRing) {
      return new Prelude.DivisionRing(function () {
          return moduloSemiringMaybe(dictDivisionRing["__superclass_Prelude.ModuloSemiring_1"]());
      }, function () {
          return ringMaybe(dictDivisionRing["__superclass_Prelude.Ring_0"]());
      });
  };
  var numMaybe = function (dictNum) {
      return new Prelude.Num(function () {
          return divisionRingMaybe(dictNum["__superclass_Prelude.DivisionRing_0"]());
      });
  };
  var applicativeMaybe = new Prelude.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var monadMaybe = new Prelude.Monad(function () {
      return applicativeMaybe;
  }, function () {
      return bindMaybe;
  });
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });
  var plusMaybe = new Control_Plus.Plus(function () {
      return altMaybe;
  }, Nothing.value);
  var alternativeMaybe = new Control_Alternative.Alternative(function () {
      return plusMaybe;
  }, function () {
      return applicativeMaybe;
  });
  var monadPlusMaybe = new Control_MonadPlus.MonadPlus(function () {
      return alternativeMaybe;
  }, function () {
      return monadMaybe;
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["isNothing"] = isNothing;
  exports["isJust"] = isJust;
  exports["fromMaybe'"] = fromMaybe$prime;
  exports["fromMaybe"] = fromMaybe;
  exports["maybe'"] = maybe$prime;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["plusMaybe"] = plusMaybe;
  exports["alternativeMaybe"] = alternativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["monadMaybe"] = monadMaybe;
  exports["monadPlusMaybe"] = monadPlusMaybe;
  exports["extendMaybe"] = extendMaybe;
  exports["invariantMaybe"] = invariantMaybe;
  exports["semigroupMaybe"] = semigroupMaybe;
  exports["monoidMaybe"] = monoidMaybe;
  exports["semiringMaybe"] = semiringMaybe;
  exports["moduloSemiringMaybe"] = moduloSemiringMaybe;
  exports["ringMaybe"] = ringMaybe;
  exports["divisionRingMaybe"] = divisionRingMaybe;
  exports["numMaybe"] = numMaybe;
  exports["eqMaybe"] = eqMaybe;
  exports["ordMaybe"] = ordMaybe;
  exports["boundedMaybe"] = boundedMaybe;
  exports["boundedOrdMaybe"] = boundedOrdMaybe;
  exports["booleanAlgebraMaybe"] = booleanAlgebraMaybe;
  exports["showMaybe"] = showMaybe;;
 
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Lazy = function (defer) {
      this.defer = defer;
  };
  var defer = function (dict) {
      return dict.defer;
  };
  var fix = function (dictLazy) {
      return function (f) {
          return defer(dictLazy)(function (v) {
              return f(fix(dictLazy)(f));
          });
      };
  };
  exports["Lazy"] = Lazy;
  exports["fix"] = fix;
  exports["defer"] = defer;;
 
})(PS["Control.Lazy"] = PS["Control.Lazy"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var $less$times = function (dictApply) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"])(a))(b);
          };
      };
  };
  var $times$greater = function (dictApply) {
      return function (a) {
          return function (b) {
              return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(a))(b);
          };
      };
  };
  var lift5 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return function (e) {
                              return Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d))(e);
                          };
                      };
                  };
              };
          };
      };
  };
  var lift4 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return function (d) {
                          return Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d);
                      };
                  };
              };
          };
      };
  };
  var lift3 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return Prelude["<*>"](dictApply)(Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c);
                  };
              };
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(f)(a))(b);
              };
          };
      };
  };
  exports["lift5"] = lift5;
  exports["lift4"] = lift4;
  exports["lift3"] = lift3;
  exports["lift2"] = lift2;
  exports["*>"] = $times$greater;
  exports["<*"] = $less$times;;
 
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Extend = PS["Control.Extend"];     
  var Comonad = function (__superclass_Control$dotExtend$dotExtend_0, extract) {
      this["__superclass_Control.Extend.Extend_0"] = __superclass_Control$dotExtend$dotExtend_0;
      this.extract = extract;
  };
  var extract = function (dict) {
      return dict.extract;
  };
  exports["Comonad"] = Comonad;
  exports["extract"] = extract;;
 
})(PS["Control.Comonad"] = PS["Control.Comonad"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];     
  var First = function (x) {
      return x;
  };
  var showFirst = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "First (" + (Prelude.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
      });
  };
  var semigroupFirst = new Prelude.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Just) {
              return v;
          };
          return v1;
      };
  });
  var runFirst = function (v) {
      return v;
  };
  var monoidFirst = new Data_Monoid.Monoid(function () {
      return semigroupFirst;
  }, Data_Maybe.Nothing.value);
  var functorFirst = new Prelude.Functor(function (f) {
      return function (v) {
          return Prelude["<$>"](Data_Maybe.functorMaybe)(f)(v);
      };
  });
  var invariantFirst = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorFirst));
  var extendFirst = new Control_Extend.Extend(function () {
      return functorFirst;
  }, function (f) {
      return function (v) {
          return Control_Extend.extend(Data_Maybe.extendMaybe)(function ($34) {
              return f(First($34));
          })(v);
      };
  });
  var eqFirst = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              return Prelude["=="](Data_Maybe.eqMaybe(dictEq))(v)(v1);
          };
      });
  };
  var ordFirst = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqFirst(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.compare(Data_Maybe.ordMaybe(dictOrd))(v)(v1);
          };
      });
  };
  var boundedFirst = function (dictBounded) {
      return new Prelude.Bounded(Prelude.bottom(Data_Maybe.boundedMaybe(dictBounded)), Prelude.top(Data_Maybe.boundedMaybe(dictBounded)));
  };
  var applyFirst = new Prelude.Apply(function () {
      return functorFirst;
  }, function (v) {
      return function (v1) {
          return Prelude["<*>"](Data_Maybe.applyMaybe)(v)(v1);
      };
  });
  var bindFirst = new Prelude.Bind(function () {
      return applyFirst;
  }, function (v) {
      return function (f) {
          return Prelude.bind(Data_Maybe.bindMaybe)(v)(function ($35) {
              return runFirst(f($35));
          });
      };
  });
  var applicativeFirst = new Prelude.Applicative(function () {
      return applyFirst;
  }, function ($36) {
      return First(Prelude.pure(Data_Maybe.applicativeMaybe)($36));
  });
  var monadFirst = new Prelude.Monad(function () {
      return applicativeFirst;
  }, function () {
      return bindFirst;
  });
  exports["First"] = First;
  exports["runFirst"] = runFirst;
  exports["eqFirst"] = eqFirst;
  exports["ordFirst"] = ordFirst;
  exports["boundedFirst"] = boundedFirst;
  exports["functorFirst"] = functorFirst;
  exports["applyFirst"] = applyFirst;
  exports["applicativeFirst"] = applicativeFirst;
  exports["bindFirst"] = bindFirst;
  exports["monadFirst"] = monadFirst;
  exports["extendFirst"] = extendFirst;
  exports["invariantFirst"] = invariantFirst;
  exports["showFirst"] = showFirst;
  exports["semigroupFirst"] = semigroupFirst;
  exports["monoidFirst"] = monoidFirst;;
 
})(PS["Data.Maybe.First"] = PS["Data.Maybe.First"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Last = function (x) {
      return x;
  };
  var showLast = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "Last (" + (Prelude.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
      });
  };
  var semigroupLast = new Prelude.Semigroup(function (v) {
      return function (v1) {
          if (v1 instanceof Data_Maybe.Just) {
              return v1;
          };
          if (v1 instanceof Data_Maybe.Nothing) {
              return v;
          };
          throw new Error("Failed pattern match at Data.Maybe.Last line 57, column 1 - line 61, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var runLast = function (v) {
      return v;
  };
  var monoidLast = new Data_Monoid.Monoid(function () {
      return semigroupLast;
  }, Data_Maybe.Nothing.value);
  var functorLast = new Prelude.Functor(function (f) {
      return function (v) {
          return Prelude["<$>"](Data_Maybe.functorMaybe)(f)(v);
      };
  });
  var invariantLast = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorLast));
  var extendLast = new Control_Extend.Extend(function () {
      return functorLast;
  }, function (f) {
      return function (v) {
          return Control_Extend.extend(Data_Maybe.extendMaybe)(function ($34) {
              return f(Last($34));
          })(v);
      };
  });
  var eqLast = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              return Prelude["=="](Data_Maybe.eqMaybe(dictEq))(v)(v1);
          };
      });
  };
  var ordLast = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqLast(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.compare(Data_Maybe.ordMaybe(dictOrd))(v)(v1);
          };
      });
  };
  var boundedLast = function (dictBounded) {
      return new Prelude.Bounded(Prelude.bottom(Data_Maybe.boundedMaybe(dictBounded)), Prelude.top(Data_Maybe.boundedMaybe(dictBounded)));
  };
  var applyLast = new Prelude.Apply(function () {
      return functorLast;
  }, function (v) {
      return function (v1) {
          return Prelude["<*>"](Data_Maybe.applyMaybe)(v)(v1);
      };
  });
  var bindLast = new Prelude.Bind(function () {
      return applyLast;
  }, function (v) {
      return function (f) {
          return Prelude.bind(Data_Maybe.bindMaybe)(v)(function ($35) {
              return runLast(f($35));
          });
      };
  });
  var applicativeLast = new Prelude.Applicative(function () {
      return applyLast;
  }, function ($36) {
      return Last(Prelude.pure(Data_Maybe.applicativeMaybe)($36));
  });
  var monadLast = new Prelude.Monad(function () {
      return applicativeLast;
  }, function () {
      return bindLast;
  });
  exports["Last"] = Last;
  exports["runLast"] = runLast;
  exports["eqLast"] = eqLast;
  exports["ordLast"] = ordLast;
  exports["boundedLast"] = boundedLast;
  exports["functorLast"] = functorLast;
  exports["applyLast"] = applyLast;
  exports["applicativeLast"] = applicativeLast;
  exports["bindLast"] = bindLast;
  exports["monadLast"] = monadLast;
  exports["extendLast"] = extendLast;
  exports["invariantLast"] = invariantLast;
  exports["showLast"] = showLast;
  exports["semigroupLast"] = semigroupLast;
  exports["monoidLast"] = monoidLast;;
 
})(PS["Data.Maybe.Last"] = PS["Data.Maybe.Last"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Additive = function (x) {
      return x;
  };
  var showAdditive = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "Additive (" + (Prelude.show(dictShow)(v) + ")");
      });
  };
  var semigroupAdditive = function (dictSemiring) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              return Prelude["+"](dictSemiring)(v)(v1);
          };
      });
  };
  var runAdditive = function (v) {
      return v;
  };
  var monoidAdditive = function (dictSemiring) {
      return new Data_Monoid.Monoid(function () {
          return semigroupAdditive(dictSemiring);
      }, Prelude.zero(dictSemiring));
  };
  var invariantAdditive = new Data_Functor_Invariant.Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var functorAdditive = new Prelude.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendAdditive = new Control_Extend.Extend(function () {
      return functorAdditive;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqAdditive = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              return Prelude["=="](dictEq)(v)(v1);
          };
      });
  };
  var ordAdditive = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqAdditive(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.compare(dictOrd)(v)(v1);
          };
      });
  };
  var comonadAdditive = new Control_Comonad.Comonad(function () {
      return extendAdditive;
  }, runAdditive);
  var applyAdditive = new Prelude.Apply(function () {
      return functorAdditive;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindAdditive = new Prelude.Bind(function () {
      return applyAdditive;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeAdditive = new Prelude.Applicative(function () {
      return applyAdditive;
  }, Additive);
  var monadAdditive = new Prelude.Monad(function () {
      return applicativeAdditive;
  }, function () {
      return bindAdditive;
  });
  exports["Additive"] = Additive;
  exports["runAdditive"] = runAdditive;
  exports["eqAdditive"] = eqAdditive;
  exports["ordAdditive"] = ordAdditive;
  exports["functorAdditive"] = functorAdditive;
  exports["applyAdditive"] = applyAdditive;
  exports["applicativeAdditive"] = applicativeAdditive;
  exports["bindAdditive"] = bindAdditive;
  exports["monadAdditive"] = monadAdditive;
  exports["extendAdditive"] = extendAdditive;
  exports["comonadAdditive"] = comonadAdditive;
  exports["invariantAdditive"] = invariantAdditive;
  exports["showAdditive"] = showAdditive;
  exports["semigroupAdditive"] = semigroupAdditive;
  exports["monoidAdditive"] = monoidAdditive;;
 
})(PS["Data.Monoid.Additive"] = PS["Data.Monoid.Additive"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Conj = function (x) {
      return x;
  };
  var showConj = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "Conj (" + (Prelude.show(dictShow)(v) + ")");
      });
  };
  var semiringConj = function (dictBooleanAlgebra) {
      return new Prelude.Semiring(function (v) {
          return function (v1) {
              return Prelude.conj(dictBooleanAlgebra)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Prelude.disj(dictBooleanAlgebra)(v)(v1);
          };
      }, Prelude.bottom(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()), Prelude.top(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
  };
  var semigroupConj = function (dictBooleanAlgebra) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              return Prelude.conj(dictBooleanAlgebra)(v)(v1);
          };
      });
  };
  var runConj = function (v) {
      return v;
  };
  var monoidConj = function (dictBooleanAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictBooleanAlgebra);
      }, Prelude.top(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
  };
  var functorConj = new Prelude.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendConj = new Control_Extend.Extend(function () {
      return functorConj;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqConj = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              return Prelude["=="](dictEq)(v)(v1);
          };
      });
  };
  var ordConj = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqConj(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.compare(dictOrd)(v)(v1);
          };
      });
  };
  var comonadConj = new Control_Comonad.Comonad(function () {
      return extendConj;
  }, runConj);
  var boundedConj = function (dictBounded) {
      return new Prelude.Bounded(Prelude.bottom(dictBounded), Prelude.top(dictBounded));
  };
  var applyConj = new Prelude.Apply(function () {
      return functorConj;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindConj = new Prelude.Bind(function () {
      return applyConj;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeConj = new Prelude.Applicative(function () {
      return applyConj;
  }, Conj);
  var monadConj = new Prelude.Monad(function () {
      return applicativeConj;
  }, function () {
      return bindConj;
  });
  exports["Conj"] = Conj;
  exports["runConj"] = runConj;
  exports["eqConj"] = eqConj;
  exports["ordConj"] = ordConj;
  exports["boundedConj"] = boundedConj;
  exports["functorConj"] = functorConj;
  exports["applyConj"] = applyConj;
  exports["applicativeConj"] = applicativeConj;
  exports["bindConj"] = bindConj;
  exports["monadConj"] = monadConj;
  exports["extendConj"] = extendConj;
  exports["comonadConj"] = comonadConj;
  exports["showConj"] = showConj;
  exports["semigroupConj"] = semigroupConj;
  exports["monoidConj"] = monoidConj;
  exports["semiringConj"] = semiringConj;;
 
})(PS["Data.Monoid.Conj"] = PS["Data.Monoid.Conj"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Disj = function (x) {
      return x;
  };
  var showDisj = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "Disj (" + (Prelude.show(dictShow)(v) + ")");
      });
  };
  var semiringDisj = function (dictBooleanAlgebra) {
      return new Prelude.Semiring(function (v) {
          return function (v1) {
              return Prelude.disj(dictBooleanAlgebra)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Prelude.conj(dictBooleanAlgebra)(v)(v1);
          };
      }, Prelude.top(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()), Prelude.bottom(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
  };
  var semigroupDisj = function (dictBooleanAlgebra) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              return Prelude.disj(dictBooleanAlgebra)(v)(v1);
          };
      });
  };
  var runDisj = function (v) {
      return v;
  };
  var monoidDisj = function (dictBooleanAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictBooleanAlgebra);
      }, Prelude.bottom(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]()));
  };
  var functorDisj = new Prelude.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendDisj = new Control_Extend.Extend(function () {
      return functorDisj;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqDisj = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              return Prelude["=="](dictEq)(v)(v1);
          };
      });
  };
  var ordDisj = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqDisj(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.compare(dictOrd)(v)(v1);
          };
      });
  };
  var comonadDisj = new Control_Comonad.Comonad(function () {
      return extendDisj;
  }, runDisj);
  var boundedDisj = function (dictBounded) {
      return new Prelude.Bounded(Prelude.bottom(dictBounded), Prelude.top(dictBounded));
  };
  var applyDisj = new Prelude.Apply(function () {
      return functorDisj;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindDisj = new Prelude.Bind(function () {
      return applyDisj;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeDisj = new Prelude.Applicative(function () {
      return applyDisj;
  }, Disj);
  var monadDisj = new Prelude.Monad(function () {
      return applicativeDisj;
  }, function () {
      return bindDisj;
  });
  exports["Disj"] = Disj;
  exports["runDisj"] = runDisj;
  exports["eqDisj"] = eqDisj;
  exports["ordDisj"] = ordDisj;
  exports["boundedDisj"] = boundedDisj;
  exports["functorDisj"] = functorDisj;
  exports["applyDisj"] = applyDisj;
  exports["applicativeDisj"] = applicativeDisj;
  exports["bindDisj"] = bindDisj;
  exports["monadDisj"] = monadDisj;
  exports["extendDisj"] = extendDisj;
  exports["comonadDisj"] = comonadDisj;
  exports["showDisj"] = showDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
  exports["semiringDisj"] = semiringDisj;;
 
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Dual = function (x) {
      return x;
  };
  var showDual = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "Dual (" + (Prelude.show(dictShow)(v) + ")");
      });
  };
  var semigroupDual = function (dictSemigroup) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              return Prelude["<>"](dictSemigroup)(v1)(v);
          };
      });
  };
  var runDual = function (v) {
      return v;
  };
  var monoidDual = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDual(dictMonoid["__superclass_Prelude.Semigroup_0"]());
      }, Data_Monoid.mempty(dictMonoid));
  };
  var invariantDual = new Data_Functor_Invariant.Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var functorDual = new Prelude.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendDual = new Control_Extend.Extend(function () {
      return functorDual;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqDual = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              return Prelude["=="](dictEq)(v)(v1);
          };
      });
  };
  var ordDual = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqDual(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.compare(dictOrd)(v)(v1);
          };
      });
  };
  var comonadDual = new Control_Comonad.Comonad(function () {
      return extendDual;
  }, runDual);
  var applyDual = new Prelude.Apply(function () {
      return functorDual;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindDual = new Prelude.Bind(function () {
      return applyDual;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeDual = new Prelude.Applicative(function () {
      return applyDual;
  }, Dual);
  var monadDual = new Prelude.Monad(function () {
      return applicativeDual;
  }, function () {
      return bindDual;
  });
  exports["Dual"] = Dual;
  exports["runDual"] = runDual;
  exports["eqDual"] = eqDual;
  exports["ordDual"] = ordDual;
  exports["functorDual"] = functorDual;
  exports["applyDual"] = applyDual;
  exports["applicativeDual"] = applicativeDual;
  exports["bindDual"] = bindDual;
  exports["monadDual"] = monadDual;
  exports["extendDual"] = extendDual;
  exports["comonadDual"] = comonadDual;
  exports["invariantDual"] = invariantDual;
  exports["showDual"] = showDual;
  exports["semigroupDual"] = semigroupDual;
  exports["monoidDual"] = monoidDual;;
 
})(PS["Data.Monoid.Dual"] = PS["Data.Monoid.Dual"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Endo = function (x) {
      return x;
  };
  var semigroupEndo = new Prelude.Semigroup(function (v) {
      return function (v1) {
          return function ($10) {
              return v(v1($10));
          };
      };
  });
  var runEndo = function (v) {
      return v;
  };
  var monoidEndo = new Data_Monoid.Monoid(function () {
      return semigroupEndo;
  }, Prelude.id(Prelude.categoryFn));
  var invariantEndo = new Data_Functor_Invariant.Invariant(function (ab) {
      return function (ba) {
          return function (v) {
              return function ($11) {
                  return ab(v(ba($11)));
              };
          };
      };
  });
  exports["Endo"] = Endo;
  exports["runEndo"] = runEndo;
  exports["invariantEndo"] = invariantEndo;
  exports["semigroupEndo"] = semigroupEndo;
  exports["monoidEndo"] = monoidEndo;;
 
})(PS["Data.Monoid.Endo"] = PS["Data.Monoid.Endo"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Multiplicative = function (x) {
      return x;
  };
  var showMultiplicative = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "Multiplicative (" + (Prelude.show(dictShow)(v) + ")");
      });
  };
  var semigroupMultiplicative = function (dictSemiring) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              return Prelude["*"](dictSemiring)(v)(v1);
          };
      });
  };
  var runMultiplicative = function (v) {
      return v;
  };
  var monoidMultiplicative = function (dictSemiring) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMultiplicative(dictSemiring);
      }, Prelude.one(dictSemiring));
  };
  var invariantMultiplicative = new Data_Functor_Invariant.Invariant(function (f) {
      return function (v) {
          return function (v1) {
              return f(v1);
          };
      };
  });
  var functorMultiplicative = new Prelude.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var extendMultiplicative = new Control_Extend.Extend(function () {
      return functorMultiplicative;
  }, function (f) {
      return function (x) {
          return f(x);
      };
  });
  var eqMultiplicative = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              return Prelude["=="](dictEq)(v)(v1);
          };
      });
  };
  var ordMultiplicative = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqMultiplicative(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.compare(dictOrd)(v)(v1);
          };
      });
  };
  var comonadMultiplicative = new Control_Comonad.Comonad(function () {
      return extendMultiplicative;
  }, runMultiplicative);
  var applyMultiplicative = new Prelude.Apply(function () {
      return functorMultiplicative;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindMultiplicative = new Prelude.Bind(function () {
      return applyMultiplicative;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeMultiplicative = new Prelude.Applicative(function () {
      return applyMultiplicative;
  }, Multiplicative);
  var monadMultiplicative = new Prelude.Monad(function () {
      return applicativeMultiplicative;
  }, function () {
      return bindMultiplicative;
  });
  exports["Multiplicative"] = Multiplicative;
  exports["runMultiplicative"] = runMultiplicative;
  exports["eqMultiplicative"] = eqMultiplicative;
  exports["ordMultiplicative"] = ordMultiplicative;
  exports["functorMultiplicative"] = functorMultiplicative;
  exports["applyMultiplicative"] = applyMultiplicative;
  exports["applicativeMultiplicative"] = applicativeMultiplicative;
  exports["bindMultiplicative"] = bindMultiplicative;
  exports["monadMultiplicative"] = monadMultiplicative;
  exports["extendMultiplicative"] = extendMultiplicative;
  exports["comonadMultiplicative"] = comonadMultiplicative;
  exports["invariantMultiplicative"] = invariantMultiplicative;
  exports["showMultiplicative"] = showMultiplicative;
  exports["semigroupMultiplicative"] = semigroupMultiplicative;
  exports["monoidMultiplicative"] = monoidMultiplicative;;
 
})(PS["Data.Monoid.Multiplicative"] = PS["Data.Monoid.Multiplicative"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($161) {
                  return Control_Apply["*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(f($161));
              })(Prelude.pure(dictApplicative)(Prelude.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Prelude.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Prelude.id(Prelude.categoryFn));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false, 
                                  acc: x
                              };
                          };
                          return {
                              init: false, 
                              acc: Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(v.acc)(Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true, 
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  };
  var maximumBy = function (dictFoldable) {
      return function (cmp) {
          var max$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $87 = cmp(v.value0)(v1);
                          if ($87 instanceof Prelude.GT) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 246, column 3 - line 247, column 3: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
      };
  };
  var maximum = function (dictOrd) {
      return function (dictFoldable) {
          return maximumBy(dictFoldable)(Prelude.compare(dictOrd));
      };
  };
  var mconcat = function (dictFoldable) {
      return function (dictMonoid) {
          return foldl(dictFoldable)(Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]()))(Data_Monoid.mempty(dictMonoid));
      };
  };
  var minimumBy = function (dictFoldable) {
      return function (cmp) {
          var min$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $91 = cmp(v.value0)(v1);
                          if ($91 instanceof Prelude.LT) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 261, column 3 - line 262, column 3: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
      };
  };
  var minimum = function (dictOrd) {
      return function (dictFoldable) {
          return minimumBy(dictFoldable)(Prelude.compare(dictOrd));
      };
  };
  var product = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Prelude["*"](dictSemiring))(Prelude.one(dictSemiring));
      };
  };
  var sum = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Prelude["+"](dictSemiring))(Prelude.zero(dictSemiring));
      };
  };
  var foldableMultiplicative = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 103, column 1 - line 111, column 1: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 103, column 1 - line 111, column 1: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable line 103, column 1 - line 111, column 1: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldableDual = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableDisj = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableConj = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldableAdditive = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMapDefaultL = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldl(dictFoldable)(function (acc) {
                      return function (x) {
                          return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var foldableFirst = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return foldMap(foldableMaybe)(dictMonoid)(f)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldl(foldableMaybe)(f)(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldr(foldableMaybe)(f)(z)(v);
          };
      };
  });
  var foldableLast = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return foldMap(foldableMaybe)(dictMonoid)(f)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldl(foldableMaybe)(f)(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return foldr(foldableMaybe)(f)(z)(v);
          };
      };
  });
  var foldlDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Monoid_Endo.runEndo(Data_Monoid_Dual.runDual(foldMap(dictFoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo))(function ($162) {
                      return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Prelude.flip(c)($162)));
                  })(xs)))(u);
              };
          };
      };
  };
  var foldrDefault = function (dictFoldable) {
      return function (c) {
          return function (u) {
              return function (xs) {
                  return Data_Monoid_Endo.runEndo(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo)(function ($163) {
                      return Data_Monoid_Endo.Endo(c($163));
                  })(xs))(u);
              };
          };
      };
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Prelude.id(Prelude.categoryFn));
      };
  };
  var find = function (dictFoldable) {
      return function (p) {
          return foldl(dictFoldable)(function (r) {
              return function (x) {
                  var $160 = p(x);
                  if ($160) {
                      return new Data_Maybe.Just(x);
                  };
                  if (!$160) {
                      return r;
                  };
                  throw new Error("Failed pattern match at Data.Foldable line 233, column 1 - line 234, column 1: " + [ $160.constructor.name ]);
              };
          })(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function ($164) {
                  return Data_Monoid_Disj.runDisj(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra))(function ($165) {
                      return Data_Monoid_Disj.Disj(p($165));
                  })($164));
              };
          };
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          return function ($166) {
              return any(dictFoldable)(Prelude.booleanAlgebraBoolean)(Prelude["=="](dictEq)($166));
          };
      };
  };
  var notElem = function (dictFoldable) {
      return function (dictEq) {
          return function (x) {
              return function ($167) {
                  return !elem(dictFoldable)(dictEq)(x)($167);
              };
          };
      };
  };
  var or = function (dictFoldable) {
      return function (dictBooleanAlgebra) {
          return any(dictFoldable)(dictBooleanAlgebra)(Prelude.id(Prelude.categoryFn));
      };
  };
  var all = function (dictFoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function ($168) {
                  return Data_Monoid_Conj.runConj(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra))(function ($169) {
                      return Data_Monoid_Conj.Conj(p($169));
                  })($168));
              };
          };
      };
  };
  var and = function (dictFoldable) {
      return function (dictBooleanAlgebra) {
          return all(dictFoldable)(dictBooleanAlgebra)(Prelude.id(Prelude.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["minimumBy"] = minimumBy;
  exports["minimum"] = minimum;
  exports["maximumBy"] = maximumBy;
  exports["maximum"] = maximum;
  exports["find"] = find;
  exports["notElem"] = notElem;
  exports["elem"] = elem;
  exports["product"] = product;
  exports["sum"] = sum;
  exports["all"] = all;
  exports["any"] = any;
  exports["or"] = or;
  exports["and"] = and;
  exports["intercalate"] = intercalate;
  exports["mconcat"] = mconcat;
  exports["sequence_"] = sequence_;
  exports["for_"] = for_;
  exports["traverse_"] = traverse_;
  exports["fold"] = fold;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldMapDefaultL"] = foldMapDefaultL;
  exports["foldlDefault"] = foldlDefault;
  exports["foldrDefault"] = foldrDefault;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
  exports["foldableFirst"] = foldableFirst;
  exports["foldableLast"] = foldableLast;
  exports["foldableAdditive"] = foldableAdditive;
  exports["foldableDual"] = foldableDual;
  exports["foldableDisj"] = foldableDisj;
  exports["foldableConj"] = foldableConj;
  exports["foldableMultiplicative"] = foldableMultiplicative;;
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Traversable

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont (fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList (x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray (list) {
      var arr = [];
      while (list !== emptyList) {
        arr.push(list.head);
        list = list.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
 
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var StateL = function (x) {
      return x;
  };
  var StateR = function (x) {
      return x;
  };
  var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
      this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  };
  var traversableMultiplicative = new Traversable(function () {
      return Data_Foldable.foldableMultiplicative;
  }, function () {
      return Data_Monoid_Multiplicative.functorMultiplicative;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Multiplicative.Multiplicative)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
          };
      };
  });
  var traversableMaybe = new Traversable(function () {
      return Data_Foldable.foldableMaybe;
  }, function () {
      return Data_Maybe.functorMaybe;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Prelude.pure(dictApplicative)(Data_Maybe.Nothing.value);
          };
          if (v instanceof Data_Maybe.Just) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Traversable line 76, column 1 - line 82, column 1: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Prelude.pure(dictApplicative)(Data_Maybe.Nothing.value);
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(v(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Traversable line 76, column 1 - line 82, column 1: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var traversableDual = new Traversable(function () {
      return Data_Foldable.foldableDual;
  }, function () {
      return Data_Monoid_Dual.functorDual;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Dual.Dual)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Dual.Dual)(f(v));
          };
      };
  });
  var traversableDisj = new Traversable(function () {
      return Data_Foldable.foldableDisj;
  }, function () {
      return Data_Monoid_Disj.functorDisj;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Disj.Disj)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Disj.Disj)(f(v));
          };
      };
  });
  var traversableConj = new Traversable(function () {
      return Data_Foldable.foldableConj;
  }, function () {
      return Data_Monoid_Conj.functorConj;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Conj.Conj)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Conj.Conj)(f(v));
          };
      };
  });
  var traversableAdditive = new Traversable(function () {
      return Data_Foldable.foldableAdditive;
  }, function () {
      return Data_Monoid_Additive.functorAdditive;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Additive.Additive)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Monoid_Additive.Additive)(f(v));
          };
      };
  });
  var stateR = function (v) {
      return v;
  };
  var stateL = function (v) {
      return v;
  };
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return function (tma) {
              return traverse(dictTraversable)(dictApplicative)(Prelude.id(Prelude.categoryFn))(tma);
          };
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Prelude.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Prelude.apply(dictApplicative["__superclass_Prelude.Apply_0"]()))(Prelude.map((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]()))(Prelude.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  var traversableFirst = new Traversable(function () {
      return Data_Foldable.foldableFirst;
  }, function () {
      return Data_Maybe_First.functorFirst;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe_First.First)(sequence(traversableMaybe)(dictApplicative)(v));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe_First.First)(traverse(traversableMaybe)(dictApplicative)(f)(v));
          };
      };
  });
  var traversableLast = new Traversable(function () {
      return Data_Foldable.foldableLast;
  }, function () {
      return Data_Maybe_Last.functorLast;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe_Last.Last)(sequence(traversableMaybe)(dictApplicative)(v));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe_Last.Last)(traverse(traversableMaybe)(dictApplicative)(f)(v));
          };
      };
  });
  var traverseDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return function (f) {
              return function (ta) {
                  return sequence(dictTraversable)(dictApplicative)(Prelude.map(dictTraversable["__superclass_Prelude.Functor_0"]())(f)(ta));
              };
          };
      };
  };
  var functorStateR = new Prelude.Functor(function (f) {
      return function (k) {
          return function (s) {
              var $75 = stateR(k)(s);
              return {
                  accum: $75.accum, 
                  value: f($75.value)
              };
          };
      };
  });
  var functorStateL = new Prelude.Functor(function (f) {
      return function (k) {
          return function (s) {
              var $78 = stateL(k)(s);
              return {
                  accum: $78.accum, 
                  value: f($78.value)
              };
          };
      };
  });
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  var applyStateR = new Prelude.Apply(function () {
      return functorStateR;
  }, function (f) {
      return function (x) {
          return function (s) {
              var $81 = stateR(x)(s);
              var $82 = stateR(f)($81.accum);
              return {
                  accum: $82.accum, 
                  value: $82.value($81.value)
              };
          };
      };
  });
  var applyStateL = new Prelude.Apply(function () {
      return functorStateL;
  }, function (f) {
      return function (x) {
          return function (s) {
              var $87 = stateL(f)(s);
              var $88 = stateL(x)($87.accum);
              return {
                  accum: $88.accum, 
                  value: $87.value($88.value)
              };
          };
      };
  });
  var applicativeStateR = new Prelude.Applicative(function () {
      return applyStateR;
  }, function (a) {
      return function (s) {
          return {
              accum: s, 
              value: a
          };
      };
  });
  var mapAccumR = function (dictTraversable) {
      return function (f) {
          return function (s0) {
              return function (xs) {
                  return stateR(traverse(dictTraversable)(applicativeStateR)(function (a) {
                      return function (s) {
                          return f(s)(a);
                      };
                  })(xs))(s0);
              };
          };
      };
  };
  var scanr = function (dictTraversable) {
      return function (f) {
          return function (b0) {
              return function (xs) {
                  return (mapAccumR(dictTraversable)(function (b) {
                      return function (a) {
                          var b$prime = f(a)(b);
                          return {
                              accum: b$prime, 
                              value: b$prime
                          };
                      };
                  })(b0)(xs)).value;
              };
          };
      };
  };
  var applicativeStateL = new Prelude.Applicative(function () {
      return applyStateL;
  }, function (a) {
      return function (s) {
          return {
              accum: s, 
              value: a
          };
      };
  });
  var mapAccumL = function (dictTraversable) {
      return function (f) {
          return function (s0) {
              return function (xs) {
                  return stateL(traverse(dictTraversable)(applicativeStateL)(function (a) {
                      return function (s) {
                          return f(s)(a);
                      };
                  })(xs))(s0);
              };
          };
      };
  };
  var scanl = function (dictTraversable) {
      return function (f) {
          return function (b0) {
              return function (xs) {
                  return (mapAccumL(dictTraversable)(function (b) {
                      return function (a) {
                          var b$prime = f(b)(a);
                          return {
                              accum: b$prime, 
                              value: b$prime
                          };
                      };
                  })(b0)(xs)).value;
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["mapAccumR"] = mapAccumR;
  exports["mapAccumL"] = mapAccumL;
  exports["scanr"] = scanr;
  exports["scanl"] = scanl;
  exports["for"] = $$for;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traverseDefault"] = traverseDefault;
  exports["sequence"] = sequence;
  exports["traverse"] = traverse;
  exports["traversableArray"] = traversableArray;
  exports["traversableMaybe"] = traversableMaybe;
  exports["traversableFirst"] = traversableFirst;
  exports["traversableLast"] = traversableLast;
  exports["traversableAdditive"] = traversableAdditive;
  exports["traversableDual"] = traversableDual;
  exports["traversableConj"] = traversableConj;
  exports["traversableDisj"] = traversableDisj;
  exports["traversableMultiplicative"] = traversableMultiplicative;;
 
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Prelude.id(Prelude.categoryFn));
      };
  };
  var rmap = function (dictBifunctor) {
      return bimap(dictBifunctor)(Prelude.id(Prelude.categoryFn));
  };
  exports["Bifunctor"] = Bifunctor;
  exports["rmap"] = rmap;
  exports["lmap"] = lmap;
  exports["bimap"] = bimap;;
 
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Bifunctor = PS["Data.Bifunctor"];     
  var Biapply = function (__superclass_Data$dotBifunctor$dotBifunctor_0, biapply) {
      this["__superclass_Data.Bifunctor.Bifunctor_0"] = __superclass_Data$dotBifunctor$dotBifunctor_0;
      this.biapply = biapply;
  };
  var $less$less$dollar$greater$greater = Prelude.id(Prelude.categoryFn);
  var biapply = function (dict) {
      return dict.biapply;
  };
  var $less$less$times$greater$greater = function (dictBiapply) {
      return biapply(dictBiapply);
  };
  var bilift2 = function (dictBiapply) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return function (b) {
                      return $less$less$times$greater$greater(dictBiapply)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(f)(g))(a))(b);
                  };
              };
          };
      };
  };
  var bilift3 = function (dictBiapply) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return function (b) {
                      return function (c) {
                          return $less$less$times$greater$greater(dictBiapply)($less$less$times$greater$greater(dictBiapply)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(f)(g))(a))(b))(c);
                      };
                  };
              };
          };
      };
  };
  var $times$greater$greater = function (dictBiapply) {
      return function (a) {
          return function (b) {
              return $less$less$times$greater$greater(dictBiapply)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(Prelude["const"](Prelude.id(Prelude.categoryFn))))(a))(b);
          };
      };
  };
  var $less$less$times = function (dictBiapply) {
      return function (a) {
          return function (b) {
              return $less$less$times$greater$greater(dictBiapply)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(Prelude["const"])(Prelude["const"]))(a))(b);
          };
      };
  };
  exports["Biapply"] = Biapply;
  exports["bilift3"] = bilift3;
  exports["bilift2"] = bilift2;
  exports["<<*"] = $less$less$times;
  exports["*>>"] = $times$greater$greater;
  exports["<<*>>"] = $less$less$times$greater$greater;
  exports["biapply"] = biapply;
  exports["<<$>>"] = $less$less$dollar$greater$greater;;
 
})(PS["Control.Biapply"] = PS["Control.Biapply"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapply = PS["Control.Biapply"];     
  var Biapplicative = function (__superclass_Control$dotBiapply$dotBiapply_0, bipure) {
      this["__superclass_Control.Biapply.Biapply_0"] = __superclass_Control$dotBiapply$dotBiapply_0;
      this.bipure = bipure;
  };
  var bipure = function (dict) {
      return dict.bipure;
  };
  exports["Biapplicative"] = Biapplicative;
  exports["bipure"] = bipure;;
 
})(PS["Control.Biapplicative"] = PS["Control.Biapplicative"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];     
  var Bifoldable = function (bifoldMap, bifoldl, bifoldr) {
      this.bifoldMap = bifoldMap;
      this.bifoldl = bifoldl;
      this.bifoldr = bifoldr;
  };
  var bifoldr = function (dict) {
      return dict.bifoldr;
  };
  var bitraverse_ = function (dictBifoldable) {
      return function (dictApplicative) {
          return function (f) {
              return function (g) {
                  return bifoldr(dictBifoldable)(function ($18) {
                      return Control_Apply["*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(f($18));
                  })(function ($19) {
                      return Control_Apply["*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(g($19));
                  })(Prelude.pure(dictApplicative)(Prelude.unit));
              };
          };
      };
  };
  var bifor_ = function (dictBifoldable) {
      return function (dictApplicative) {
          return function (t) {
              return function (f) {
                  return function (g) {
                      return bitraverse_(dictBifoldable)(dictApplicative)(f)(g)(t);
                  };
              };
          };
      };
  };
  var bisequence_ = function (dictBifoldable) {
      return function (dictApplicative) {
          return bitraverse_(dictBifoldable)(dictApplicative)(Prelude.id(Prelude.categoryFn))(Prelude.id(Prelude.categoryFn));
      };
  };
  var bifoldl = function (dict) {
      return dict.bifoldl;
  };
  var bifoldMapDefaultR = function (dictBifoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (g) {
                  return function (p) {
                      return bifoldr(dictBifoldable)(function ($20) {
                          return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f($20));
                      })(function ($21) {
                          return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(g($21));
                      })(Data_Monoid.mempty(dictMonoid))(p);
                  };
              };
          };
      };
  };
  var bifoldMapDefaultL = function (dictBifoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (g) {
                  return function (p) {
                      return bifoldl(dictBifoldable)(function (m) {
                          return function (a) {
                              return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(m)(f(a));
                          };
                      })(function (m) {
                          return function (b) {
                              return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(m)(g(b));
                          };
                      })(Data_Monoid.mempty(dictMonoid))(p);
                  };
              };
          };
      };
  };
  var bifoldMap = function (dict) {
      return dict.bifoldMap;
  };
  var bifoldlDefault = function (dictBifoldable) {
      return function (f) {
          return function (g) {
              return function (z) {
                  return function (p) {
                      return Data_Monoid_Endo.runEndo(Data_Monoid_Dual.runDual(bifoldMap(dictBifoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo))(function ($22) {
                          return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Prelude.flip(f)($22)));
                      })(function ($23) {
                          return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo(Prelude.flip(g)($23)));
                      })(p)))(z);
                  };
              };
          };
      };
  };
  var bifoldrDefault = function (dictBifoldable) {
      return function (f) {
          return function (g) {
              return function (z) {
                  return function (p) {
                      return Data_Monoid_Endo.runEndo(bifoldMap(dictBifoldable)(Data_Monoid_Endo.monoidEndo)(function ($24) {
                          return Data_Monoid_Endo.Endo(f($24));
                      })(function ($25) {
                          return Data_Monoid_Endo.Endo(g($25));
                      })(p))(z);
                  };
              };
          };
      };
  };
  var bifold = function (dictBifoldable) {
      return function (dictMonoid) {
          return bifoldMap(dictBifoldable)(dictMonoid)(Prelude.id(Prelude.categoryFn))(Prelude.id(Prelude.categoryFn));
      };
  };
  var biany = function (dictBifoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function (q) {
                  return function ($26) {
                      return Data_Monoid_Disj.runDisj(bifoldMap(dictBifoldable)(Data_Monoid_Disj.monoidDisj(dictBooleanAlgebra))(function ($27) {
                          return Data_Monoid_Disj.Disj(p($27));
                      })(function ($28) {
                          return Data_Monoid_Disj.Disj(q($28));
                      })($26));
                  };
              };
          };
      };
  };
  var biall = function (dictBifoldable) {
      return function (dictBooleanAlgebra) {
          return function (p) {
              return function (q) {
                  return function ($29) {
                      return Data_Monoid_Conj.runConj(bifoldMap(dictBifoldable)(Data_Monoid_Conj.monoidConj(dictBooleanAlgebra))(function ($30) {
                          return Data_Monoid_Conj.Conj(p($30));
                      })(function ($31) {
                          return Data_Monoid_Conj.Conj(q($31));
                      })($29));
                  };
              };
          };
      };
  };
  exports["Bifoldable"] = Bifoldable;
  exports["biall"] = biall;
  exports["biany"] = biany;
  exports["bisequence_"] = bisequence_;
  exports["bifor_"] = bifor_;
  exports["bitraverse_"] = bitraverse_;
  exports["bifold"] = bifold;
  exports["bifoldMapDefaultL"] = bifoldMapDefaultL;
  exports["bifoldMapDefaultR"] = bifoldMapDefaultR;
  exports["bifoldlDefault"] = bifoldlDefault;
  exports["bifoldrDefault"] = bifoldrDefault;
  exports["bifoldMap"] = bifoldMap;
  exports["bifoldl"] = bifoldl;
  exports["bifoldr"] = bifoldr;;
 
})(PS["Data.Bifoldable"] = PS["Data.Bifoldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];     
  var Bitraversable = function (__superclass_Data$dotBifoldable$dotBifoldable_1, __superclass_Data$dotBifunctor$dotBifunctor_0, bisequence, bitraverse) {
      this["__superclass_Data.Bifoldable.Bifoldable_1"] = __superclass_Data$dotBifoldable$dotBifoldable_1;
      this["__superclass_Data.Bifunctor.Bifunctor_0"] = __superclass_Data$dotBifunctor$dotBifunctor_0;
      this.bisequence = bisequence;
      this.bitraverse = bitraverse;
  };
  var bitraverse = function (dict) {
      return dict.bitraverse;
  };
  var bisequenceDefault = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (t) {
              return bitraverse(dictBitraversable)(dictApplicative)(Prelude.id(Prelude.categoryFn))(Prelude.id(Prelude.categoryFn))(t);
          };
      };
  };
  var bisequence = function (dict) {
      return dict.bisequence;
  };
  var bitraverseDefault = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (f) {
              return function (g) {
                  return function (t) {
                      return bisequence(dictBitraversable)(dictApplicative)(Data_Bifunctor.bimap(dictBitraversable["__superclass_Data.Bifunctor.Bifunctor_0"]())(f)(g)(t));
                  };
              };
          };
      };
  };
  var bifor = function (dictBitraversable) {
      return function (dictApplicative) {
          return function (t) {
              return function (f) {
                  return function (g) {
                      return bitraverse(dictBitraversable)(dictApplicative)(f)(g)(t);
                  };
              };
          };
      };
  };
  exports["Bitraversable"] = Bitraversable;
  exports["bifor"] = bifor;
  exports["bisequenceDefault"] = bisequenceDefault;
  exports["bitraverseDefault"] = bitraverseDefault;
  exports["bisequence"] = bisequence;
  exports["bitraverse"] = bitraverse;;
 
})(PS["Data.Bitraversable"] = PS["Data.Bitraversable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var swap = function (v) {
      return new Tuple(v.value1, v.value0);
  };
  var snd = function (v) {
      return v.value1;
  };
  var showTuple = function (dictShow) {
      return function (dictShow1) {
          return new Prelude.Show(function (v) {
              return "Tuple (" + (Prelude.show(dictShow)(v.value0) + (") (" + (Prelude.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var semiringTuple = function (dictSemiring) {
      return function (dictSemiring1) {
          return new Prelude.Semiring(function (v) {
              return function (v1) {
                  return new Tuple(Prelude.add(dictSemiring)(v.value0)(v1.value0), Prelude.add(dictSemiring1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return new Tuple(Prelude.mul(dictSemiring)(v.value0)(v1.value0), Prelude.mul(dictSemiring1)(v.value1)(v1.value1));
              };
          }, new Tuple(Prelude.one(dictSemiring), Prelude.one(dictSemiring1)), new Tuple(Prelude.zero(dictSemiring), Prelude.zero(dictSemiring1)));
      };
  };
  var semigroupoidTuple = new Prelude.Semigroupoid(function (v) {
      return function (v1) {
          return new Tuple(v1.value0, v.value1);
      };
  });
  var semigroupTuple = function (dictSemigroup) {
      return function (dictSemigroup1) {
          return new Prelude.Semigroup(function (v) {
              return function (v1) {
                  return new Tuple(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0), Prelude["<>"](dictSemigroup1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var ringTuple = function (dictRing) {
      return function (dictRing1) {
          return new Prelude.Ring(function () {
              return semiringTuple(dictRing["__superclass_Prelude.Semiring_0"]())(dictRing1["__superclass_Prelude.Semiring_0"]());
          }, function (v) {
              return function (v1) {
                  return new Tuple(Prelude.sub(dictRing)(v.value0)(v1.value0), Prelude.sub(dictRing1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var monoidTuple = function (dictMonoid) {
      return function (dictMonoid1) {
          return new Data_Monoid.Monoid(function () {
              return semigroupTuple(dictMonoid["__superclass_Prelude.Semigroup_0"]())(dictMonoid1["__superclass_Prelude.Semigroup_0"]());
          }, new Tuple(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid1)));
      };
  };
  var moduloSemiringTuple = function (dictModuloSemiring) {
      return function (dictModuloSemiring1) {
          return new Prelude.ModuloSemiring(function () {
              return semiringTuple(dictModuloSemiring["__superclass_Prelude.Semiring_0"]())(dictModuloSemiring1["__superclass_Prelude.Semiring_0"]());
          }, function (v) {
              return function (v1) {
                  return new Tuple(Prelude.div(dictModuloSemiring)(v.value0)(v1.value0), Prelude.div(dictModuloSemiring1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return new Tuple(Prelude.mod(dictModuloSemiring)(v.value0)(v1.value0), Prelude.mod(dictModuloSemiring1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var lookup = function (dictFoldable) {
      return function (dictEq) {
          return function (a) {
              return function (f) {
                  return Data_Maybe_First.runFirst(Data_Foldable.foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function (v) {
                      var $145 = Prelude["=="](dictEq)(a)(v.value0);
                      if ($145) {
                          return new Data_Maybe.Just(v.value1);
                      };
                      if (!$145) {
                          return Data_Maybe.Nothing.value;
                      };
                      throw new Error("Failed pattern match at Data.Tuple line 173, column 1 - line 174, column 1: " + [ $145.constructor.name ]);
                  })(f));
              };
          };
      };
  };
  var functorTuple = new Prelude.Functor(function (f) {
      return function (v) {
          return new Tuple(v.value0, f(v.value1));
      };
  });
  var invariantTuple = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorTuple));
  var fst = function (v) {
      return v.value0;
  };
  var lazyTuple = function (dictLazy) {
      return function (dictLazy1) {
          return new Control_Lazy.Lazy(function (f) {
              return new Tuple(Control_Lazy.defer(dictLazy)(function (v) {
                  return fst(f(Prelude.unit));
              }), Control_Lazy.defer(dictLazy1)(function (v) {
                  return snd(f(Prelude.unit));
              }));
          });
      };
  };
  var foldableTuple = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v.value1);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v.value1);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v.value1)(z);
          };
      };
  });
  var traversableTuple = new Data_Traversable.Traversable(function () {
      return foldableTuple;
  }, function () {
      return functorTuple;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Tuple.create(v.value0))(v.value1);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Tuple.create(v.value0))(f(v.value1));
          };
      };
  });
  var extendTuple = new Control_Extend.Extend(function () {
      return functorTuple;
  }, function (f) {
      return function (v) {
          return new Tuple(v.value0, f(v));
      };
  });
  var eqTuple = function (dictEq) {
      return function (dictEq1) {
          return new Prelude.Eq(function (v) {
              return function (v1) {
                  return Prelude["=="](dictEq)(v.value0)(v1.value0) && Prelude["=="](dictEq1)(v.value1)(v1.value1);
              };
          });
      };
  };
  var ordTuple = function (dictOrd) {
      return function (dictOrd1) {
          return new Prelude.Ord(function () {
              return eqTuple(dictOrd["__superclass_Prelude.Eq_0"]())(dictOrd1["__superclass_Prelude.Eq_0"]());
          }, function (v) {
              return function (v1) {
                  var $190 = Prelude.compare(dictOrd)(v.value0)(v1.value0);
                  if ($190 instanceof Prelude.EQ) {
                      return Prelude.compare(dictOrd1)(v.value1)(v1.value1);
                  };
                  return $190;
              };
          });
      };
  };
  var divisionRingTuple = function (dictDivisionRing) {
      return function (dictDivisionRing1) {
          return new Prelude.DivisionRing(function () {
              return moduloSemiringTuple(dictDivisionRing["__superclass_Prelude.ModuloSemiring_1"]())(dictDivisionRing1["__superclass_Prelude.ModuloSemiring_1"]());
          }, function () {
              return ringTuple(dictDivisionRing["__superclass_Prelude.Ring_0"]())(dictDivisionRing1["__superclass_Prelude.Ring_0"]());
          });
      };
  };
  var numTuple = function (dictNum) {
      return function (dictNum1) {
          return new Prelude.Num(function () {
              return divisionRingTuple(dictNum["__superclass_Prelude.DivisionRing_0"]())(dictNum1["__superclass_Prelude.DivisionRing_0"]());
          });
      };
  };
  var curry = function (f) {
      return function (a) {
          return function (b) {
              return f(new Tuple(a, b));
          };
      };
  };
  var comonadTuple = new Control_Comonad.Comonad(function () {
      return extendTuple;
  }, snd);
  var boundedTuple = function (dictBounded) {
      return function (dictBounded1) {
          return new Prelude.Bounded(new Tuple(Prelude.bottom(dictBounded), Prelude.bottom(dictBounded1)), new Tuple(Prelude.top(dictBounded), Prelude.top(dictBounded1)));
      };
  };
  var boundedOrdTuple = function (dictBoundedOrd) {
      return function (dictBoundedOrd1) {
          return new Prelude.BoundedOrd(function () {
              return boundedTuple(dictBoundedOrd["__superclass_Prelude.Bounded_0"]())(dictBoundedOrd1["__superclass_Prelude.Bounded_0"]());
          }, function () {
              return ordTuple(dictBoundedOrd["__superclass_Prelude.Ord_1"]())(dictBoundedOrd1["__superclass_Prelude.Ord_1"]());
          });
      };
  };
  var booleanAlgebraTuple = function (dictBooleanAlgebra) {
      return function (dictBooleanAlgebra1) {
          return new Prelude.BooleanAlgebra(function () {
              return boundedTuple(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]())(dictBooleanAlgebra1["__superclass_Prelude.Bounded_0"]());
          }, function (v) {
              return function (v1) {
                  return new Tuple(Prelude.conj(dictBooleanAlgebra)(v.value0)(v1.value0), Prelude.conj(dictBooleanAlgebra1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return function (v1) {
                  return new Tuple(Prelude.disj(dictBooleanAlgebra)(v.value0)(v1.value0), Prelude.disj(dictBooleanAlgebra1)(v.value1)(v1.value1));
              };
          }, function (v) {
              return new Tuple(Prelude.not(dictBooleanAlgebra)(v.value0), Prelude.not(dictBooleanAlgebra1)(v.value1));
          });
      };
  };
  var bifunctorTuple = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return new Tuple(f(v.value0), g(v.value1));
          };
      };
  });
  var bifoldableTuple = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
      return function (f) {
          return function (g) {
              return function (v) {
                  return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(v.value0))(g(v.value1));
              };
          };
      };
  }, function (f) {
      return function (g) {
          return function (z) {
              return function (v) {
                  return g(f(z)(v.value0))(v.value1);
              };
          };
      };
  }, function (f) {
      return function (g) {
          return function (z) {
              return function (v) {
                  return f(v.value0)(g(v.value1)(z));
              };
          };
      };
  });
  var bitraversableTuple = new Data_Bitraversable.Bitraversable(function () {
      return bifoldableTuple;
  }, function () {
      return bifunctorTuple;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Tuple.create)(v.value0))(v.value1);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (g) {
              return function (v) {
                  return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Tuple.create)(f(v.value0)))(g(v.value1));
              };
          };
      };
  });
  var biapplyTuple = new Control_Biapply.Biapply(function () {
      return bifunctorTuple;
  }, function (v) {
      return function (v1) {
          return new Tuple(v.value0(v1.value0), v.value1(v1.value1));
      };
  });
  var biapplicativeTuple = new Control_Biapplicative.Biapplicative(function () {
      return biapplyTuple;
  }, Tuple.create);
  var applyTuple = function (dictSemigroup) {
      return new Prelude.Apply(function () {
          return functorTuple;
      }, function (v) {
          return function (v1) {
              return new Tuple(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0), v.value1(v1.value1));
          };
      });
  };
  var bindTuple = function (dictSemigroup) {
      return new Prelude.Bind(function () {
          return applyTuple(dictSemigroup);
      }, function (v) {
          return function (f) {
              var $254 = f(v.value1);
              return new Tuple(Prelude["<>"](dictSemigroup)(v.value0)($254.value0), $254.value1);
          };
      });
  };
  var applicativeTuple = function (dictMonoid) {
      return new Prelude.Applicative(function () {
          return applyTuple(dictMonoid["__superclass_Prelude.Semigroup_0"]());
      }, Tuple.create(Data_Monoid.mempty(dictMonoid)));
  };
  var monadTuple = function (dictMonoid) {
      return new Prelude.Monad(function () {
          return applicativeTuple(dictMonoid);
      }, function () {
          return bindTuple(dictMonoid["__superclass_Prelude.Semigroup_0"]());
      });
  };
  exports["Tuple"] = Tuple;
  exports["lookup"] = lookup;
  exports["swap"] = swap;
  exports["uncurry"] = uncurry;
  exports["curry"] = curry;
  exports["snd"] = snd;
  exports["fst"] = fst;
  exports["showTuple"] = showTuple;
  exports["eqTuple"] = eqTuple;
  exports["ordTuple"] = ordTuple;
  exports["boundedTuple"] = boundedTuple;
  exports["boundedOrdTuple"] = boundedOrdTuple;
  exports["semigroupoidTuple"] = semigroupoidTuple;
  exports["semigroupTuple"] = semigroupTuple;
  exports["monoidTuple"] = monoidTuple;
  exports["semiringTuple"] = semiringTuple;
  exports["moduloSemiringTuple"] = moduloSemiringTuple;
  exports["ringTuple"] = ringTuple;
  exports["divisionRingTuple"] = divisionRingTuple;
  exports["numTuple"] = numTuple;
  exports["booleanAlgebraTuple"] = booleanAlgebraTuple;
  exports["functorTuple"] = functorTuple;
  exports["invariantTuple"] = invariantTuple;
  exports["bifunctorTuple"] = bifunctorTuple;
  exports["applyTuple"] = applyTuple;
  exports["biapplyTuple"] = biapplyTuple;
  exports["applicativeTuple"] = applicativeTuple;
  exports["biapplicativeTuple"] = biapplicativeTuple;
  exports["bindTuple"] = bindTuple;
  exports["monadTuple"] = monadTuple;
  exports["extendTuple"] = extendTuple;
  exports["comonadTuple"] = comonadTuple;
  exports["lazyTuple"] = lazyTuple;
  exports["foldableTuple"] = foldableTuple;
  exports["bifoldableTuple"] = bifoldableTuple;
  exports["traversableTuple"] = traversableTuple;
  exports["bitraversableTuple"] = bitraversableTuple;;
 
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array.ST

  exports.runSTArray = function (f) {
    return f;
  };

  exports.emptySTArray = function () {
    return [];
  };

  exports.peekSTArrayImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return function () {
            return i >= 0 && i < xs.length ? just(xs[i]) : nothing;
          };
        };
      };
    };
  };

  exports.pokeSTArray = function (xs) {
    return function (i) {
      return function (a) {
        return function () {
          var ret = i >= 0 && i < xs.length;
          if (ret) xs[i] = a;
          return ret;
        };
      };
    };
  };

  exports.pushAllSTArray = function (xs) {
    return function (as) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.spliceSTArray = function (xs) {
    return function (i) {
      return function (howMany) {
        return function (bs) {
          return function () {
            return xs.splice.apply(xs, [i, howMany].concat(bs));
          };
        };
      };
    };
  };

  exports.copyImpl = function (xs) {
    return function () {
      return xs.slice();
    };
  };

  exports.toAssocArray = function (xs) {
    return function () {
      var n = xs.length;
      var as = new Array(n);
      for (var i = 0; i < n; i++) as[i] = { value: xs[i], index: i };
      return as;
    };
  };
 
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };

  exports.untilE = function (f) {
    return function () {
      while (!f());
      return {};
    };
  };

  exports.whileE = function (f) {
    return function (a) {
      return function () {
        while (f()) {
          a();
        }
        return {};
      };
    };
  };

  exports.forE = function (lo) {
    return function (hi) {
      return function (f) {
        return function () {
          for (var i = lo; i < hi; i++) {
            f(i)();
          }
        };
      };
    };
  };

  exports.foreachE = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["foreachE"] = $foreign.foreachE;
  exports["forE"] = $foreign.forE;
  exports["whileE"] = $foreign.whileE;
  exports["untilE"] = $foreign.untilE;
  exports["runPure"] = $foreign.runPure;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.ST

  exports.newSTRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readSTRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifySTRef = function (ref) {
    return function (f) {
      return function () {
        /* jshint boss: true */
        return ref.value = f(ref.value);
      };
    };
  };

  exports.writeSTRef = function (ref) {
    return function (a) {
      return function () {
        /* jshint boss: true */
        return ref.value = a;
      };
    };
  };

  exports.runST = function (f) {
    return f;
  };
 
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.ST"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var pureST = function (st) {
      return Control_Monad_Eff.runPure($foreign.runST(st));
  };
  exports["pureST"] = pureST;
  exports["runST"] = $foreign.runST;
  exports["writeSTRef"] = $foreign.writeSTRef;
  exports["modifySTRef"] = $foreign.modifySTRef;
  exports["readSTRef"] = $foreign.readSTRef;
  exports["newSTRef"] = $foreign.newSTRef;;
 
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Array.ST"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];     
  var thaw = $foreign.copyImpl;
  var pushSTArray = function (arr) {
      return function (a) {
          return $foreign.pushAllSTArray(arr)([ a ]);
      };
  };
  var peekSTArray = $foreign.peekSTArrayImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var freeze = $foreign.copyImpl;
  exports["thaw"] = thaw;
  exports["freeze"] = freeze;
  exports["pushSTArray"] = pushSTArray;
  exports["peekSTArray"] = peekSTArray;
  exports["toAssocArray"] = $foreign.toAssocArray;
  exports["spliceSTArray"] = $foreign.spliceSTArray;
  exports["pushAllSTArray"] = $foreign.pushAllSTArray;
  exports["pokeSTArray"] = $foreign.pokeSTArray;
  exports["emptySTArray"] = $foreign.emptySTArray;
  exports["runSTArray"] = $foreign.runSTArray;;
 
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];     
  var Unfoldable = function (unfoldr) {
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function (f) {
      return function (b) {
          return Control_Monad_Eff.runPure(Data_Array_ST.runSTArray(function __do() {
              var v = Data_Array_ST.emptySTArray();
              var v1 = Control_Monad_ST.newSTRef(b)();
              (function () {
                  while (!(function __do() {
                      var v2 = Control_Monad_ST.readSTRef(v1)();
                      var $12 = f(v2);
                      if ($12 instanceof Data_Maybe.Nothing) {
                          return true;
                      };
                      if ($12 instanceof Data_Maybe.Just) {
                          Data_Array_ST.pushSTArray(v)($12.value0.value0)();
                          Control_Monad_ST.writeSTRef(v1)($12.value0.value1)();
                          return false;
                      };
                      throw new Error("Failed pattern match at Data.Unfoldable line 29, column 1 - line 49, column 1: " + [ $12.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return v;
          }));
      };
  });
  var replicate = function (dictUnfoldable) {
      return function (n) {
          return function (v) {
              var step = function (i) {
                  var $16 = i <= 0;
                  if ($16) {
                      return Data_Maybe.Nothing.value;
                  };
                  if (!$16) {
                      return new Data_Maybe.Just(new Data_Tuple.Tuple(v, i - 1));
                  };
                  throw new Error("Failed pattern match at Data.Unfoldable line 52, column 5 - line 53, column 5: " + [ $16.constructor.name ]);
              };
              return unfoldr(dictUnfoldable)(step)(n);
          };
      };
  };
  var replicateA = function (dictApplicative) {
      return function (dictUnfoldable) {
          return function (dictTraversable) {
              return function (n) {
                  return function (m) {
                      return Data_Traversable.sequence(dictTraversable)(dictApplicative)(replicate(dictUnfoldable)(n)(m));
                  };
              };
          };
      };
  };
  var singleton = function (dictUnfoldable) {
      return replicate(dictUnfoldable)(1);
  };
  var none = function (dictUnfoldable) {
      return unfoldr(dictUnfoldable)(Prelude["const"](Data_Maybe.Nothing.value))(Prelude.unit);
  };
  exports["Unfoldable"] = Unfoldable;
  exports["singleton"] = singleton;
  exports["none"] = none;
  exports["replicateA"] = replicateA;
  exports["replicate"] = replicate;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;;
 
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var $colon = Cons.create;
  var updateAt = function (v) {
      return function (v1) {
          return function (v2) {
              if (v === 0 && v2 instanceof Cons) {
                  return new Data_Maybe.Just(new Cons(v1, v2.value1));
              };
              if (v2 instanceof Cons) {
                  return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(v2.value0))(updateAt(v - 1)(v1)(v2.value1));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Cons) {
          return new Data_Maybe.Just({
              head: v.value0, 
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List line 270, column 1 - line 271, column 1: " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Prelude["<$>"](Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List line 251, column 1 - line 252, column 1: " + [ v.constructor.name ]);
  };
  var span = function (v) {
      return function (v1) {
          if (v1 instanceof Cons && v(v1.value0)) {
              var $132 = span(v)(v1.value1);
              return {
                  init: new Cons(v1.value0, $132.init), 
                  rest: $132.rest
              };
          };
          return {
              init: Nil.value, 
              rest: v1
          };
      };
  };
  var singleton = function (a) {
      return new Cons(a, Nil.value);
  };
  var sortBy = function (cmp) {
      var merge = function (v) {
          return function (v1) {
              if (v instanceof Cons && v1 instanceof Cons) {
                  if (Prelude["=="](Prelude.eqOrdering)(cmp(v.value0)(v1.value0))(Prelude.GT.value)) {
                      return new Cons(v1.value0, merge(v)(v1.value1));
                  };
                  if (Prelude.otherwise) {
                      return new Cons(v.value0, merge(v.value1)(v1));
                  };
              };
              if (v instanceof Nil) {
                  return v1;
              };
              if (v1 instanceof Nil) {
                  return v;
              };
              throw new Error("Failed pattern match at Data.List line 444, column 1 - line 445, column 1: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
      var mergePairs = function (v) {
          if (v instanceof Cons && v.value1 instanceof Cons) {
              return new Cons(merge(v.value0)(v.value1.value0), mergePairs(v.value1.value1));
          };
          return v;
      };
      var mergeAll = function (__copy_v) {
          var v = __copy_v;
          tco: while (true) {
              if (v instanceof Cons && v.value1 instanceof Nil) {
                  return v.value0;
              };
              var __tco_v = mergePairs(v);
              v = __tco_v;
              continue tco;
          };
      };
      var sequences = function (v) {
          if (v instanceof Cons && v.value1 instanceof Cons) {
              if (Prelude["=="](Prelude.eqOrdering)(cmp(v.value0)(v.value1.value0))(Prelude.GT.value)) {
                  return descending(v.value1.value0)(singleton(v.value0))(v.value1.value1);
              };
              if (Prelude.otherwise) {
                  return ascending(v.value1.value0)(Cons.create(v.value0))(v.value1.value1);
              };
          };
          return singleton(v);
      };
      var descending = function (__copy_a) {
          return function (__copy_as) {
              return function (__copy_v) {
                  var a = __copy_a;
                  var as = __copy_as;
                  var v = __copy_v;
                  tco: while (true) {
                      if (v instanceof Cons && Prelude["=="](Prelude.eqOrdering)(cmp(a)(v.value0))(Prelude.GT.value)) {
                          var __tco_a = v.value0;
                          var __tco_as = new Cons(a, as);
                          var __tco_v = v.value1;
                          a = __tco_a;
                          as = __tco_as;
                          v = __tco_v;
                          continue tco;
                      };
                      return new Cons(new Cons(a, as), sequences(v));
                  };
              };
          };
      };
      var ascending = function (a) {
          return function (as) {
              return function (v) {
                  if (v instanceof Cons && Prelude["/="](Prelude.eqOrdering)(cmp(a)(v.value0))(Prelude.GT.value)) {
                      return ascending(v.value0)(function (ys) {
                          return as(new Cons(a, ys));
                      })(v.value1);
                  };
                  return new Cons(as(singleton(a)), sequences(v));
              };
          };
      };
      return function ($363) {
          return mergeAll(sequences($363));
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Prelude.compare(dictOrd))(xs);
      };
  };
  var showList = function (dictShow) {
      return new Prelude.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          if (v instanceof Cons) {
              return "Cons (" + (Prelude.show(dictShow)(v.value0) + (") (" + (Prelude.show(showList(dictShow))(v.value1) + ")")));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name ]);
      });
  };
  var semigroupList = new Prelude.Semigroup(function (v) {
      return function (ys) {
          if (v instanceof Nil) {
              return ys;
          };
          if (v instanceof Cons) {
              return new Cons(v.value0, Prelude["<>"](semigroupList)(v.value1)(ys));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, ys.constructor.name ]);
      };
  });
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return acc;
                  };
                  if (v instanceof Cons) {
                      var __tco_acc = new Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 368, column 1 - line 369, column 1: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  })();
  var snoc = function (xs) {
      return function (x) {
          return reverse(new Cons(x, reverse(xs)));
      };
  };
  var take = (function () {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              return function (__copy_v1) {
                  var acc = __copy_acc;
                  var v = __copy_v;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v === 0) {
                          return reverse(acc);
                      };
                      if (v1 instanceof Nil) {
                          return reverse(acc);
                      };
                      if (v1 instanceof Cons) {
                          var __tco_acc = new Cons(v1.value0, acc);
                          var __tco_v = v - 1;
                          var __tco_v1 = v1.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 490, column 1 - line 491, column 1: " + [ acc.constructor.name, v.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      return go(Nil.value);
  })();
  var takeWhile = function (p) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Cons && p(v.value0)) {
                      var __tco_acc = new Cons(v.value0, acc);
                      var __tco_v = v.value1;
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  return reverse(acc);
              };
          };
      };
      return go(Nil.value);
  };
  var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
      return function (b) {
          var go = function (__copy_source) {
              return function (__copy_memo) {
                  var source = __copy_source;
                  var memo = __copy_memo;
                  tco: while (true) {
                      var $186 = f(source);
                      if ($186 instanceof Data_Maybe.Nothing) {
                          return reverse(memo);
                      };
                      if ($186 instanceof Data_Maybe.Just) {
                          var __tco_memo = new Cons($186.value0.value0, memo);
                          source = $186.value0.value1;
                          memo = __tco_memo;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 748, column 1 - line 755, column 1: " + [ $186.constructor.name ]);
                  };
              };
          };
          return go(b)(Nil.value);
      };
  });
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      return function (__copy_acc) {
                          var v = __copy_v;
                          var v1 = __copy_v1;
                          var acc = __copy_acc;
                          tco: while (true) {
                              if (v instanceof Nil) {
                                  return acc;
                              };
                              if (v1 instanceof Nil) {
                                  return acc;
                              };
                              if (v instanceof Cons && v1 instanceof Cons) {
                                  var __tco_v = v.value1;
                                  var __tco_v1 = v1.value1;
                                  var __tco_acc = new Cons(f(v.value0)(v1.value0), acc);
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  acc = __tco_acc;
                                  continue tco;
                              };
                              throw new Error("Failed pattern match at Data.List line 654, column 1 - line 655, column 1: " + [ v.constructor.name, v1.constructor.name, acc.constructor.name ]);
                          };
                      };
                  };
              };
              return reverse(go(xs)(ys)(Nil.value));
          };
      };
  };
  var zip = zipWith(Data_Tuple.Tuple.create);
  var replicateM = function (dictMonad) {
      return function (n) {
          return function (m) {
              if (n < 1) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Nil.value);
              };
              if (Prelude.otherwise) {
                  return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(m)(function (v) {
                      return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(replicateM(dictMonad)(n - 1)(m))(function (v1) {
                          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Cons(v, v1));
                      });
                  });
              };
              throw new Error("Failed pattern match: " + [ n.constructor.name, m.constructor.name ]);
          };
      };
  };
  var replicate = function (n) {
      return function (value) {
          var go = function (__copy_n1) {
              return function (__copy_rest) {
                  var n1 = __copy_n1;
                  var rest = __copy_rest;
                  tco: while (true) {
                      if (n1 <= 0) {
                          return rest;
                      };
                      if (Prelude.otherwise) {
                          var __tco_n1 = n1 - 1;
                          var __tco_rest = new Cons(value, rest);
                          n1 = __tco_n1;
                          rest = __tco_rest;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 148, column 1 - line 149, column 1: " + [ n1.constructor.name, rest.constructor.name ]);
                  };
              };
          };
          return go(n)(Nil.value);
      };
  };
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Prelude.otherwise) {
              var go = function (__copy_s) {
                  return function (__copy_e) {
                      return function (__copy_step) {
                          return function (__copy_rest) {
                              var s = __copy_s;
                              var e = __copy_e;
                              var step = __copy_step;
                              var rest = __copy_rest;
                              tco: while (true) {
                                  if (s === e) {
                                      return new Cons(s, rest);
                                  };
                                  if (Prelude.otherwise) {
                                      var __tco_s = s + step | 0;
                                      var __tco_e = e;
                                      var __tco_step = step;
                                      var __tco_rest = new Cons(s, rest);
                                      s = __tco_s;
                                      e = __tco_e;
                                      step = __tco_step;
                                      rest = __tco_rest;
                                      continue tco;
                                  };
                                  throw new Error("Failed pattern match at Data.List line 140, column 1 - line 141, column 1: " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                              };
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var $209 = start > end;
                  if ($209) {
                      return 1;
                  };
                  if (!$209) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.List line 140, column 1 - line 141, column 1: " + [ $209.constructor.name ]);
              })())(Nil.value);
          };
          throw new Error("Failed pattern match at Data.List line 140, column 1 - line 141, column 1: " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var $dot$dot = range;
  var $$null = function (v) {
      if (v instanceof Nil) {
          return true;
      };
      return false;
  };
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, Nil.value);
  var mapMaybe = function (f) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return reverse(acc);
                  };
                  if (v instanceof Cons) {
                      var $213 = f(v.value0);
                      if ($213 instanceof Data_Maybe.Nothing) {
                          var __tco_acc = acc;
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      if ($213 instanceof Data_Maybe.Just) {
                          var __tco_acc = new Cons($213.value0, acc);
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 420, column 1 - line 421, column 1: " + [ $213.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.List line 420, column 1 - line 421, column 1: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Prelude["<*>"]((dictAlternative["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt["<|>"]((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(dictAlternative)(dictLazy)(v))(Prelude.pure(dictAlternative["__superclass_Prelude.Applicative_0"]())(Nil.value));
          };
      };
  };
  var last = function (__copy_v) {
      var v = __copy_v;
      tco: while (true) {
          if (v instanceof Cons && v.value1 instanceof Nil) {
              return new Data_Maybe.Just(v.value0);
          };
          if (v instanceof Cons) {
              var __tco_v = v.value1;
              v = __tco_v;
              continue tco;
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var insertBy = function (v) {
      return function (x) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return new Cons(x, Nil.value);
              };
              if (v1 instanceof Cons) {
                  var $226 = v(x)(v1.value0);
                  if ($226 instanceof Prelude.GT) {
                      return new Cons(v1.value0, insertBy(v)(x)(v1.value1));
                  };
                  return new Cons(x, v1);
              };
              throw new Error("Failed pattern match: " + [ v.constructor.name, x.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var insertAt = function (v) {
      return function (v1) {
          return function (v2) {
              if (v === 0) {
                  return new Data_Maybe.Just(new Cons(v1, v2));
              };
              if (v2 instanceof Cons) {
                  return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(v2.value0))(insertAt(v - 1)(v1)(v2.value1));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var insert = function (dictOrd) {
      return insertBy(Prelude.compare(dictOrd));
  };
  var init = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      var go = function (__copy_v1) {
          return function (__copy_acc) {
              var v1 = __copy_v1;
              var acc = __copy_acc;
              tco: while (true) {
                  if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                      return acc;
                  };
                  if (v1 instanceof Cons) {
                      var __tco_v1 = v1.value1;
                      var __tco_acc = new Cons(v1.value0, acc);
                      v1 = __tco_v1;
                      acc = __tco_acc;
                      continue tco;
                  };
                  return acc;
              };
          };
      };
      return Data_Maybe.Just.create(reverse(go(v)(Nil.value)));
  };
  var index = function (__copy_v) {
      return function (__copy_v1) {
          var v = __copy_v;
          var v1 = __copy_v1;
          tco: while (true) {
              if (v instanceof Nil) {
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Cons && v1 === 0) {
                  return new Data_Maybe.Just(v.value0);
              };
              if (v instanceof Cons) {
                  var __tco_v = v.value1;
                  var __tco_v1 = v1 - 1;
                  v = __tco_v;
                  v1 = __tco_v1;
                  continue tco;
              };
              throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var $bang$bang = index;
  var head = function (v) {
      if (v instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List line 236, column 1 - line 237, column 1: " + [ v.constructor.name ]);
  };
  var groupBy = function (v) {
      return function (v1) {
          if (v1 instanceof Nil) {
              return Nil.value;
          };
          if (v1 instanceof Cons) {
              var $252 = span(v(v1.value0))(v1.value1);
              return new Cons(new Cons(v1.value0, $252.init), groupBy(v)($252.rest));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var group = function (dictEq) {
      return groupBy(Prelude["=="](dictEq));
  };
  var group$prime = function (dictOrd) {
      return function ($364) {
          return group(dictOrd["__superclass_Prelude.Eq_0"]())(sort(dictOrd)($364));
      };
  };
  var functorList = new Prelude.Functor(function (f) {
      return function (lst) {
          var go = function (__copy_v) {
              return function (__copy_acc) {
                  var v = __copy_v;
                  var acc = __copy_acc;
                  tco: while (true) {
                      if (v instanceof Nil) {
                          return acc;
                      };
                      if (v instanceof Cons) {
                          var __tco_v = v.value1;
                          var __tco_acc = new Cons(f(v.value0), acc);
                          v = __tco_v;
                          acc = __tco_acc;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 731, column 1 - line 738, column 1: " + [ v.constructor.name, acc.constructor.name ]);
                  };
              };
          };
          return reverse(go(lst)(Nil.value));
      };
  });
  var fromList = function (dictUnfoldable) {
      return toUnfoldable(dictUnfoldable);
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Cons.create)(Nil.value);
  };
  var toList = function (dictFoldable) {
      return fromFoldable(dictFoldable);
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($365) {
                  return Prelude.append(dictMonoid["__superclass_Prelude.Semigroup_0"]())(acc)(f($365));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, (function () {
      var go = function (__copy_v) {
          return function (__copy_b) {
              return function (__copy_v1) {
                  var v = __copy_v;
                  var b = __copy_b;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v1 instanceof Nil) {
                          return b;
                      };
                      if (v1 instanceof Cons) {
                          var __tco_v = v;
                          var __tco_b = v(b)(v1.value0);
                          var __tco_v1 = v1.value1;
                          v = __tco_v;
                          b = __tco_b;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (v) {
      return function (b) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return b;
              };
              if (v1 instanceof Cons) {
                  return v(v1.value0)(Data_Foldable.foldr(foldableList)(v)(b)(v1.value1));
              };
              throw new Error("Failed pattern match: " + [ v.constructor.name, b.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var length = Data_Foldable.foldl(foldableList)(function (acc) {
      return function (v) {
          return acc + 1 | 0;
      };
  })(0);
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Nil) {
              return Prelude.pure(dictApplicative)(Nil.value);
          };
          if (v instanceof Cons) {
              return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(v.value0))(Data_Traversable.sequence(traversableList)(dictApplicative)(v.value1));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return Prelude.pure(dictApplicative)(Nil.value);
              };
              if (v1 instanceof Cons) {
                  return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(v(v1.value0)))(Data_Traversable.traverse(traversableList)(dictApplicative)(v)(v1.value1));
              };
              throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var unzip = Data_Foldable.foldr(foldableList)(function (v) {
      return function (v1) {
          return new Data_Tuple.Tuple(new Cons(v.value0, v1.value0), new Cons(v.value1, v1.value1));
      };
  })(new Data_Tuple.Tuple(Nil.value, Nil.value));
  var foldM = function (dictMonad) {
      return function (v) {
          return function (a) {
              return function (v1) {
                  if (v1 instanceof Nil) {
                      return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(a);
                  };
                  if (v1 instanceof Cons) {
                      return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(v(a)(v1.value0))(function (a$prime) {
                          return foldM(dictMonad)(v)(a$prime)(v1.value1);
                      });
                  };
                  throw new Error("Failed pattern match: " + [ v.constructor.name, a.constructor.name, v1.constructor.name ]);
              };
          };
      };
  };
  var findIndex = function (fn) {
      var go = function (__copy_v) {
          return function (__copy_v1) {
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v1 instanceof Cons) {
                      if (fn(v1.value0)) {
                          return new Data_Maybe.Just(v);
                      };
                      if (Prelude.otherwise) {
                          var __tco_v = v + 1 | 0;
                          var __tco_v1 = v1.value1;
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                  };
                  if (v1 instanceof Nil) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.List line 301, column 1 - line 302, column 1: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
      return go(0);
  };
  var findLastIndex = function (fn) {
      return function (xs) {
          return Prelude["<$>"](Data_Maybe.functorMaybe)(Prelude["-"](Prelude.ringInt)(length(xs) - 1))(findIndex(fn)(reverse(xs)));
      };
  };
  var filterM = function (dictMonad) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Nil) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Nil.value);
              };
              if (v1 instanceof Cons) {
                  return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(v(v1.value0))(function (v2) {
                      return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(filterM(dictMonad)(v)(v1.value1))(function (v3) {
                          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())((function () {
                              if (v2) {
                                  return new Cons(v1.value0, v3);
                              };
                              if (!v2) {
                                  return v3;
                              };
                              throw new Error("Failed pattern match: " + [ v2.constructor.name ]);
                          })());
                      });
                  });
              };
              throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var filter = function (p) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return reverse(acc);
                  };
                  if (v instanceof Cons) {
                      if (p(v.value0)) {
                          var __tco_acc = new Cons(v.value0, acc);
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                      if (Prelude.otherwise) {
                          var __tco_acc = acc;
                          var __tco_v = v.value1;
                          acc = __tco_acc;
                          v = __tco_v;
                          continue tco;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List line 391, column 1 - line 392, column 1: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  };
  var intersectBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Nil) {
                  return Nil.value;
              };
              if (v2 instanceof Nil) {
                  return Nil.value;
              };
              return filter(function (x) {
                  return Data_Foldable.any(foldableList)(Prelude.booleanAlgebraBoolean)(v(x))(v2);
              })(v1);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Prelude["=="](dictEq));
  };
  var nubBy = function (v) {
      return function (v1) {
          if (v1 instanceof Nil) {
              return Nil.value;
          };
          if (v1 instanceof Cons) {
              return new Cons(v1.value0, nubBy(v)(filter(function (y) {
                  return !v(v1.value0)(y);
              })(v1.value1)));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var nub = function (dictEq) {
      return nubBy(Prelude.eq(dictEq));
  };
  var eqList = function (dictEq) {
      return new Prelude.Eq(function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      return function (__copy_v2) {
                          var v = __copy_v;
                          var v1 = __copy_v1;
                          var v2 = __copy_v2;
                          tco: while (true) {
                              if (!v2) {
                                  return false;
                              };
                              if (v instanceof Nil && v1 instanceof Nil) {
                                  return v2;
                              };
                              if (v instanceof Cons && v1 instanceof Cons) {
                                  var __tco_v = v.value1;
                                  var __tco_v1 = v1.value1;
                                  var __tco_v2 = v2 && Prelude["=="](dictEq)(v1.value0)(v.value0);
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  v2 = __tco_v2;
                                  continue tco;
                              };
                              return false;
                          };
                      };
                  };
              };
              return go(xs)(ys)(true);
          };
      });
  };
  var ordList = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqList(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      tco: while (true) {
                          if (v instanceof Nil && v1 instanceof Nil) {
                              return Prelude.EQ.value;
                          };
                          if (v instanceof Nil) {
                              return Prelude.LT.value;
                          };
                          if (v1 instanceof Nil) {
                              return Prelude.GT.value;
                          };
                          if (v instanceof Cons && v1 instanceof Cons) {
                              var $321 = Prelude.compare(dictOrd)(v.value0)(v1.value0);
                              if ($321 instanceof Prelude.EQ) {
                                  var __tco_v = v.value1;
                                  var __tco_v1 = v1.value1;
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              return $321;
                          };
                          throw new Error("Failed pattern match at Data.List line 713, column 1 - line 724, column 1: " + [ v.constructor.name, v1.constructor.name ]);
                      };
                  };
              };
              return go(xs)(ys);
          };
      });
  };
  var elemLastIndex = function (dictEq) {
      return function (x) {
          return findLastIndex(function (v) {
              return Prelude["=="](dictEq)(v)(x);
          });
      };
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Prelude["=="](dictEq)(v)(x);
          });
      };
  };
  var dropWhile = function (p) {
      var go = function (__copy_v) {
          var v = __copy_v;
          tco: while (true) {
              if (v instanceof Cons && p(v.value0)) {
                  var __tco_v = v.value1;
                  v = __tco_v;
                  continue tco;
              };
              return v;
          };
      };
      return go;
  };
  var drop = function (__copy_v) {
      return function (__copy_v1) {
          var v = __copy_v;
          var v1 = __copy_v1;
          tco: while (true) {
              if (v === 0) {
                  return v1;
              };
              if (v1 instanceof Nil) {
                  return Nil.value;
              };
              if (v1 instanceof Cons) {
                  var __tco_v = v - 1;
                  var __tco_v1 = v1.value1;
                  v = __tco_v;
                  v1 = __tco_v1;
                  continue tco;
              };
              throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var slice = function (start) {
      return function (end) {
          return function (xs) {
              return take(end - start)(drop(start)(xs));
          };
      };
  };
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nil) {
                  return Nil.value;
              };
              if (v2 instanceof Cons && v(v1)(v2.value0)) {
                  return v2.value1;
              };
              if (v2 instanceof Cons) {
                  return new Cons(v2.value0, deleteBy(v)(v1)(v2.value1));
              };
              throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Prelude["<>"](semigroupList)(xs)(Data_Foldable.foldl(foldableList)(Prelude.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Prelude["=="](dictEq));
  };
  var deleteAt = function (v) {
      return function (v1) {
          if (v === 0 && v1 instanceof Cons) {
              return new Data_Maybe.Just(v1.value1);
          };
          if (v1 instanceof Cons) {
              return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(v1.value0))(deleteAt(v - 1)(v1.value1));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var $$delete = function (dictEq) {
      return deleteBy(Prelude["=="](dictEq));
  };
  var $bslash$bslash = function (dictEq) {
      return Data_Foldable.foldl(foldableList)(Prelude.flip($$delete(dictEq)));
  };
  var concatMap = function (v) {
      return function (v1) {
          if (v1 instanceof Nil) {
              return Nil.value;
          };
          if (v1 instanceof Cons) {
              return Prelude["<>"](semigroupList)(v(v1.value0))(concatMap(v)(v1.value1));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var catMaybes = mapMaybe(Prelude.id(Prelude.categoryFn));
  var applyList = new Prelude.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Prelude["<>"](semigroupList)(Prelude["<$>"](functorList)(v.value0)(v1))(Prelude["<*>"](applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindList = new Prelude.Bind(function () {
      return applyList;
  }, Prelude.flip(concatMap));
  var concat = function (v) {
      return Prelude[">>="](bindList)(v)(Prelude.id(Prelude.categoryFn));
  };
  var applicativeList = new Prelude.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  var monadList = new Prelude.Monad(function () {
      return applicativeList;
  }, function () {
      return bindList;
  });
  var alterAt = function (v) {
      return function (v1) {
          return function (v2) {
              if (v === 0 && v2 instanceof Cons) {
                  return Data_Maybe.Just.create((function () {
                      var $357 = v1(v2.value0);
                      if ($357 instanceof Data_Maybe.Nothing) {
                          return v2.value1;
                      };
                      if ($357 instanceof Data_Maybe.Just) {
                          return new Cons($357.value0, v2.value1);
                      };
                      throw new Error("Failed pattern match: " + [ $357.constructor.name ]);
                  })());
              };
              if (v2 instanceof Cons) {
                  return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(v2.value0))(alterAt(v - 1)(v1)(v2.value1));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var modifyAt = function (n) {
      return function (f) {
          return alterAt(n)(function ($366) {
              return Data_Maybe.Just.create(f($366));
          });
      };
  };
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Prelude.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  var alternativeList = new Control_Alternative.Alternative(function () {
      return plusList;
  }, function () {
      return applicativeList;
  });
  var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
      return alternativeList;
  }, function () {
      return monadList;
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["fromList"] = fromList;
  exports["toList"] = toList;
  exports["foldM"] = foldM;
  exports["unzip"] = unzip;
  exports["zip"] = zip;
  exports["zipWithA"] = zipWithA;
  exports["zipWith"] = zipWith;
  exports["intersectBy"] = intersectBy;
  exports["intersect"] = intersect;
  exports["\\\\"] = $bslash$bslash;
  exports["deleteBy"] = deleteBy;
  exports["delete"] = $$delete;
  exports["unionBy"] = unionBy;
  exports["union"] = union;
  exports["nubBy"] = nubBy;
  exports["nub"] = nub;
  exports["groupBy"] = groupBy;
  exports["group'"] = group$prime;
  exports["group"] = group;
  exports["span"] = span;
  exports["dropWhile"] = dropWhile;
  exports["drop"] = drop;
  exports["takeWhile"] = takeWhile;
  exports["take"] = take;
  exports["slice"] = slice;
  exports["sortBy"] = sortBy;
  exports["sort"] = sort;
  exports["catMaybes"] = catMaybes;
  exports["mapMaybe"] = mapMaybe;
  exports["filterM"] = filterM;
  exports["filter"] = filter;
  exports["concatMap"] = concatMap;
  exports["concat"] = concat;
  exports["reverse"] = reverse;
  exports["alterAt"] = alterAt;
  exports["modifyAt"] = modifyAt;
  exports["updateAt"] = updateAt;
  exports["deleteAt"] = deleteAt;
  exports["insertAt"] = insertAt;
  exports["findLastIndex"] = findLastIndex;
  exports["findIndex"] = findIndex;
  exports["elemLastIndex"] = elemLastIndex;
  exports["elemIndex"] = elemIndex;
  exports["index"] = index;
  exports["!!"] = $bang$bang;
  exports["uncons"] = uncons;
  exports["init"] = init;
  exports["tail"] = tail;
  exports["last"] = last;
  exports["head"] = head;
  exports["insertBy"] = insertBy;
  exports["insert"] = insert;
  exports["snoc"] = snoc;
  exports[":"] = $colon;
  exports["length"] = length;
  exports["null"] = $$null;
  exports["many"] = many;
  exports["some"] = some;
  exports["replicateM"] = replicateM;
  exports["replicate"] = replicate;
  exports["range"] = range;
  exports[".."] = $dot$dot;
  exports["singleton"] = singleton;
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["showList"] = showList;
  exports["eqList"] = eqList;
  exports["ordList"] = ordList;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["traversableList"] = traversableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
  exports["monadList"] = monadList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["alternativeList"] = alternativeList;
  exports["monadPlusList"] = monadPlusList;;
 
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  /* global exports, console */
  "use strict";

  // module Control.Monad.Eff.Console

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };
 
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var print = function (dictShow) {
      return function ($1) {
          return $foreign.log(Prelude.show(dictShow)($1));
      };
  };
  exports["print"] = print;
  exports["error"] = $foreign.error;
  exports["log"] = $foreign.log;;
 
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["API.PouchDB"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_List = PS["Data.List"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];     
  var WebSQLOptions = (function () {
      function WebSQLOptions() {

      };
      WebSQLOptions.value = new WebSQLOptions();
      return WebSQLOptions;
  })();
  var Persistent = (function () {
      function Persistent() {

      };
      Persistent.value = new Persistent();
      return Persistent;
  })();
  var Temporary = (function () {
      function Temporary() {

      };
      Temporary.value = new Temporary();
      return Temporary;
  })();
  var RemoteDBOptions = (function () {
      function RemoteDBOptions() {

      };
      RemoteDBOptions.value = new RemoteDBOptions();
      return RemoteDBOptions;
  })();
  var DefaultDBOptions = (function () {
      function DefaultDBOptions(value0) {
          this.value0 = value0;
      };
      DefaultDBOptions.create = function (value0) {
          return new DefaultDBOptions(value0);
      };
      return DefaultDBOptions;
  })();
  var LocalDBOptions = (function () {
      function LocalDBOptions(value0) {
          this.value0 = value0;
      };
      LocalDBOptions.create = function (value0) {
          return new LocalDBOptions(value0);
      };
      return LocalDBOptions;
  })();
  var RemoteDBOptions = (function () {
      function RemoteDBOptions() {

      };
      RemoteDBOptions.value = new RemoteDBOptions();
      return RemoteDBOptions;
  })();
  var IndexedDBOptions = (function () {
      function IndexedDBOptions(value0) {
          this.value0 = value0;
      };
      IndexedDBOptions.create = function (value0) {
          return new IndexedDBOptions(value0);
      };
      return IndexedDBOptions;
  })();
  var WebSQLOptions = (function () {
      function WebSQLOptions() {

      };
      WebSQLOptions.value = new WebSQLOptions();
      return WebSQLOptions;
  })();
  var OtherDBOptions = (function () {
      function OtherDBOptions(value0) {
          this.value0 = value0;
      };
      OtherDBOptions.create = function (value0) {
          return new OtherDBOptions(value0);
      };
      return OtherDBOptions;
  })();
  var PouchDBInfo = (function () {
      function PouchDBInfo(value0) {
          this.value0 = value0;
      };
      PouchDBInfo.create = function (value0) {
          return new PouchDBInfo(value0);
      };
      return PouchDBInfo;
  })();
  var OtherDBOptions = (function () {
      function OtherDBOptions(value0) {
          this.value0 = value0;
      };
      OtherDBOptions.create = function (value0) {
          return new OtherDBOptions(value0);
      };
      return OtherDBOptions;
  })();
  var IndexedDBOptions = (function () {
      function IndexedDBOptions(value0) {
          this.value0 = value0;
      };
      IndexedDBOptions.create = function (value0) {
          return new IndexedDBOptions(value0);
      };
      return IndexedDBOptions;
  })();
  var DefaultDBOptions = (function () {
      function DefaultDBOptions(value0) {
          this.value0 = value0;
      };
      DefaultDBOptions.create = function (value0) {
          return new DefaultDBOptions(value0);
      };
      return DefaultDBOptions;
  })();
  var SQLite4Java = (function () {
      function SQLite4Java() {

      };
      SQLite4Java.value = new SQLite4Java();
      return SQLite4Java;
  })();
  var NativeAPI = (function () {
      function NativeAPI() {

      };
      NativeAPI.value = new NativeAPI();
      return NativeAPI;
  })();
  var SQLiteOptions = (function () {
      function SQLiteOptions(value0) {
          this.value0 = value0;
      };
      SQLiteOptions.create = function (value0) {
          return new SQLiteOptions(value0);
      };
      return SQLiteOptions;
  })();
  var IDB = (function () {
      function IDB() {

      };
      IDB.value = new IDB();
      return IDB;
  })();
  var LevelDB = (function () {
      function LevelDB() {

      };
      LevelDB.value = new LevelDB();
      return LevelDB;
  })();
  var WebSQL = (function () {
      function WebSQL() {

      };
      WebSQL.value = new WebSQL();
      return WebSQL;
  })();
  var Http = (function () {
      function Http() {

      };
      Http.value = new Http();
      return Http;
  })();
  var LocalDBOptions = (function () {
      function LocalDBOptions(value0) {
          this.value0 = value0;
      };
      LocalDBOptions.create = function (value0) {
          return new LocalDBOptions(value0);
      };
      return LocalDBOptions;
  })();
  exports["info"] = $foreign.info;
  exports["pouchDB"] = $foreign.pouchDB;
  exports["logRaw"] = $foreign.logRaw;;
 
})(PS["API.PouchDB"] = PS["API.PouchDB"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var $greater$eq$greater = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return Prelude[">>="](dictBind)(f(a))(g);
              };
          };
      };
  };
  var $eq$less$less = function (dictBind) {
      return function (f) {
          return function (m) {
              return Prelude[">>="](dictBind)(m)(f);
          };
      };
  };
  var $less$eq$less = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return $eq$less$less(dictBind)(f)(g(a));
              };
          };
      };
  };
  var join = function (dictBind) {
      return function (m) {
          return Prelude[">>="](dictBind)(m)(Prelude.id(Prelude.categoryFn));
      };
  };
  var ifM = function (dictBind) {
      return function (cond) {
          return function (t) {
              return function (f) {
                  return Prelude[">>="](dictBind)(cond)(function (cond$prime) {
                      if (cond$prime) {
                          return t;
                      };
                      if (!cond$prime) {
                          return f;
                      };
                      throw new Error("Failed pattern match at Control.Bind line 44, column 1 - line 45, column 1: " + [ cond$prime.constructor.name ]);
                  });
              };
          };
      };
  };
  exports["ifM"] = ifM;
  exports["join"] = join;
  exports["<=<"] = $less$eq$less;
  exports[">=>"] = $greater$eq$greater;
  exports["=<<"] = $eq$less$less;;
 
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];     
  var ComonadTrans = function (lower) {
      this.lower = lower;
  };
  var lower = function (dict) {
      return dict.lower;
  };
  exports["ComonadTrans"] = ComonadTrans;
  exports["lower"] = lower;;
 
})(PS["Control.Comonad.Trans"] = PS["Control.Comonad.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Trans = PS["Control.Comonad.Trans"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Tuple = PS["Data.Tuple"];     
  var EnvT = function (x) {
      return x;
  };
  var withEnvT = function (f) {
      return function (v) {
          return EnvT(new Data_Tuple.Tuple(f(v.value0), v.value1));
      };
  };
  var runEnvT = function (v) {
      return v;
  };
  var mapEnvT = function (f) {
      return function (v) {
          return EnvT(new Data_Tuple.Tuple(v.value0, f(v.value1)));
      };
  };
  var functorEnvT = function (dictFunctor) {
      return new Prelude.Functor(function (f) {
          return function (v) {
              return EnvT(new Data_Tuple.Tuple(v.value0, Prelude["<$>"](dictFunctor)(f)(v.value1)));
          };
      });
  };
  var extendEnvT = function (dictExtend) {
      return new Control_Extend.Extend(function () {
          return functorEnvT(dictExtend["__superclass_Prelude.Functor_0"]());
      }, function (f) {
          return function (v) {
              return EnvT(new Data_Tuple.Tuple(v.value0, Prelude["<$>"](dictExtend["__superclass_Prelude.Functor_0"]())(f)(Control_Extend["<<="](dictExtend)(function ($34) {
                  return EnvT(Data_Tuple.Tuple.create(v.value0)($34));
              })(v.value1))));
          };
      });
  };
  var comonadTransEnvT = new Control_Comonad_Trans.ComonadTrans(function (dictComonad) {
      return function (v) {
          return v.value1;
      };
  });
  var comonadEnvT = function (dictComonad) {
      return new Control_Comonad.Comonad(function () {
          return extendEnvT(dictComonad["__superclass_Control.Extend.Extend_0"]());
      }, function (v) {
          return Control_Comonad.extract(dictComonad)(v.value1);
      });
  };
  exports["EnvT"] = EnvT;
  exports["mapEnvT"] = mapEnvT;
  exports["withEnvT"] = withEnvT;
  exports["runEnvT"] = runEnvT;
  exports["functorEnvT"] = functorEnvT;
  exports["extendEnvT"] = extendEnvT;
  exports["comonadEnvT"] = comonadEnvT;
  exports["comonadTransEnvT"] = comonadTransEnvT;;
 
})(PS["Control.Comonad.Env.Trans"] = PS["Control.Comonad.Env.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Identity = function (x) {
      return x;
  };
  var showIdentity = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "Identity (" + (Prelude.show(dictShow)(v) + ")");
      });
  };
  var semiringIdentity = function (dictSemiring) {
      return new Prelude.Semiring(function (v) {
          return function (v1) {
              return Prelude["+"](dictSemiring)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Prelude["*"](dictSemiring)(v)(v1);
          };
      }, Prelude.one(dictSemiring), Prelude.zero(dictSemiring));
  };
  var semigroupIdenity = function (dictSemigroup) {
      return new Prelude.Semigroup(function (v) {
          return function (v1) {
              return Prelude["<>"](dictSemigroup)(v)(v1);
          };
      });
  };
  var runIdentity = function (v) {
      return v;
  };
  var ringIdentity = function (dictRing) {
      return new Prelude.Ring(function () {
          return semiringIdentity(dictRing["__superclass_Prelude.Semiring_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude["-"](dictRing)(v)(v1);
          };
      });
  };
  var monoidIdentity = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupIdenity(dictMonoid["__superclass_Prelude.Semigroup_0"]());
      }, Data_Monoid.mempty(dictMonoid));
  };
  var moduloSemiringIdentity = function (dictModuloSemiring) {
      return new Prelude.ModuloSemiring(function () {
          return semiringIdentity(dictModuloSemiring["__superclass_Prelude.Semiring_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude["/"](dictModuloSemiring)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Prelude.mod(dictModuloSemiring)(v)(v1);
          };
      });
  };
  var functorIdentity = new Prelude.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var invariantIdentity = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorIdentity));
  var foldableIdentity = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return f(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(z)(v);
          };
      };
  }, function (f) {
      return function (z) {
          return function (v) {
              return f(v)(z);
          };
      };
  });
  var traversableIdentity = new Data_Traversable.Traversable(function () {
      return foldableIdentity;
  }, function () {
      return functorIdentity;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Identity)(v);
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Identity)(f(v));
          };
      };
  });
  var extendIdentity = new Control_Extend.Extend(function () {
      return functorIdentity;
  }, function (f) {
      return function (m) {
          return f(m);
      };
  });
  var eqIdentity = function (dictEq) {
      return new Prelude.Eq(function (v) {
          return function (v1) {
              return Prelude["=="](dictEq)(v)(v1);
          };
      });
  };
  var ordIdentity = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqIdentity(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.compare(dictOrd)(v)(v1);
          };
      });
  };
  var divisionRingIdentity = function (dictDivisionRing) {
      return new Prelude.DivisionRing(function () {
          return moduloSemiringIdentity(dictDivisionRing["__superclass_Prelude.ModuloSemiring_1"]());
      }, function () {
          return ringIdentity(dictDivisionRing["__superclass_Prelude.Ring_0"]());
      });
  };
  var numIdentity = function (dictNum) {
      return new Prelude.Num(function () {
          return divisionRingIdentity(dictNum["__superclass_Prelude.DivisionRing_0"]());
      });
  };
  var comonadIdentity = new Control_Comonad.Comonad(function () {
      return extendIdentity;
  }, function (v) {
      return v;
  });
  var boundedIdentity = function (dictBounded) {
      return new Prelude.Bounded(Prelude.bottom(dictBounded), Prelude.top(dictBounded));
  };
  var boundedOrdIdentity = function (dictBoundedOrd) {
      return new Prelude.BoundedOrd(function () {
          return boundedIdentity(dictBoundedOrd["__superclass_Prelude.Bounded_0"]());
      }, function () {
          return ordIdentity(dictBoundedOrd["__superclass_Prelude.Ord_1"]());
      });
  };
  var booleanAlgebraIdentity = function (dictBooleanAlgebra) {
      return new Prelude.BooleanAlgebra(function () {
          return boundedIdentity(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]());
      }, function (v) {
          return function (v1) {
              return Prelude.conj(dictBooleanAlgebra)(v)(v1);
          };
      }, function (v) {
          return function (v1) {
              return Prelude.disj(dictBooleanAlgebra)(v)(v1);
          };
      }, function (v) {
          return Prelude.not(dictBooleanAlgebra)(v);
      });
  };
  var applyIdentity = new Prelude.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Prelude.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Prelude.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Prelude.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["runIdentity"] = runIdentity;
  exports["eqIdentity"] = eqIdentity;
  exports["ordIdentity"] = ordIdentity;
  exports["boundedIdentity"] = boundedIdentity;
  exports["boundedOrdIdentity"] = boundedOrdIdentity;
  exports["booleanAlgebraIdentity"] = booleanAlgebraIdentity;
  exports["semigroupIdenity"] = semigroupIdenity;
  exports["monoidIdentity"] = monoidIdentity;
  exports["semiringIdentity"] = semiringIdentity;
  exports["moduloSemiringIdentity"] = moduloSemiringIdentity;
  exports["ringIdentity"] = ringIdentity;
  exports["divisionRingIdentity"] = divisionRingIdentity;
  exports["numIdentity"] = numIdentity;
  exports["showIdentity"] = showIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["invariantIdentity"] = invariantIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
  exports["extendIdentity"] = extendIdentity;
  exports["comonadIdentity"] = comonadIdentity;
  exports["foldableIdentity"] = foldableIdentity;
  exports["traversableIdentity"] = traversableIdentity;;
 
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad_Env_Trans = PS["Control.Comonad.Env.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Tuple = PS["Data.Tuple"];     
  var withEnv = Control_Comonad_Env_Trans.withEnvT;
  var runEnv = function (x) {
      return Prelude["<$>"](Data_Tuple.functorTuple)(Data_Identity.runIdentity)(Control_Comonad_Env_Trans.runEnvT(x));
  };
  var mapEnv = Prelude.map(Control_Comonad_Env_Trans.functorEnvT(Data_Identity.functorIdentity));
  var env = function (e) {
      return function (a) {
          return Control_Comonad_Env_Trans.EnvT(Data_Tuple.Tuple.create(e)(a));
      };
  };
  exports["env"] = env;
  exports["mapEnv"] = mapEnv;
  exports["withEnv"] = withEnv;
  exports["runEnv"] = runEnv;;
 
})(PS["Control.Comonad.Env"] = PS["Control.Comonad.Env"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Env_Trans = PS["Control.Comonad.Env.Trans"];
  var Data_Tuple = PS["Data.Tuple"];     
  var ComonadEnv = function (__superclass_Control$dotComonad$dotComonad_0, ask, local) {
      this["__superclass_Control.Comonad.Comonad_0"] = __superclass_Control$dotComonad$dotComonad_0;
      this.ask = ask;
      this.local = local;
  };
  var local = function (dict) {
      return dict.local;
  };
  var comonadEnvTuple = new ComonadEnv(function () {
      return Data_Tuple.comonadTuple;
  }, Data_Tuple.fst, function (f) {
      return function (v) {
          return new Data_Tuple.Tuple(f(v.value0), v.value1);
      };
  });
  var comonadEnvEnvT = function (dictComonad) {
      return new ComonadEnv(function () {
          return Control_Comonad_Env_Trans.comonadEnvT(dictComonad);
      }, function (x) {
          return Data_Tuple.fst(Control_Comonad_Env_Trans.runEnvT(x));
      }, function (f) {
          return function (x) {
              return Control_Comonad_Env_Trans.EnvT((function () {
                  var $7 = Control_Comonad_Env_Trans.runEnvT(x);
                  return new Data_Tuple.Tuple(f($7.value0), $7.value1);
              })());
          };
      });
  };
  var ask = function (dict) {
      return dict.ask;
  };
  var asks = function (dictComonadEnv) {
      return function (f) {
          return function (x) {
              return f(ask(dictComonadEnv)(x));
          };
      };
  };
  exports["ComonadEnv"] = ComonadEnv;
  exports["asks"] = asks;
  exports["local"] = local;
  exports["ask"] = ask;
  exports["comonadEnvTuple"] = comonadEnvTuple;
  exports["comonadEnvEnvT"] = comonadEnvEnvT;;
 
})(PS["Control.Comonad.Env.Class"] = PS["Control.Comonad.Env.Class"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Trans = PS["Control.Comonad.Trans"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Tuple = PS["Data.Tuple"];     
  var StoreT = function (x) {
      return x;
  };
  var runStoreT = function (v) {
      return v;
  };
  var functorStoreT = function (dictFunctor) {
      return new Prelude.Functor(function (f) {
          return function (v) {
              return StoreT(new Data_Tuple.Tuple(Prelude["<$>"](dictFunctor)(function (h) {
                  return function ($24) {
                      return f(h($24));
                  };
              })(v.value0), v.value1));
          };
      });
  };
  var extendStoreT = function (dictExtend) {
      return new Control_Extend.Extend(function () {
          return functorStoreT(dictExtend["__superclass_Prelude.Functor_0"]());
      }, function (f) {
          return function (v) {
              return StoreT(new Data_Tuple.Tuple(Control_Extend["<<="](dictExtend)(function (w$prime) {
                  return function (s$prime) {
                      return f(StoreT(new Data_Tuple.Tuple(w$prime, s$prime)));
                  };
              })(v.value0), v.value1));
          };
      });
  };
  var comonadTransStoreT = new Control_Comonad_Trans.ComonadTrans(function (dictComonad) {
      return function (v) {
          return Prelude["<$>"]((dictComonad["__superclass_Control.Extend.Extend_0"]())["__superclass_Prelude.Functor_0"]())(function (f) {
              return f(v.value1);
          })(v.value0);
      };
  });
  var comonadStoreT = function (dictComonad) {
      return new Control_Comonad.Comonad(function () {
          return extendStoreT(dictComonad["__superclass_Control.Extend.Extend_0"]());
      }, function (v) {
          return Control_Comonad.extract(dictComonad)(v.value0)(v.value1);
      });
  };
  exports["StoreT"] = StoreT;
  exports["runStoreT"] = runStoreT;
  exports["functorStoreT"] = functorStoreT;
  exports["extendStoreT"] = extendStoreT;
  exports["comonadStoreT"] = comonadStoreT;
  exports["comonadTransStoreT"] = comonadTransStoreT;;
 
})(PS["Control.Comonad.Store.Trans"] = PS["Control.Comonad.Store.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad_Store_Trans = PS["Control.Comonad.Store.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Tuple = PS["Data.Tuple"];     
  var store = function (f) {
      return function (x) {
          return Control_Comonad_Store_Trans.StoreT(new Data_Tuple.Tuple(f, x));
      };
  };
  var runStore = function (s) {
      return Data_Tuple.swap(Prelude["<$>"](Data_Tuple.functorTuple)(Data_Identity.runIdentity)(Data_Tuple.swap(Control_Comonad_Store_Trans.runStoreT(s))));
  };
  exports["store"] = store;
  exports["runStore"] = runStore;;
 
})(PS["Control.Comonad.Store"] = PS["Control.Comonad.Store"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Store_Trans = PS["Control.Comonad.Store.Trans"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Tuple = PS["Data.Tuple"];     
  var ComonadStore = function (__superclass_Control$dotComonad$dotComonad_0, peek, pos) {
      this["__superclass_Control.Comonad.Comonad_0"] = __superclass_Control$dotComonad$dotComonad_0;
      this.peek = peek;
      this.pos = pos;
  };
  var pos = function (dict) {
      return dict.pos;
  };
  var peek = function (dict) {
      return dict.peek;
  };
  var peeks = function (dictComonadStore) {
      return function (f) {
          return function (x) {
              return peek(dictComonadStore)(f(pos(dictComonadStore)(x)))(x);
          };
      };
  };
  var seeks = function (dictComonadStore) {
      return function (dictExtend) {
          return function (f) {
              return function (x) {
                  return peeks(dictComonadStore)(f)(Control_Extend.duplicate(dictExtend)(x));
              };
          };
      };
  };
  var seek = function (dictComonadStore) {
      return function (dictExtend) {
          return function (s) {
              return function (x) {
                  return peek(dictComonadStore)(s)(Control_Extend.duplicate(dictExtend)(x));
              };
          };
      };
  };
  var experiment = function (dictComonadStore) {
      return function (dictFunctor) {
          return function (f) {
              return function (x) {
                  return Prelude["<$>"](dictFunctor)(Prelude.flip(peek(dictComonadStore))(x))(f(pos(dictComonadStore)(x)));
              };
          };
      };
  };
  var comonadStoreStoreT = function (dictComonad) {
      return new ComonadStore(function () {
          return Control_Comonad_Store_Trans.comonadStoreT(dictComonad);
      }, function (s) {
          return function (v) {
              return Control_Comonad.extract(dictComonad)(v.value0)(s);
          };
      }, function (v) {
          return v.value1;
      });
  };
  exports["ComonadStore"] = ComonadStore;
  exports["seeks"] = seeks;
  exports["seek"] = seek;
  exports["peeks"] = peeks;
  exports["experiment"] = experiment;
  exports["peek"] = peek;
  exports["pos"] = pos;
  exports["comonadStoreStoreT"] = comonadStoreStoreT;;
 
})(PS["Control.Comonad.Store.Class"] = PS["Control.Comonad.Store.Class"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Trans = PS["Control.Comonad.Trans"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Monoid = PS["Data.Monoid"];     
  var TracedT = function (x) {
      return x;
  };
  var runTracedT = function (v) {
      return v;
  };
  var functorTracedT = function (dictFunctor) {
      return new Prelude.Functor(function (f) {
          return function (v) {
              return Prelude["<$>"](dictFunctor)(function (g) {
                  return function (t) {
                      return f(g(t));
                  };
              })(v);
          };
      });
  };
  var extendTracedT = function (dictExtend) {
      return function (dictSemigroup) {
          return new Control_Extend.Extend(function () {
              return functorTracedT(dictExtend["__superclass_Prelude.Functor_0"]());
          }, function (f) {
              return function (v) {
                  return Control_Extend["<<="](dictExtend)(function (w1) {
                      return function (t) {
                          return f(Prelude["<$>"](dictExtend["__superclass_Prelude.Functor_0"]())(function (h) {
                              return function (t$prime) {
                                  return h(Prelude["<>"](dictSemigroup)(t)(t$prime));
                              };
                          })(w1));
                      };
                  })(v);
              };
          });
      };
  };
  var comonadTransTracedT = function (dictMonoid) {
      return new Control_Comonad_Trans.ComonadTrans(function (dictComonad) {
          return function (v) {
              return Prelude["<$>"]((dictComonad["__superclass_Control.Extend.Extend_0"]())["__superclass_Prelude.Functor_0"]())(function (f) {
                  return f(Data_Monoid.mempty(dictMonoid));
              })(v);
          };
      });
  };
  var comonadTracedT = function (dictComonad) {
      return function (dictMonoid) {
          return new Control_Comonad.Comonad(function () {
              return extendTracedT(dictComonad["__superclass_Control.Extend.Extend_0"]())(dictMonoid["__superclass_Prelude.Semigroup_0"]());
          }, function (v) {
              return Control_Comonad.extract(dictComonad)(v)(Data_Monoid.mempty(dictMonoid));
          });
      };
  };
  exports["TracedT"] = TracedT;
  exports["runTracedT"] = runTracedT;
  exports["functorTracedT"] = functorTracedT;
  exports["extendTracedT"] = extendTracedT;
  exports["comonadTracedT"] = comonadTracedT;
  exports["comonadTransTracedT"] = comonadTransTracedT;;
 
})(PS["Control.Comonad.Traced.Trans"] = PS["Control.Comonad.Traced.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad_Traced_Trans = PS["Control.Comonad.Traced.Trans"];
  var Data_Identity = PS["Data.Identity"];     
  var traced = function ($0) {
      return Control_Comonad_Traced_Trans.TracedT(Data_Identity.Identity($0));
  };
  var runTraced = function ($1) {
      return Data_Identity.runIdentity(Control_Comonad_Traced_Trans.runTracedT($1));
  };
  exports["traced"] = traced;
  exports["runTraced"] = runTraced;;
 
})(PS["Control.Comonad.Traced"] = PS["Control.Comonad.Traced"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Comonad_Traced_Trans = PS["Control.Comonad.Traced.Trans"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Tuple = PS["Data.Tuple"];     
  var ComonadTraced = function (__superclass_Control$dotComonad$dotComonad_0, track) {
      this["__superclass_Control.Comonad.Comonad_0"] = __superclass_Control$dotComonad$dotComonad_0;
      this.track = track;
  };
  var track = function (dict) {
      return dict.track;
  };
  var tracks = function (dictComonad) {
      return function (dictComonadTraced) {
          return function (f) {
              return function (w) {
                  return track(dictComonadTraced)(f(Control_Comonad.extract(dictComonad)(w)))(w);
              };
          };
      };
  };
  var listens = function (dictFunctor) {
      return function (f) {
          return function (tr) {
              return Prelude["<$>"](dictFunctor)(function (g) {
                  return function (t) {
                      return new Data_Tuple.Tuple(g(t), f(t));
                  };
              })(Control_Comonad_Traced_Trans.runTracedT(tr));
          };
      };
  };
  var listen = function (dictFunctor) {
      return function (tr) {
          return Prelude["<$>"](dictFunctor)(function (f) {
              return function (t) {
                  return new Data_Tuple.Tuple(f(t), t);
              };
          })(Control_Comonad_Traced_Trans.runTracedT(tr));
      };
  };
  var comonadTracedTracedT = function (dictComonad) {
      return function (dictMonoid) {
          return new ComonadTraced(function () {
              return Control_Comonad_Traced_Trans.comonadTracedT(dictComonad)(dictMonoid);
          }, function (t) {
              return function (tr) {
                  return Control_Comonad.extract(dictComonad)(Control_Comonad_Traced_Trans.runTracedT(tr))(t);
              };
          });
      };
  };
  var censor = function (dictFunctor) {
      return function (f) {
          return function (tr) {
              return Prelude["<$>"](dictFunctor)(Prelude[">>>"](Prelude.semigroupoidFn)(f))(Control_Comonad_Traced_Trans.runTracedT(tr));
          };
      };
  };
  exports["ComonadTraced"] = ComonadTraced;
  exports["censor"] = censor;
  exports["listens"] = listens;
  exports["listen"] = listen;
  exports["tracks"] = tracks;
  exports["track"] = track;
  exports["comonadTracedTracedT"] = comonadTracedTracedT;;
 
})(PS["Control.Comonad.Traced.Class"] = PS["Control.Comonad.Traced.Class"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var when = function (dictMonad) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Prelude.unit);
              };
              throw new Error("Failed pattern match at Control.Monad line 8, column 1 - line 9, column 1: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var unless = function (dictMonad) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Prelude.unit);
              };
              throw new Error("Failed pattern match at Control.Monad line 13, column 1 - line 14, column 1: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  exports["unless"] = unless;
  exports["when"] = when;;
 
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var MonadCont = function (__superclass_Prelude$dotMonad_0, callCC) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.callCC = callCC;
  };
  var callCC = function (dict) {
      return dict.callCC;
  };
  exports["MonadCont"] = MonadCont;
  exports["callCC"] = callCC;;
 
})(PS["Control.Monad.Cont.Class"] = PS["Control.Monad.Cont.Class"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["MonadTrans"] = MonadTrans;
  exports["lift"] = lift;;
 
})(PS["Control.Monad.Trans"] = PS["Control.Monad.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var MonadEff = function (__superclass_Prelude$dotMonad_0, liftEff) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.liftEff = liftEff;
  };
  var monadEffEff = new MonadEff(function () {
      return Control_Monad_Eff.monadEff;
  }, Prelude.id(Prelude.categoryFn));
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["MonadEff"] = MonadEff;
  exports["liftEff"] = liftEff;
  exports["monadEffEff"] = monadEffEff;;
 
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var MonadReader = function (__superclass_Prelude$dotMonad_0, ask, local) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.ask = ask;
      this.local = local;
  };
  var monadReaderFun = new MonadReader(function () {
      return Prelude.monadFn;
  }, Prelude.id(Prelude.categoryFn), Prelude[">>>"](Prelude.semigroupoidFn));
  var local = function (dict) {
      return dict.local;
  };
  var ask = function (dict) {
      return dict.ask;
  };
  var reader = function (dictMonadReader) {
      return function (f) {
          return Prelude[">>="]((dictMonadReader["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(ask(dictMonadReader))(function ($1) {
              return Prelude["return"]((dictMonadReader["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())(f($1));
          });
      };
  };
  exports["MonadReader"] = MonadReader;
  exports["reader"] = reader;
  exports["local"] = local;
  exports["ask"] = ask;
  exports["monadReaderFun"] = monadReaderFun;;
 
})(PS["Control.Monad.Reader.Class"] = PS["Control.Monad.Reader.Class"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];     
  var MonadState = function (__superclass_Prelude$dotMonad_0, state) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Prelude.unit, s);
          });
      };
  };
  var modify = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Prelude.unit, f(s));
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["MonadState"] = MonadState;
  exports["modify"] = modify;
  exports["put"] = put;
  exports["gets"] = gets;
  exports["get"] = get;
  exports["state"] = state;;
 
})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];     
  var ContT = function (x) {
      return x;
  };
  var runContT = function (v) {
      return function (k) {
          return v(k);
      };
  };
  var withContT = function (f) {
      return function (m) {
          return function (k) {
              return runContT(m)(f(k));
          };
      };
  };
  var monadTransContT = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
      return function (m) {
          return function (k) {
              return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(m)(k);
          };
      };
  });
  var mapContT = function (f) {
      return function (m) {
          return function (k) {
              return f(runContT(m)(k));
          };
      };
  };
  var functorContT = function (dictMonad) {
      return new Prelude.Functor(function (f) {
          return function (m) {
              return function (k) {
                  return runContT(m)(function (a) {
                      return k(f(a));
                  });
              };
          };
      });
  };
  var applyContT = function (dictMonad) {
      return new Prelude.Apply(function () {
          return functorContT(dictMonad);
      }, function (f) {
          return function (v) {
              return function (k) {
                  return runContT(f)(function (g) {
                      return runContT(v)(function (a) {
                          return k(g(a));
                      });
                  });
              };
          };
      });
  };
  var bindContT = function (dictMonad) {
      return new Prelude.Bind(function () {
          return applyContT(dictMonad);
      }, function (m) {
          return function (k) {
              return function (k$prime) {
                  return runContT(m)(function (a) {
                      return runContT(k(a))(k$prime);
                  });
              };
          };
      });
  };
  var applicativeContT = function (dictMonad) {
      return new Prelude.Applicative(function () {
          return applyContT(dictMonad);
      }, function (a) {
          return function (k) {
              return k(a);
          };
      });
  };
  var monadContT = function (dictMonad) {
      return new Prelude.Monad(function () {
          return applicativeContT(dictMonad);
      }, function () {
          return bindContT(dictMonad);
      });
  };
  var monadContContT = function (dictMonad) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadContT(dictMonad);
      }, function (f) {
          return function (k) {
              return runContT(f(function (a) {
                  return function (v) {
                      return k(a);
                  };
              }))(k);
          };
      });
  };
  var monadEffContT = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadContT(dictMonadEff["__superclass_Prelude.Monad_0"]());
      }, function ($17) {
          return Control_Monad_Trans.lift(monadTransContT)(dictMonadEff["__superclass_Prelude.Monad_0"]())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($17));
      });
  };
  var monadReaderContT = function (dictMonadReader) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadContT(dictMonadReader["__superclass_Prelude.Monad_0"]());
      }, Control_Monad_Trans.lift(monadTransContT)(dictMonadReader["__superclass_Prelude.Monad_0"]())(Control_Monad_Reader_Class.ask(dictMonadReader)), function (f) {
          return function (c) {
              return function (k) {
                  return Prelude.bind((dictMonadReader["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(Control_Monad_Reader_Class.ask(dictMonadReader))(function (v) {
                      return Control_Monad_Reader_Class.local(dictMonadReader)(f)(runContT(c)(function ($18) {
                          return Control_Monad_Reader_Class.local(dictMonadReader)(Prelude["const"](v))(k($18));
                      }));
                  });
              };
          };
      });
  };
  var monadStateContT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadContT(dictMonadState["__superclass_Prelude.Monad_0"]());
      }, function ($19) {
          return Control_Monad_Trans.lift(monadTransContT)(dictMonadState["__superclass_Prelude.Monad_0"]())(Control_Monad_State_Class.state(dictMonadState)($19));
      });
  };
  exports["ContT"] = ContT;
  exports["withContT"] = withContT;
  exports["mapContT"] = mapContT;
  exports["runContT"] = runContT;
  exports["monadContContT"] = monadContContT;
  exports["functorContT"] = functorContT;
  exports["applyContT"] = applyContT;
  exports["applicativeContT"] = applicativeContT;
  exports["bindContT"] = bindContT;
  exports["monadContT"] = monadContT;
  exports["monadTransContT"] = monadTransContT;
  exports["monadEffContT"] = monadEffContT;
  exports["monadReaderContT"] = monadReaderContT;
  exports["monadStateContT"] = monadStateContT;;
 
})(PS["Control.Monad.Cont.Trans"] = PS["Control.Monad.Cont.Trans"] || {});
(function(exports) {
  /* global exports, console */
  "use strict";

  // module Control.Monad.Eff.Console.Unsafe

  exports.logAny = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.errorAny = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };
 
})(PS["Control.Monad.Eff.Console.Unsafe"] = PS["Control.Monad.Eff.Console.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console.Unsafe"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  exports["errorAny"] = $foreign.errorAny;
  exports["logAny"] = $foreign.logAny;;
 
})(PS["Control.Monad.Eff.Console.Unsafe"] = PS["Control.Monad.Eff.Console.Unsafe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Exception

  exports.showErrorImpl = function (err) {
    return err.stack || err.toString();
  };

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.message = function (e) {
    return e.message;
  };

  exports.stackImpl = function (just) {
    return function (nothing) {
      return function (e) {
        return e.stack ? just(e.stack) : nothing;
      };
    };
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
 
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var $$throw = function ($0) {
      return $foreign.throwException($foreign.error($0));
  };
  var stack = $foreign.stackImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var showError = new Prelude.Show($foreign.showErrorImpl);
  exports["throw"] = $$throw;
  exports["stack"] = stack;
  exports["showError"] = showError;
  exports["catchException"] = $foreign.catchException;
  exports["throwException"] = $foreign.throwException;
  exports["message"] = $foreign.message;
  exports["error"] = $foreign.error;;
 
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Unsafe

  exports.unsafeInterleaveEff = function (f) {
    return f;
  };
 
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Unsafe"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var unsafePerformEff = function ($0) {
      return Control_Monad_Eff.runPure($foreign.unsafeInterleaveEff($0));
  };
  exports["unsafePerformEff"] = unsafePerformEff;
  exports["unsafeInterleaveEff"] = $foreign.unsafeInterleaveEff;;
 
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];     
  var unsafeThrowException = function ($0) {
      return Control_Monad_Eff_Unsafe.unsafePerformEff(Control_Monad_Eff_Exception.throwException($0));
  };
  var unsafeThrow = function ($1) {
      return unsafeThrowException(Control_Monad_Eff_Exception.error($1));
  };
  exports["unsafeThrow"] = unsafeThrow;
  exports["unsafeThrowException"] = unsafeThrowException;;
 
})(PS["Control.Monad.Eff.Exception.Unsafe"] = PS["Control.Monad.Eff.Exception.Unsafe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Random

  exports.random = Math.random;
 
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringImpl = function (just) {
    return function (nothing) {
      return function (s) {
        /* jshint bitwise: false */
        var i = parseFloat(s);
        return (i | 0) === i ? just(i) : nothing;
      };
    };
  };
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Int.Bits

  exports.andImpl = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 & n2;
    };
  };

  exports.orImpl = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 | n2;
    };
  };

  exports.xorImpl = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 ^ n2;
    };
  };

  exports.shl = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 << n2;
    };
  };

  exports.shr = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 >> n2;
    };
  };

  exports.zshr = function (n1) {
    return function (n2) {
      /* jshint bitwise: false */
      return n1 >>> n2;
    };
  };

  exports.complement = function (n) {
    /* jshint bitwise: false */
    return ~n;
  };
 
})(PS["Data.Int.Bits"] = PS["Data.Int.Bits"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Int.Bits"]; 
  var $dot$bar$dot = $foreign.orImpl;
  var $dot$up$dot = $foreign.xorImpl;
  var $dot$amp$dot = $foreign.andImpl;
  exports[".^."] = $dot$up$dot;
  exports[".|."] = $dot$bar$dot;
  exports[".&."] = $dot$amp$dot;
  exports["complement"] = $foreign.complement;
  exports["zshr"] = $foreign.zshr;
  exports["shr"] = $foreign.shr;
  exports["shl"] = $foreign.shl;;
 
})(PS["Data.Int.Bits"] = PS["Data.Int.Bits"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Maybe.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Maybe.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];     
  var fromJust = function (v) {
      if (v instanceof Data_Maybe.Just) {
          return v.value0;
      };
      if (v instanceof Data_Maybe.Nothing) {
          return $foreign.unsafeThrow("Data.Maybe.Unsafe.fromJust called on Nothing");
      };
      throw new Error("Failed pattern match at Data.Maybe.Unsafe line 10, column 1 - line 11, column 1: " + [ v.constructor.name ]);
  };
  exports["fromJust"] = fromJust;
  exports["unsafeThrow"] = $foreign.unsafeThrow;;
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Math

  exports.abs = Math.abs;

  exports.acos = Math.acos;

  exports.asin = Math.asin;

  exports.atan = Math.atan;

  exports.atan2 = function (y) {
    return function (x) {
      return Math.atan2(y, x);
    };
  };

  exports.ceil = Math.ceil;

  exports.cos = Math.cos;

  exports.exp = Math.exp;

  exports.floor = Math.floor;

  exports.log = Math.log;

  exports.max = function (n1) {
    return function (n2) {
      return Math.max(n1, n2);
    };
  };

  exports.min = function (n1) {
    return function (n2) {
      return Math.min(n1, n2);
    };
  };

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };

  exports["%"] = function(n) {
    return function(m) {
      return n % m;
    };
  };

  exports.round = Math.round;

  exports.sin = Math.sin;

  exports.sqrt = Math.sqrt;

  exports.tan = Math.tan;

  exports.e = Math.E;

  exports.ln2 = Math.LN2;

  exports.ln10 = Math.LN10;

  exports.log2e = Math.LOG2E;

  exports.log10e = Math.LOG10E;

  exports.pi = Math.PI;

  exports.sqrt1_2 = Math.SQRT1_2;

  exports.sqrt2 = Math.SQRT2;
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Math"];
  exports["sqrt2"] = $foreign.sqrt2;
  exports["sqrt1_2"] = $foreign.sqrt1_2;
  exports["pi"] = $foreign.pi;
  exports["log10e"] = $foreign.log10e;
  exports["log2e"] = $foreign.log2e;
  exports["ln10"] = $foreign.ln10;
  exports["ln2"] = $foreign.ln2;
  exports["e"] = $foreign.e;
  exports["%"] = $foreign["%"];
  exports["tan"] = $foreign.tan;
  exports["sqrt"] = $foreign.sqrt;
  exports["sin"] = $foreign.sin;
  exports["round"] = $foreign.round;
  exports["pow"] = $foreign.pow;
  exports["min"] = $foreign.min;
  exports["max"] = $foreign.max;
  exports["log"] = $foreign.log;
  exports["floor"] = $foreign.floor;
  exports["exp"] = $foreign.exp;
  exports["cos"] = $foreign.cos;
  exports["ceil"] = $foreign.ceil;
  exports["atan2"] = $foreign.atan2;
  exports["atan"] = $foreign.atan;
  exports["asin"] = $foreign.asin;
  exports["acos"] = $foreign.acos;
  exports["abs"] = $foreign.abs;;
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Int"];
  var Prelude = PS["Prelude"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $$Math = PS["Math"];     
  var odd = function (x) {
      return (x & 1) !== 0;
  };
  var fromString = $foreign.fromStringImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x >= $foreign.toNumber(Prelude.top(Prelude.boundedInt))) {
          return Prelude.top(Prelude.boundedInt);
      };
      if (x <= $foreign.toNumber(Prelude.bottom(Prelude.boundedInt))) {
          return Prelude.bottom(Prelude.boundedInt);
      };
      if (Prelude.otherwise) {
          return Data_Maybe_Unsafe.fromJust(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 48, column 1 - line 49, column 1: " + [ x.constructor.name ]);
  };
  var round = function ($1) {
      return unsafeClamp($$Math.round($1));
  };
  var floor = function ($2) {
      return unsafeClamp($$Math.floor($2));
  };
  var even = function (x) {
      return (x & 1) === 0;
  };
  var ceil = function ($3) {
      return unsafeClamp($$Math.ceil($3));
  };
  exports["odd"] = odd;
  exports["even"] = even;
  exports["fromString"] = fromString;
  exports["round"] = round;
  exports["floor"] = floor;
  exports["ceil"] = ceil;
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;;
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Random"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Int = PS["Data.Int"];     
  var randomRange = function (min) {
      return function (max) {
          return function __do() {
              var v = $foreign.random();
              return v * (max - min) + min;
          };
      };
  };
  var randomInt = function (low) {
      return function (high) {
          return function __do() {
              var v = $foreign.random();
              var asNumber = ((Data_Int.toNumber(high) - Data_Int.toNumber(low)) + 1) * v + Data_Int.toNumber(low);
              return Data_Int.floor(asNumber);
          };
      };
  };
  var randomBool = Prelude["<$>"](Control_Monad_Eff.functorEff)(function (v) {
      return v < 0.5;
  })($foreign.random);
  exports["randomBool"] = randomBool;
  exports["randomRange"] = randomRange;
  exports["randomInt"] = randomInt;
  exports["random"] = $foreign.random;;
 
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var showEither = function (dictShow) {
      return function (dictShow1) {
          return new Prelude.Show(function (v) {
              if (v instanceof Left) {
                  return "Left (" + (Prelude.show(dictShow)(v.value0) + ")");
              };
              if (v instanceof Right) {
                  return "Right (" + (Prelude.show(dictShow1)(v.value0) + ")");
              };
              throw new Error("Failed pattern match at Data.Either line 174, column 1 - line 181, column 1: " + [ v.constructor.name ]);
          });
      };
  };
  var functorEither = new Prelude.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 52, column 1 - line 56, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var foldableEither = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Left) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Right) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 201, column 1 - line 209, column 1: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Left) {
                  return z;
              };
              if (v1 instanceof Right) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 201, column 1 - line 209, column 1: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Left) {
                  return z;
              };
              if (v1 instanceof Right) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Either line 201, column 1 - line 209, column 1: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var traversableEither = new Data_Traversable.Traversable(function () {
      return foldableEither;
  }, function () {
      return functorEither;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Left) {
              return Prelude.pure(dictApplicative)(new Left(v.value0));
          };
          if (v instanceof Right) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Right.create)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Either line 217, column 1 - line 223, column 1: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Left) {
                  return Prelude.pure(dictApplicative)(new Left(v1.value0));
              };
              if (v1 instanceof Right) {
                  return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Right.create)(v(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 217, column 1 - line 223, column 1: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var extendEither = new Control_Extend.Extend(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          return new Right(v(v1));
      };
  });
  var eqEither = function (dictEq) {
      return function (dictEq1) {
          return new Prelude.Eq(function (v) {
              return function (v1) {
                  if (v instanceof Left && v1 instanceof Left) {
                      return Prelude["=="](dictEq)(v.value0)(v1.value0);
                  };
                  if (v instanceof Right && v1 instanceof Right) {
                      return Prelude["=="](dictEq1)(v.value0)(v1.value0);
                  };
                  return false;
              };
          });
      };
  };
  var ordEither = function (dictOrd) {
      return function (dictOrd1) {
          return new Prelude.Ord(function () {
              return eqEither(dictOrd["__superclass_Prelude.Eq_0"]())(dictOrd1["__superclass_Prelude.Eq_0"]());
          }, function (v) {
              return function (v1) {
                  if (v instanceof Left && v1 instanceof Left) {
                      return Prelude.compare(dictOrd)(v.value0)(v1.value0);
                  };
                  if (v instanceof Right && v1 instanceof Right) {
                      return Prelude.compare(dictOrd1)(v.value0)(v1.value0);
                  };
                  if (v instanceof Left) {
                      return Prelude.LT.value;
                  };
                  if (v1 instanceof Left) {
                      return Prelude.GT.value;
                  };
                  throw new Error("Failed pattern match at Data.Either line 191, column 1 - line 197, column 1: " + [ v.constructor.name, v1.constructor.name ]);
              };
          });
      };
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 28, column 1 - line 29, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isLeft = either(Prelude["const"](true))(Prelude["const"](false));
  var isRight = either(Prelude["const"](false))(Prelude["const"](true));
  var boundedEither = function (dictBounded) {
      return function (dictBounded1) {
          return new Prelude.Bounded(new Left(Prelude.bottom(dictBounded)), new Right(Prelude.top(dictBounded1)));
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 56, column 1 - line 92, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var bifoldableEither = new Data_Bifoldable.Bifoldable(function (dictMonoid) {
      return function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof Left) {
                      return v(v2.value0);
                  };
                  if (v2 instanceof Right) {
                      return v1(v2.value0);
                  };
                  throw new Error("Failed pattern match at Data.Either line 209, column 1 - line 217, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
              };
          };
      };
  }, function (v) {
      return function (v1) {
          return function (z) {
              return function (v2) {
                  if (v2 instanceof Left) {
                      return v(z)(v2.value0);
                  };
                  if (v2 instanceof Right) {
                      return v1(z)(v2.value0);
                  };
                  throw new Error("Failed pattern match at Data.Either line 209, column 1 - line 217, column 1: " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
              };
          };
      };
  }, function (v) {
      return function (v1) {
          return function (z) {
              return function (v2) {
                  if (v2 instanceof Left) {
                      return v(v2.value0)(z);
                  };
                  if (v2 instanceof Right) {
                      return v1(v2.value0)(z);
                  };
                  throw new Error("Failed pattern match at Data.Either line 209, column 1 - line 217, column 1: " + [ v.constructor.name, v1.constructor.name, z.constructor.name, v2.constructor.name ]);
              };
          };
      };
  });
  var bitraversableEither = new Data_Bitraversable.Bitraversable(function () {
      return bifoldableEither;
  }, function () {
      return bifunctorEither;
  }, function (dictApplicative) {
      return function (v) {
          if (v instanceof Left) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Left.create)(v.value0);
          };
          if (v instanceof Right) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Right.create)(v.value0);
          };
          throw new Error("Failed pattern match at Data.Either line 223, column 1 - line 229, column 1: " + [ v.constructor.name ]);
      };
  }, function (dictApplicative) {
      return function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof Left) {
                      return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Left.create)(v(v2.value0));
                  };
                  if (v2 instanceof Right) {
                      return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Right.create)(v1(v2.value0));
                  };
                  throw new Error("Failed pattern match at Data.Either line 223, column 1 - line 229, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
              };
          };
      };
  });
  var applyEither = new Prelude.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Prelude["<$>"](functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 92, column 1 - line 116, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Prelude.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var semigroupEither = function (dictSemigroup) {
      return new Prelude.Semigroup(function (x) {
          return function (y) {
              return Prelude["<*>"](applyEither)(Prelude["<$>"](functorEither)(Prelude.append(dictSemigroup))(x))(y);
          };
      });
  };
  var semiringEither = function (dictSemiring) {
      return new Prelude.Semiring(function (x) {
          return function (y) {
              return Prelude["<*>"](applyEither)(Prelude["<$>"](functorEither)(Prelude.add(dictSemiring))(x))(y);
          };
      }, function (x) {
          return function (y) {
              return Prelude["<*>"](applyEither)(Prelude["<$>"](functorEither)(Prelude.mul(dictSemiring))(x))(y);
          };
      }, new Right(Prelude.one(dictSemiring)), new Right(Prelude.zero(dictSemiring)));
  };
  var applicativeEither = new Prelude.Applicative(function () {
      return applyEither;
  }, Right.create);
  var monadEither = new Prelude.Monad(function () {
      return applicativeEither;
  }, function () {
      return bindEither;
  });
  var altEither = new Control_Alt.Alt(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return v1;
          };
          return v;
      };
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["isRight"] = isRight;
  exports["isLeft"] = isLeft;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["altEither"] = altEither;
  exports["bindEither"] = bindEither;
  exports["monadEither"] = monadEither;
  exports["extendEither"] = extendEither;
  exports["showEither"] = showEither;
  exports["eqEither"] = eqEither;
  exports["ordEither"] = ordEither;
  exports["boundedEither"] = boundedEither;
  exports["foldableEither"] = foldableEither;
  exports["bifoldableEither"] = bifoldableEither;
  exports["traversableEither"] = traversableEither;
  exports["bitraversableEither"] = bitraversableEither;
  exports["semiringEither"] = semiringEither;
  exports["semigroupEither"] = semigroupEither;;
 
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Either = PS["Data.Either"];     
  var MonadError = function (__superclass_Prelude$dotMonad_0, catchError, throwError) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.catchError = catchError;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  var monadErrorMaybe = new MonadError(function () {
      return Data_Maybe.monadMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Nothing) {
              return v1(Prelude.unit);
          };
          if (v instanceof Data_Maybe.Just) {
              return new Data_Maybe.Just(v.value0);
          };
          throw new Error("Failed pattern match at Control.Monad.Error.Class line 51, column 1 - line 54, column 32: " + [ v.constructor.name, v1.constructor.name ]);
      };
  }, Prelude["const"](Data_Maybe.Nothing.value));
  var monadErrorEither = new MonadError(function () {
      return Data_Either.monadEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Data_Either.Left) {
              return v1(v.value0);
          };
          if (v instanceof Data_Either.Right) {
              return new Data_Either.Right(v.value0);
          };
          throw new Error("Failed pattern match at Control.Monad.Error.Class line 46, column 1 - line 51, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  }, Data_Either.Left.create);
  var catchError = function (dict) {
      return dict.catchError;
  };
  var catchJust = function (dictMonadError) {
      return function (p) {
          return function (act) {
              return function (handler) {
                  var handle = function (e) {
                      var $12 = p(e);
                      if ($12 instanceof Data_Maybe.Nothing) {
                          return throwError(dictMonadError)(e);
                      };
                      if ($12 instanceof Data_Maybe.Just) {
                          return handler($12.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Error.Class line 41, column 3 - line 46, column 1: " + [ $12.constructor.name ]);
                  };
                  return catchError(dictMonadError)(act)(handle);
              };
          };
      };
  };
  exports["MonadError"] = MonadError;
  exports["catchJust"] = catchJust;
  exports["catchError"] = catchError;
  exports["throwError"] = throwError;
  exports["monadErrorEither"] = monadErrorEither;
  exports["monadErrorMaybe"] = monadErrorMaybe;;
 
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];     
  var $less$dollar = function (dictFunctor) {
      return function (x) {
          return function (f) {
              return Prelude["<$>"](dictFunctor)(Prelude["const"](x))(f);
          };
      };
  };
  var $dollar$greater = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return Prelude["<$>"](dictFunctor)(Prelude["const"](x))(f);
          };
      };
  };
  exports["$>"] = $dollar$greater;
  exports["<$"] = $less$dollar;;
 
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Either.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
 
})(PS["Data.Either.Unsafe"] = PS["Data.Either.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Either.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];     
  var fromRight = function (v) {
      if (v instanceof Data_Either.Right) {
          return v.value0;
      };
      return $foreign.unsafeThrow("Data.Either.Unsafe.fromRight called on Left value");
  };
  var fromLeft = function (v) {
      if (v instanceof Data_Either.Left) {
          return v.value0;
      };
      return $foreign.unsafeThrow("Data.Either.Unsafe.fromLeft called on Right value");
  };
  exports["fromRight"] = fromRight;
  exports["fromLeft"] = fromLeft;;
 
})(PS["Data.Either.Unsafe"] = PS["Data.Either.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Data_Either_Unsafe = PS["Data.Either.Unsafe"];     
  var MonadRec = function (__superclass_Prelude$dotMonad_0, tailRecM) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRecM2 = function (dictMonadRec) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return tailRecM(dictMonadRec)(function (o) {
                      return f(o.a)(o.b);
                  })({
                      a: a, 
                      b: b
                  });
              };
          };
      };
  };
  var tailRecM3 = function (dictMonadRec) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return function (c) {
                      return tailRecM(dictMonadRec)(function (o) {
                          return f(o.a)(o.b)(o.c);
                      })({
                          a: a, 
                          b: b, 
                          c: c
                      });
                  };
              };
          };
      };
  };
  var tailRecEff = function (f) {
      return function (a) {
          var f$prime = function ($18) {
              return Control_Monad_Eff_Unsafe.unsafeInterleaveEff(f($18));
          };
          return function __do() {
              var v = f$prime(a)();
              var v1 = {
                  value: v
              };
              (function () {
                  while (!(function __do() {
                      var v2 = v1.value;
                      if (v2 instanceof Data_Either.Left) {
                          var v3 = f$prime(v2.value0)();
                          v1.value = v3;
                          return false;
                      };
                      if (v2 instanceof Data_Either.Right) {
                          return true;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class line 75, column 1 - line 76, column 1: " + [ v2.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Either_Unsafe.fromRight)(Control_Monad_ST.readSTRef(v1))();
          };
      };
  };
  var tailRec = function (f) {
      return function (a) {
          var go = function (__copy_v) {
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Data_Either.Left) {
                      var __tco_v = f(v.value0);
                      v = __tco_v;
                      continue tco;
                  };
                  if (v instanceof Data_Either.Right) {
                      return v.value0;
                  };
                  throw new Error("Failed pattern match at Control.Monad.Rec.Class line 63, column 1 - line 64, column 1: " + [ v.constructor.name ]);
              };
          };
          return go(f(a));
      };
  };
  var monadRecIdentity = new MonadRec(function () {
      return Data_Identity.monadIdentity;
  }, function (f) {
      return function ($19) {
          return Data_Identity.Identity(tailRec(function ($20) {
              return Data_Identity.runIdentity(f($20));
          })($19));
      };
  });
  var monadRecEff = new MonadRec(function () {
      return Control_Monad_Eff.monadEff;
  }, tailRecEff);
  var forever = function (dictMonadRec) {
      return function (ma) {
          return tailRecM(dictMonadRec)(function (u) {
              return Data_Functor["<$"]((((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(new Data_Either.Left(u))(ma);
          })(Prelude.unit);
      };
  };
  exports["MonadRec"] = MonadRec;
  exports["forever"] = forever;
  exports["tailRecM3"] = tailRecM3;
  exports["tailRecM2"] = tailRecM2;
  exports["tailRecM"] = tailRecM;
  exports["tailRec"] = tailRec;
  exports["monadRecIdentity"] = monadRecIdentity;
  exports["monadRecEff"] = monadRecEff;;
 
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Tuple = PS["Data.Tuple"];     
  var MonadWriter = function (__superclass_Prelude$dotMonad_0, listen, pass, writer) {
      this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
      this.listen = listen;
      this.pass = pass;
      this.writer = writer;
  };
  var writer = function (dict) {
      return dict.writer;
  };
  var tell = function (dictMonoid) {
      return function (dictMonad) {
          return function (dictMonadWriter) {
              return function (w) {
                  return writer(dictMonadWriter)(new Data_Tuple.Tuple(Prelude.unit, w));
              };
          };
      };
  };
  var pass = function (dict) {
      return dict.pass;
  };
  var listen = function (dict) {
      return dict.listen;
  };
  var listens = function (dictMonoid) {
      return function (dictMonad) {
          return function (dictMonadWriter) {
              return function (f) {
                  return function (m) {
                      return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(listen(dictMonadWriter)(m))(function (v) {
                          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(v.value0, f(v.value1)));
                      });
                  };
              };
          };
      };
  };
  var censor = function (dictMonoid) {
      return function (dictMonad) {
          return function (dictMonadWriter) {
              return function (f) {
                  return function (m) {
                      return pass(dictMonadWriter)(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(m)(function (v) {
                          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(v, f));
                      }));
                  };
              };
          };
      };
  };
  exports["MonadWriter"] = MonadWriter;
  exports["censor"] = censor;
  exports["listens"] = listens;
  exports["tell"] = tell;
  exports["pass"] = pass;
  exports["listen"] = listen;
  exports["writer"] = writer;;
 
})(PS["Control.Monad.Writer.Class"] = PS["Control.Monad.Writer.Class"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];     
  var MonadRWS = function (__superclass_Control$dotMonad$dotReader$dotClass$dotMonadReader_1, __superclass_Control$dotMonad$dotState$dotClass$dotMonadState_3, __superclass_Control$dotMonad$dotWriter$dotClass$dotMonadWriter_2, __superclass_Data$dotMonoid$dotMonoid_0) {
      this["__superclass_Control.Monad.Reader.Class.MonadReader_1"] = __superclass_Control$dotMonad$dotReader$dotClass$dotMonadReader_1;
      this["__superclass_Control.Monad.State.Class.MonadState_3"] = __superclass_Control$dotMonad$dotState$dotClass$dotMonadState_3;
      this["__superclass_Control.Monad.Writer.Class.MonadWriter_2"] = __superclass_Control$dotMonad$dotWriter$dotClass$dotMonadWriter_2;
      this["__superclass_Data.Monoid.Monoid_0"] = __superclass_Data$dotMonoid$dotMonoid_0;
  };
  exports["MonadRWS"] = MonadRWS;;
 
})(PS["Control.Monad.RWS.Class"] = PS["Control.Monad.RWS.Class"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Either = PS["Data.Either"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_RWS_Class = PS["Control.Monad.RWS.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];     
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  };
  var withExceptT = function (dictFunctor) {
      return function (f) {
          var mapLeft = function (v) {
              return function (v1) {
                  if (v1 instanceof Data_Either.Right) {
                      return new Data_Either.Right(v1.value0);
                  };
                  if (v1 instanceof Data_Either.Left) {
                      return new Data_Either.Left(v(v1.value0));
                  };
                  throw new Error("Failed pattern match at Control.Monad.Except.Trans line 43, column 3 - line 44, column 3: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return function ($67) {
              return ExceptT(Prelude["<$>"](dictFunctor)(mapLeft(f))(runExceptT($67)));
          };
      };
  };
  var monadTransExceptT = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
      return function (m) {
          return ExceptT(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(m)(function (v) {
              return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Either.Right(v));
          }));
      };
  });
  var mapExceptT = function (f) {
      return function (m) {
          return f(runExceptT(m));
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Prelude.Functor(function (f) {
          return mapExceptT(Prelude["<$>"](dictFunctor)(Prelude["<$>"](Data_Either.functorEither)(f)));
      });
  };
  var applyExceptT = function (dictApply) {
      return new Prelude.Apply(function () {
          return functorExceptT(dictApply["__superclass_Prelude.Functor_0"]());
      }, function (v) {
          return function (v1) {
              var f$prime = Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Prelude["<*>"](Data_Either.applyEither))(v);
              var x$prime = Prelude["<*>"](dictApply)(f$prime)(v1);
              return x$prime;
          };
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Prelude.Bind(function () {
          return applyExceptT((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]());
      }, function (m) {
          return function (k) {
              return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(runExceptT(m))(Data_Either.either(function ($68) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Data_Either.Left.create($68));
              })(function ($69) {
                  return runExceptT(k($69));
              }));
          };
      });
  };
  var applicativeExceptT = function (dictApplicative) {
      return new Prelude.Applicative(function () {
          return applyExceptT(dictApplicative["__superclass_Prelude.Apply_0"]());
      }, function ($70) {
          return ExceptT(Prelude.pure(dictApplicative)(Data_Either.Right.create($70)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Prelude.Monad(function () {
          return applicativeExceptT(dictMonad["__superclass_Prelude.Applicative_0"]());
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var monadContExceptT = function (dictMonadCont) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadExceptT(dictMonadCont["__superclass_Prelude.Monad_0"]());
      }, function (f) {
          return ExceptT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
              return runExceptT(f(function (a) {
                  return ExceptT(c(new Data_Either.Right(a)));
              }));
          }));
      });
  };
  var monadEffExceptT = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadExceptT(dictMonadEff["__superclass_Prelude.Monad_0"]());
      }, function ($71) {
          return Control_Monad_Trans.lift(monadTransExceptT)(dictMonadEff["__superclass_Prelude.Monad_0"]())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($71));
      });
  };
  var monadErrorExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadExceptT(dictMonad);
      }, function (m) {
          return function (handler) {
              return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(runExceptT(m))(Data_Either.either(function ($72) {
                  return runExceptT(handler($72));
              })(function ($73) {
                  return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(Data_Either.Right.create($73));
              }));
          };
      }, function ($74) {
          return ExceptT(Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(Data_Either.Left.create($74)));
      });
  };
  var monadReaderExceptT = function (dictMonadReader) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadExceptT(dictMonadReader["__superclass_Prelude.Monad_0"]());
      }, Control_Monad_Trans.lift(monadTransExceptT)(dictMonadReader["__superclass_Prelude.Monad_0"]())(Control_Monad_Reader_Class.ask(dictMonadReader)), function (f) {
          return mapExceptT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
      });
  };
  var monadRecExceptT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadExceptT(dictMonadRec["__superclass_Prelude.Monad_0"]());
      }, function (f) {
          return function ($75) {
              return ExceptT(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (a) {
                  return Prelude.bind((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(runExceptT(f(a)))(function (v) {
                      return Prelude["return"]((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())((function () {
                          if (v instanceof Data_Either.Left) {
                              return new Data_Either.Right(new Data_Either.Left(v.value0));
                          };
                          if (v instanceof Data_Either.Right && v.value0 instanceof Data_Either.Left) {
                              return new Data_Either.Left(v.value0.value0);
                          };
                          if (v instanceof Data_Either.Right && v.value0 instanceof Data_Either.Right) {
                              return new Data_Either.Right(new Data_Either.Right(v.value0.value0));
                          };
                          throw new Error("Failed pattern match at Control.Monad.Except.Trans line 68, column 1 - line 76, column 1: " + [ v.constructor.name ]);
                      })());
                  });
              })($75));
          };
      });
  };
  var monadStateExceptT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadExceptT(dictMonadState["__superclass_Prelude.Monad_0"]());
      }, function (f) {
          return Control_Monad_Trans.lift(monadTransExceptT)(dictMonadState["__superclass_Prelude.Monad_0"]())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadWriterExceptT = function (dictMonadWriter) {
      return new Control_Monad_Writer_Class.MonadWriter(function () {
          return monadExceptT(dictMonadWriter["__superclass_Prelude.Monad_0"]());
      }, mapExceptT(function (m) {
          return Prelude.bind((dictMonadWriter["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function (v) {
              return Prelude["return"]((dictMonadWriter["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())(Prelude["<$>"](Data_Either.functorEither)(function (r) {
                  return new Data_Tuple.Tuple(r, v.value1);
              })(v.value0));
          });
      }), mapExceptT(function (m) {
          return Control_Monad_Writer_Class.pass(dictMonadWriter)(Prelude.bind((dictMonadWriter["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(m)(function (v) {
              return Prelude["return"]((dictMonadWriter["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())((function () {
                  if (v instanceof Data_Either.Left) {
                      return new Data_Tuple.Tuple(new Data_Either.Left(v.value0), Prelude.id(Prelude.categoryFn));
                  };
                  if (v instanceof Data_Either.Right) {
                      return new Data_Tuple.Tuple(new Data_Either.Right(v.value0.value0), v.value0.value1);
                  };
                  throw new Error("Failed pattern match at Control.Monad.Except.Trans line 116, column 1 - line 127, column 1: " + [ v.constructor.name ]);
              })());
          }));
      }), function (wd) {
          return Control_Monad_Trans.lift(monadTransExceptT)(dictMonadWriter["__superclass_Prelude.Monad_0"]())(Control_Monad_Writer_Class.writer(dictMonadWriter)(wd));
      });
  };
  var monadRWSExceptT = function (dictMonoid) {
      return function (dictMonadRWS) {
          return new Control_Monad_RWS_Class.MonadRWS(function () {
              return monadReaderExceptT(dictMonadRWS["__superclass_Control.Monad.Reader.Class.MonadReader_1"]());
          }, function () {
              return monadStateExceptT(dictMonadRWS["__superclass_Control.Monad.State.Class.MonadState_3"]());
          }, function () {
              return monadWriterExceptT(dictMonadRWS["__superclass_Control.Monad.Writer.Class.MonadWriter_2"]());
          }, function () {
              return dictMonoid;
          });
      };
  };
  var altExceptT = function (dictSemigroup) {
      return function (dictMonad) {
          return new Control_Alt.Alt(function () {
              return functorExceptT(((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
          }, function (m) {
              return function (n) {
                  return ExceptT(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(runExceptT(m))(function (v) {
                      if (v instanceof Data_Either.Right) {
                          return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Either.Right(v.value0));
                      };
                      if (v instanceof Data_Either.Left) {
                          return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(runExceptT(n))(function (v1) {
                              if (v1 instanceof Data_Either.Right) {
                                  return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Either.Right(v1.value0));
                              };
                              if (v1 instanceof Data_Either.Left) {
                                  return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Either.Left(Prelude["<>"](dictSemigroup)(v.value0)(v1.value0)));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Except.Trans line 76, column 1 - line 87, column 1: " + [ v1.constructor.name ]);
                          });
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans line 76, column 1 - line 87, column 1: " + [ v.constructor.name ]);
                  }));
              };
          });
      };
  };
  var plusExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Plus.Plus(function () {
              return altExceptT(dictMonoid["__superclass_Prelude.Semigroup_0"]())(dictMonad);
          }, Control_Monad_Error_Class.throwError(monadErrorExceptT(dictMonad))(Data_Monoid.mempty(dictMonoid)));
      };
  };
  var alternativeExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Alternative.Alternative(function () {
              return plusExceptT(dictMonoid)(dictMonad);
          }, function () {
              return applicativeExceptT(dictMonad["__superclass_Prelude.Applicative_0"]());
          });
      };
  };
  var monadPlusExceptT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_MonadPlus.MonadPlus(function () {
              return alternativeExceptT(dictMonoid)(dictMonad);
          }, function () {
              return monadExceptT(dictMonad);
          });
      };
  };
  exports["ExceptT"] = ExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["withExceptT"] = withExceptT;
  exports["runExceptT"] = runExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadRecExceptT"] = monadRecExceptT;
  exports["altExceptT"] = altExceptT;
  exports["plusExceptT"] = plusExceptT;
  exports["alternativeExceptT"] = alternativeExceptT;
  exports["monadPlusExceptT"] = monadPlusExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadEffExceptT"] = monadEffExceptT;
  exports["monadContExceptT"] = monadContExceptT;
  exports["monadErrorExceptT"] = monadErrorExceptT;
  exports["monadReaderExceptT"] = monadReaderExceptT;
  exports["monadStateExceptT"] = monadStateExceptT;
  exports["monadWriterExceptT"] = monadWriterExceptT;
  exports["monadRWSExceptT"] = monadRWSExceptT;;
 
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];     
  var withExcept = Control_Monad_Except_Trans.withExceptT(Data_Identity.functorIdentity);
  var runExcept = function ($0) {
      return Data_Identity.runIdentity(Control_Monad_Except_Trans.runExceptT($0));
  };
  var mapExcept = function (f) {
      return Control_Monad_Except_Trans.mapExceptT(function ($1) {
          return Data_Identity.Identity(f(Data_Identity.runIdentity($1)));
      });
  };
  var except = function ($2) {
      return Control_Monad_Except_Trans.ExceptT(Data_Identity.Identity($2));
  };
  exports["withExcept"] = withExcept;
  exports["mapExcept"] = mapExcept;
  exports["runExcept"] = runExcept;
  exports["except"] = except;;
 
})(PS["Control.Monad.Except"] = PS["Control.Monad.Except"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Lazy

  exports.defer = function () {

    function Defer (thunk) {
      if (this instanceof Defer) {
        this.thunk = thunk;
        return this;
      } else {
        return new Defer(thunk);
      }
    }

    Defer.prototype.force = function () {
      var value = this.thunk();
      delete this.thunk;
      this.force = function () {
        return value;
      };
      return value;
    };

    return Defer;

  }();

  exports.force = function (l) {
    return l.force();
  };
 
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Lazy"];
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Lazy = PS["Control.Lazy"];     
  var showLazy = function (dictShow) {
      return new Prelude.Show(function (x) {
          return "Lazy " + Prelude.show(dictShow)($foreign.force(x));
      });
  };
  var semiringLazy = function (dictSemiring) {
      return new Prelude.Semiring(function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Prelude["+"](dictSemiring)($foreign.force(a))($foreign.force(b));
              });
          };
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Prelude["*"](dictSemiring)($foreign.force(a))($foreign.force(b));
              });
          };
      }, $foreign.defer(function (v) {
          return Prelude.one(dictSemiring);
      }), $foreign.defer(function (v) {
          return Prelude.zero(dictSemiring);
      }));
  };
  var semigroupLazy = function (dictSemigroup) {
      return new Prelude.Semigroup(function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Prelude["<>"](dictSemigroup)($foreign.force(a))($foreign.force(b));
              });
          };
      });
  };
  var ringLazy = function (dictRing) {
      return new Prelude.Ring(function () {
          return semiringLazy(dictRing["__superclass_Prelude.Semiring_0"]());
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Prelude["-"](dictRing)($foreign.force(a))($foreign.force(b));
              });
          };
      });
  };
  var monoidLazy = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupLazy(dictMonoid["__superclass_Prelude.Semigroup_0"]());
      }, $foreign.defer(function (v) {
          return Data_Monoid.mempty(dictMonoid);
      }));
  };
  var moduloSemiringLazy = function (dictModuloSemiring) {
      return new Prelude.ModuloSemiring(function () {
          return semiringLazy(dictModuloSemiring["__superclass_Prelude.Semiring_0"]());
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Prelude["/"](dictModuloSemiring)($foreign.force(a))($foreign.force(b));
              });
          };
      }, function (a) {
          return function (b) {
              return $foreign.defer(function (v) {
                  return Prelude.mod(dictModuloSemiring)($foreign.force(a))($foreign.force(b));
              });
          };
      });
  };
  var lazyLazy = new Control_Lazy.Lazy(function (f) {
      return $foreign.defer(function (v) {
          return $foreign.force(f(Prelude.unit));
      });
  });
  var functorLazy = new Prelude.Functor(function (f) {
      return function (l) {
          return $foreign.defer(function (v) {
              return f($foreign.force(l));
          });
      };
  });
  var extendLazy = new Control_Extend.Extend(function () {
      return functorLazy;
  }, function (f) {
      return function (x) {
          return $foreign.defer(function (v) {
              return f(x);
          });
      };
  });
  var eqLazy = function (dictEq) {
      return new Prelude.Eq(function (x) {
          return function (y) {
              return Prelude["=="](dictEq)($foreign.force(x))($foreign.force(y));
          };
      });
  };
  var ordLazy = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqLazy(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (x) {
          return function (y) {
              return Prelude.compare(dictOrd)($foreign.force(x))($foreign.force(y));
          };
      });
  };
  var divisionRingLazy = function (dictDivisionRing) {
      return new Prelude.DivisionRing(function () {
          return moduloSemiringLazy(dictDivisionRing["__superclass_Prelude.ModuloSemiring_1"]());
      }, function () {
          return ringLazy(dictDivisionRing["__superclass_Prelude.Ring_0"]());
      });
  };
  var numLazy = function (dictNum) {
      return new Prelude.Num(function () {
          return divisionRingLazy(dictNum["__superclass_Prelude.DivisionRing_0"]());
      });
  };
  var comonadLazy = new Control_Comonad.Comonad(function () {
      return extendLazy;
  }, $foreign.force);
  var boundedLazy = function (dictBounded) {
      return new Prelude.Bounded($foreign.defer(function (v) {
          return Prelude.bottom(dictBounded);
      }), $foreign.defer(function (v) {
          return Prelude.top(dictBounded);
      }));
  };
  var boundedOrdLazy = function (dictBoundedOrd) {
      return new Prelude.BoundedOrd(function () {
          return boundedLazy(dictBoundedOrd["__superclass_Prelude.Bounded_0"]());
      }, function () {
          return ordLazy(dictBoundedOrd["__superclass_Prelude.Ord_1"]());
      });
  };
  var applyLazy = new Prelude.Apply(function () {
      return functorLazy;
  }, function (f) {
      return function (x) {
          return $foreign.defer(function (v) {
              return $foreign.force(f)($foreign.force(x));
          });
      };
  });
  var bindLazy = new Prelude.Bind(function () {
      return applyLazy;
  }, function (l) {
      return function (f) {
          return $foreign.defer(function (v) {
              return $foreign.force(f($foreign.force(l)));
          });
      };
  });
  var booleanAlgebraLazy = function (dictBooleanAlgebra) {
      return new Prelude.BooleanAlgebra(function () {
          return boundedLazy(dictBooleanAlgebra["__superclass_Prelude.Bounded_0"]());
      }, function (a) {
          return function (b) {
              return Prelude["<*>"](applyLazy)(Prelude["<$>"](functorLazy)(Prelude.conj(dictBooleanAlgebra))(a))(b);
          };
      }, function (a) {
          return function (b) {
              return Prelude["<*>"](applyLazy)(Prelude["<$>"](functorLazy)(Prelude.disj(dictBooleanAlgebra))(a))(b);
          };
      }, function (a) {
          return Prelude["<$>"](functorLazy)(Prelude.not(dictBooleanAlgebra))(a);
      });
  };
  var applicativeLazy = new Prelude.Applicative(function () {
      return applyLazy;
  }, function (a) {
      return $foreign.defer(function (v) {
          return a;
      });
  });
  var monadLazy = new Prelude.Monad(function () {
      return applicativeLazy;
  }, function () {
      return bindLazy;
  });
  exports["semiringLazy"] = semiringLazy;
  exports["ringLazy"] = ringLazy;
  exports["moduloSemiringLazy"] = moduloSemiringLazy;
  exports["divisionRingLazy"] = divisionRingLazy;
  exports["numLazy"] = numLazy;
  exports["eqLazy"] = eqLazy;
  exports["ordLazy"] = ordLazy;
  exports["boundedLazy"] = boundedLazy;
  exports["boundedOrdLazy"] = boundedOrdLazy;
  exports["semigroupLazy"] = semigroupLazy;
  exports["monoidLazy"] = monoidLazy;
  exports["booleanAlgebraLazy"] = booleanAlgebraLazy;
  exports["functorLazy"] = functorLazy;
  exports["applyLazy"] = applyLazy;
  exports["applicativeLazy"] = applicativeLazy;
  exports["bindLazy"] = bindLazy;
  exports["monadLazy"] = monadLazy;
  exports["extendLazy"] = extendLazy;
  exports["comonadLazy"] = comonadLazy;
  exports["showLazy"] = showLazy;
  exports["lazyLazy"] = lazyLazy;
  exports["force"] = $foreign.force;
  exports["defer"] = $foreign.defer;;
 
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var Yield = (function () {
      function Yield(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Yield.create = function (value0) {
          return function (value1) {
              return new Yield(value0, value1);
          };
      };
      return Yield;
  })();
  var Skip = (function () {
      function Skip(value0) {
          this.value0 = value0;
      };
      Skip.create = function (value0) {
          return new Skip(value0);
      };
      return Skip;
  })();
  var Done = (function () {
      function Done() {

      };
      Done.value = new Done();
      return Done;
  })();
  var ListT = (function () {
      function ListT(value0) {
          this.value0 = value0;
      };
      ListT.create = function (value0) {
          return new ListT(value0);
      };
      return ListT;
  })();
  var wrapLazy = function (dictApplicative) {
      return function (v) {
          return ListT.create(Prelude.pure(dictApplicative)(new Skip(v)));
      };
  };
  var wrapEffect = function (dictFunctor) {
      return function (v) {
          return ListT.create(Prelude["<$>"](dictFunctor)(function ($159) {
              return Skip.create(Data_Lazy.defer(Prelude["const"]($159)));
          })(v));
      };
  };
  var unfold = function (dictMonad) {
      return function (f) {
          return function (z) {
              var g = function (v) {
                  if (v instanceof Data_Maybe.Just) {
                      return new Yield(v.value0.value1, Data_Lazy.defer(function (v1) {
                          return unfold(dictMonad)(f)(v.value0.value0);
                      }));
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 118, column 3 - line 119, column 3: " + [ v.constructor.name ]);
              };
              return ListT.create(Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(g)(f(z)));
          };
      };
  };
  var runListT = function (v) {
      return v.value0;
  };
  var scanl = function (dictMonad) {
      return function (f) {
          return function (b) {
              return function (l) {
                  var g = function (v) {
                      var h = function (v1) {
                          if (v1 instanceof Yield) {
                              var b$prime = f(v.value0)(v1.value0);
                              return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(b$prime, Data_Lazy.force(v1.value1)), b$prime));
                          };
                          if (v1 instanceof Skip) {
                              return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0, Data_Lazy.force(v1.value0)), v.value0));
                          };
                          if (v1 instanceof Done) {
                              return Data_Maybe.Nothing.value;
                          };
                          throw new Error("Failed pattern match at Control.Monad.List.Trans line 217, column 5 - line 219, column 5: " + [ v1.constructor.name ]);
                      };
                      return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(h)(runListT(v.value1));
                  };
                  return unfold(dictMonad)(g)(new Data_Tuple.Tuple(b, l));
              };
          };
      };
  };
  var stepMap = function (dictFunctor) {
      return function (f) {
          return function (l) {
              return ListT.create(Prelude["<$>"](dictFunctor)(f)(runListT(l)));
          };
      };
  };
  var takeWhile = function (dictApplicative) {
      return function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  var $88 = f(v.value0);
                  if ($88) {
                      return new Yield(v.value0, Prelude["<$>"](Data_Lazy.functorLazy)(takeWhile(dictApplicative)(f))(v.value1));
                  };
                  if (!$88) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 142, column 3 - line 143, column 3: " + [ $88.constructor.name ]);
              };
              if (v instanceof Skip) {
                  return Skip.create(Prelude["<$>"](Data_Lazy.functorLazy)(takeWhile(dictApplicative)(f))(v.value0));
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 142, column 3 - line 143, column 3: " + [ v.constructor.name ]);
          };
          return stepMap((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(g);
      };
  };
  var uncons = function (dictMonad) {
      return function (l) {
          var g = function (v) {
              if (v instanceof Yield) {
                  return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(Data_Maybe.Just.create(new Data_Tuple.Tuple(v.value0, Data_Lazy.force(v.value1))));
              };
              if (v instanceof Skip) {
                  return uncons(dictMonad)(Data_Lazy.force(v.value0));
              };
              if (v instanceof Done) {
                  return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(Data_Maybe.Nothing.value);
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 183, column 3 - line 184, column 3: " + [ v.constructor.name ]);
          };
          return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(runListT(l))(g);
      };
  };
  var tail = function (dictMonad) {
      return function (l) {
          return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Tuple.snd))(uncons(dictMonad)(l));
      };
  };
  var prepend$prime = function (dictApplicative) {
      return function (h) {
          return function (t) {
              return ListT.create(Prelude.pure(dictApplicative)(new Yield(h, t)));
          };
      };
  };
  var prepend = function (dictApplicative) {
      return function (h) {
          return function (t) {
              return prepend$prime(dictApplicative)(h)(Data_Lazy.defer(Prelude["const"](t)));
          };
      };
  };
  var nil = function (dictApplicative) {
      return ListT.create(Prelude.pure(dictApplicative)(Done.value));
  };
  var singleton = function (dictApplicative) {
      return function (a) {
          return prepend(dictApplicative)(a)(nil(dictApplicative));
      };
  };
  var take = function (dictApplicative) {
      return function (v) {
          return function (fa) {
              if (v === 0) {
                  return nil(dictApplicative);
              };
              var f = function (v1) {
                  if (v1 instanceof Yield) {
                      return new Yield(v1.value0, Prelude["<$>"](Data_Lazy.functorLazy)(take(dictApplicative)(v - 1))(v1.value1));
                  };
                  if (v1 instanceof Skip) {
                      return new Skip(Prelude["<$>"](Data_Lazy.functorLazy)(take(dictApplicative)(v))(v1.value0));
                  };
                  if (v1 instanceof Done) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 135, column 3 - line 136, column 3: " + [ v1.constructor.name ]);
              };
              return stepMap((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(f)(fa);
          };
      };
  };
  var zipWith$prime = function (dictMonad) {
      return function (f) {
          var g = function (v) {
              return function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(nil(dictMonad["__superclass_Prelude.Applicative_0"]()));
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(nil(dictMonad["__superclass_Prelude.Applicative_0"]()));
                  };
                  if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                      return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude.flip(prepend$prime(dictMonad["__superclass_Prelude.Applicative_0"]()))(Data_Lazy.defer(function (v2) {
                          return zipWith$prime(dictMonad)(f)(v.value0.value1)(v1.value0.value1);
                      })))(f(v.value0.value0)(v1.value0.value0));
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 225, column 3 - line 230, column 3: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          var loop = function (fa) {
              return function (fb) {
                  return wrapEffect(((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(uncons(dictMonad)(fa))(function (v) {
                      return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(uncons(dictMonad)(fb))(function (v1) {
                          return g(v)(v1);
                      });
                  }));
              };
          };
          return loop;
      };
  };
  var zipWith = function (dictMonad) {
      return function (f) {
          var g = function (a) {
              return function (b) {
                  return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(f(a)(b));
              };
          };
          return zipWith$prime(dictMonad)(g);
      };
  };
  var mapMaybe = function (dictFunctor) {
      return function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  return Data_Maybe.fromMaybe(Skip.create)(Prelude["<$>"](Data_Maybe.functorMaybe)(Yield.create)(f(v.value0)))(Prelude["<$>"](Data_Lazy.functorLazy)(mapMaybe(dictFunctor)(f))(v.value1));
              };
              if (v instanceof Skip) {
                  return Skip.create(Prelude["<$>"](Data_Lazy.functorLazy)(mapMaybe(dictFunctor)(f))(v.value0));
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 171, column 3 - line 172, column 3: " + [ v.constructor.name ]);
          };
          return stepMap(dictFunctor)(g);
      };
  };
  var iterate = function (dictMonad) {
      return function (f) {
          return function (a) {
              var g = function (a1) {
                  return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Maybe.Just(new Data_Tuple.Tuple(f(a1), a1)));
              };
              return unfold(dictMonad)(g)(a);
          };
      };
  };
  var repeat = function (dictMonad) {
      return iterate(dictMonad)(Prelude.id(Prelude.categoryFn));
  };
  var head = function (dictMonad) {
      return function (l) {
          return Prelude["<$>"](((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Tuple.fst))(uncons(dictMonad)(l));
      };
  };
  var functorListT = function (dictFunctor) {
      return new Prelude.Functor(function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  return new Yield(f(v.value0), Prelude["<$>"](Data_Lazy.functorLazy)(Prelude["<$>"](functorListT(dictFunctor))(f))(v.value1));
              };
              if (v instanceof Skip) {
                  return new Skip(Prelude["<$>"](Data_Lazy.functorLazy)(Prelude["<$>"](functorListT(dictFunctor))(f))(v.value0));
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 248, column 5 - line 249, column 5: " + [ v.constructor.name ]);
          };
          return stepMap(dictFunctor)(g);
      });
  };
  var fromEffect = function (dictApplicative) {
      return function (fa) {
          return ListT.create(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(function (v) {
              return new Yield(v, Data_Lazy.defer(function (v1) {
                  return nil(dictApplicative);
              }));
          })(fa));
      };
  };
  var monadTransListT = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
      return fromEffect(dictMonad["__superclass_Prelude.Applicative_0"]());
  });
  var foldl$prime = function (dictMonad) {
      return function (f) {
          var loop = function (b) {
              return function (l) {
                  var g = function (v) {
                      if (v instanceof Data_Maybe.Nothing) {
                          return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(b);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(f(b)(v.value0.value0))(Prelude.flip(loop)(v.value0.value1));
                      };
                      throw new Error("Failed pattern match at Control.Monad.List.Trans line 200, column 5 - line 201, column 5: " + [ v.constructor.name ]);
                  };
                  return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(uncons(dictMonad)(l))(g);
              };
          };
          return loop;
      };
  };
  var foldl = function (dictMonad) {
      return function (f) {
          var loop = function (b) {
              return function (l) {
                  var g = function (v) {
                      if (v instanceof Data_Maybe.Nothing) {
                          return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(b);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return loop(f(b)(v.value0.value0))(v.value0.value1);
                      };
                      throw new Error("Failed pattern match at Control.Monad.List.Trans line 208, column 5 - line 209, column 5: " + [ v.constructor.name ]);
                  };
                  return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(uncons(dictMonad)(l))(g);
              };
          };
          return loop;
      };
  };
  var filter = function (dictFunctor) {
      return function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  var s$prime = Prelude["<$>"](Data_Lazy.functorLazy)(filter(dictFunctor)(f))(v.value1);
                  var $131 = f(v.value0);
                  if ($131) {
                      return new Yield(v.value0, s$prime);
                  };
                  if (!$131) {
                      return new Skip(s$prime);
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 164, column 3 - line 165, column 3: " + [ $131.constructor.name ]);
              };
              if (v instanceof Skip) {
                  var s$prime = Prelude["<$>"](Data_Lazy.functorLazy)(filter(dictFunctor)(f))(v.value0);
                  return new Skip(s$prime);
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 164, column 3 - line 165, column 3: " + [ v.constructor.name ]);
          };
          return stepMap(dictFunctor)(g);
      };
  };
  var dropWhile = function (dictApplicative) {
      return function (f) {
          var g = function (v) {
              if (v instanceof Yield) {
                  var $136 = f(v.value0);
                  if ($136) {
                      return new Skip(Prelude["<$>"](Data_Lazy.functorLazy)(dropWhile(dictApplicative)(f))(v.value1));
                  };
                  if (!$136) {
                      return new Yield(v.value0, v.value1);
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 157, column 3 - line 158, column 3: " + [ $136.constructor.name ]);
              };
              if (v instanceof Skip) {
                  return Skip.create(Prelude["<$>"](Data_Lazy.functorLazy)(dropWhile(dictApplicative)(f))(v.value0));
              };
              if (v instanceof Done) {
                  return Done.value;
              };
              throw new Error("Failed pattern match at Control.Monad.List.Trans line 157, column 3 - line 158, column 3: " + [ v.constructor.name ]);
          };
          return stepMap((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(g);
      };
  };
  var drop = function (dictApplicative) {
      return function (v) {
          return function (fa) {
              if (v === 0) {
                  return fa;
              };
              var f = function (v1) {
                  if (v1 instanceof Yield) {
                      return new Skip(Prelude["<$>"](Data_Lazy.functorLazy)(drop(dictApplicative)(v - 1))(v1.value1));
                  };
                  if (v1 instanceof Skip) {
                      return new Skip(Prelude["<$>"](Data_Lazy.functorLazy)(drop(dictApplicative)(v))(v1.value0));
                  };
                  if (v1 instanceof Done) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 150, column 3 - line 151, column 3: " + [ v1.constructor.name ]);
              };
              return stepMap((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(f)(fa);
          };
      };
  };
  var cons = function (dictApplicative) {
      return function (lh) {
          return function (t) {
              return ListT.create(Prelude.pure(dictApplicative)(new Yield(Data_Lazy.force(lh), t)));
          };
      };
  };
  var unfoldableListT = function (dictMonad) {
      return new Data_Unfoldable.Unfoldable(function (f) {
          return function (b) {
              var go = function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return nil(dictMonad["__superclass_Prelude.Applicative_0"]());
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return cons(dictMonad["__superclass_Prelude.Applicative_0"]())(Prelude.pure(Data_Lazy.applicativeLazy)(v.value0.value0))(Data_Lazy.defer(function (v1) {
                          return go(f(v.value0.value1));
                      }));
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 252, column 1 - line 257, column 1: " + [ v.constructor.name ]);
              };
              return go(f(b));
          };
      });
  };
  var semigroupListT = function (dictApplicative) {
      return new Prelude.Semigroup(concat(dictApplicative));
  };
  var concat = function (dictApplicative) {
      return function (x) {
          return function (y) {
              var f = function (v) {
                  if (v instanceof Yield) {
                      return new Yield(v.value0, Prelude["<$>"](Data_Lazy.functorLazy)(function (v1) {
                          return Prelude["<>"](semigroupListT(dictApplicative))(v1)(y);
                      })(v.value1));
                  };
                  if (v instanceof Skip) {
                      return new Skip(Prelude["<$>"](Data_Lazy.functorLazy)(function (v1) {
                          return Prelude["<>"](semigroupListT(dictApplicative))(v1)(y);
                      })(v.value0));
                  };
                  if (v instanceof Done) {
                      return new Skip(Data_Lazy.defer(Prelude["const"](y)));
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 94, column 3 - line 95, column 3: " + [ v.constructor.name ]);
              };
              return stepMap((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(f)(x);
          };
      };
  };
  var monoidListT = function (dictApplicative) {
      return new Data_Monoid.Monoid(function () {
          return semigroupListT(dictApplicative);
      }, nil(dictApplicative));
  };
  var catMaybes = function (dictFunctor) {
      return mapMaybe(dictFunctor)(Prelude.id(Prelude.categoryFn));
  };
  var monadListT = function (dictMonad) {
      return new Prelude.Monad(function () {
          return applicativeListT(dictMonad);
      }, function () {
          return bindListT(dictMonad);
      });
  };
  var bindListT = function (dictMonad) {
      return new Prelude.Bind(function () {
          return applyListT(dictMonad);
      }, function (fa) {
          return function (f) {
              var g = function (v) {
                  if (v instanceof Yield) {
                      var h = function (s1) {
                          return Prelude["<>"](semigroupListT(dictMonad["__superclass_Prelude.Applicative_0"]()))(f(v.value0))(Prelude[">>="](bindListT(dictMonad))(s1)(f));
                      };
                      return new Skip(Prelude["<$>"](Data_Lazy.functorLazy)(h)(v.value1));
                  };
                  if (v instanceof Skip) {
                      return new Skip(Prelude["<$>"](Data_Lazy.functorLazy)(function (v1) {
                          return Prelude[">>="](bindListT(dictMonad))(v1)(f);
                      })(v.value0));
                  };
                  if (v instanceof Done) {
                      return Done.value;
                  };
                  throw new Error("Failed pattern match at Control.Monad.List.Trans line 265, column 5 - line 268, column 5: " + [ v.constructor.name ]);
              };
              return stepMap(((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(g)(fa);
          };
      });
  };
  var applyListT = function (dictMonad) {
      return new Prelude.Apply(function () {
          return functorListT(((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
      }, Prelude.ap(monadListT(dictMonad)));
  };
  var applicativeListT = function (dictMonad) {
      return new Prelude.Applicative(function () {
          return applyListT(dictMonad);
      }, singleton(dictMonad["__superclass_Prelude.Applicative_0"]()));
  };
  var monadEffListT = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadListT(dictMonadEff["__superclass_Prelude.Monad_0"]());
      }, function ($160) {
          return Control_Monad_Trans.lift(monadTransListT)(dictMonadEff["__superclass_Prelude.Monad_0"]())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($160));
      });
  };
  var altListT = function (dictApplicative) {
      return new Control_Alt.Alt(function () {
          return functorListT((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
      }, concat(dictApplicative));
  };
  var plusListT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altListT(dictMonad["__superclass_Prelude.Applicative_0"]());
      }, nil(dictMonad["__superclass_Prelude.Applicative_0"]()));
  };
  var alternativeListT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return plusListT(dictMonad);
      }, function () {
          return applicativeListT(dictMonad);
      });
  };
  var monadPlusListT = function (dictMonad) {
      return new Control_MonadPlus.MonadPlus(function () {
          return alternativeListT(dictMonad);
      }, function () {
          return monadListT(dictMonad);
      });
  };
  exports["zipWith'"] = zipWith$prime;
  exports["zipWith"] = zipWith;
  exports["wrapLazy"] = wrapLazy;
  exports["wrapEffect"] = wrapEffect;
  exports["unfold"] = unfold;
  exports["uncons"] = uncons;
  exports["takeWhile"] = takeWhile;
  exports["take"] = take;
  exports["tail"] = tail;
  exports["singleton"] = singleton;
  exports["scanl"] = scanl;
  exports["repeat"] = repeat;
  exports["prepend'"] = prepend$prime;
  exports["prepend"] = prepend;
  exports["nil"] = nil;
  exports["mapMaybe"] = mapMaybe;
  exports["iterate"] = iterate;
  exports["head"] = head;
  exports["fromEffect"] = fromEffect;
  exports["foldl'"] = foldl$prime;
  exports["foldl"] = foldl;
  exports["filter"] = filter;
  exports["dropWhile"] = dropWhile;
  exports["drop"] = drop;
  exports["cons"] = cons;
  exports["catMaybes"] = catMaybes;
  exports["semigroupListT"] = semigroupListT;
  exports["monoidListT"] = monoidListT;
  exports["functorListT"] = functorListT;
  exports["unfoldableListT"] = unfoldableListT;
  exports["applyListT"] = applyListT;
  exports["applicativeListT"] = applicativeListT;
  exports["bindListT"] = bindListT;
  exports["monadListT"] = monadListT;
  exports["monadTransListT"] = monadTransListT;
  exports["altListT"] = altListT;
  exports["plusListT"] = plusListT;
  exports["alternativeListT"] = alternativeListT;
  exports["monadPlusListT"] = monadPlusListT;
  exports["monadEffListT"] = monadEffListT;;
 
})(PS["Control.Monad.List.Trans"] = PS["Control.Monad.List.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_RWS_Class = PS["Control.Monad.RWS.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];     
  var MaybeT = function (x) {
      return x;
  };
  var runMaybeT = function (v) {
      return v;
  };
  var monadTransMaybeT = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
      return function ($46) {
          return MaybeT(Prelude.liftM1(dictMonad)(Data_Maybe.Just.create)($46));
      };
  });
  var mapMaybeT = function (f) {
      return function ($47) {
          return MaybeT(f(runMaybeT($47)));
      };
  };
  var monadMaybeT = function (dictMonad) {
      return new Prelude.Monad(function () {
          return applicativeMaybeT(dictMonad);
      }, function () {
          return bindMaybeT(dictMonad);
      });
  };
  var functorMaybeT = function (dictMonad) {
      return new Prelude.Functor(Prelude.liftA1(applicativeMaybeT(dictMonad)));
  };
  var bindMaybeT = function (dictMonad) {
      return new Prelude.Bind(function () {
          return applyMaybeT(dictMonad);
      }, function (x) {
          return function (f) {
              return MaybeT(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(runMaybeT(x))(function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Data_Maybe.Nothing.value);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return runMaybeT(f(v.value0));
                  };
                  throw new Error("Failed pattern match: " + [ v.constructor.name ]);
              }));
          };
      });
  };
  var applyMaybeT = function (dictMonad) {
      return new Prelude.Apply(function () {
          return functorMaybeT(dictMonad);
      }, Prelude.ap(monadMaybeT(dictMonad)));
  };
  var applicativeMaybeT = function (dictMonad) {
      return new Prelude.Applicative(function () {
          return applyMaybeT(dictMonad);
      }, function ($48) {
          return MaybeT(Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(Data_Maybe.Just.create($48)));
      });
  };
  var monadContMaybeT = function (dictMonadCont) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadMaybeT(dictMonadCont["__superclass_Prelude.Monad_0"]());
      }, function (f) {
          return MaybeT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
              return runMaybeT(f(function (a) {
                  return MaybeT(c(new Data_Maybe.Just(a)));
              }));
          }));
      });
  };
  var monadEffMaybe = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadMaybeT(dictMonadEff["__superclass_Prelude.Monad_0"]());
      }, function ($49) {
          return Control_Monad_Trans.lift(monadTransMaybeT)(dictMonadEff["__superclass_Prelude.Monad_0"]())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($49));
      });
  };
  var monadErrorMaybeT = function (dictMonadError) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadMaybeT(dictMonadError["__superclass_Prelude.Monad_0"]());
      }, function (m) {
          return function (h) {
              return MaybeT(Control_Monad_Error_Class.catchError(dictMonadError)(runMaybeT(m))(function ($50) {
                  return runMaybeT(h($50));
              }));
          };
      }, function (e) {
          return Control_Monad_Trans.lift(monadTransMaybeT)(dictMonadError["__superclass_Prelude.Monad_0"]())(Control_Monad_Error_Class.throwError(dictMonadError)(e));
      });
  };
  var monadReaderMaybeT = function (dictMonadReader) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadMaybeT(dictMonadReader["__superclass_Prelude.Monad_0"]());
      }, Control_Monad_Trans.lift(monadTransMaybeT)(dictMonadReader["__superclass_Prelude.Monad_0"]())(Control_Monad_Reader_Class.ask(dictMonadReader)), function (f) {
          return mapMaybeT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
      });
  };
  var monadRecMaybeT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadMaybeT(dictMonadRec["__superclass_Prelude.Monad_0"]());
      }, function (f) {
          return function ($51) {
              return MaybeT(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function (a) {
                  return Prelude.bind((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(runMaybeT(f(a)))(function (v) {
                      return Prelude["return"]((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())((function () {
                          if (v instanceof Data_Maybe.Nothing) {
                              return new Data_Either.Right(Data_Maybe.Nothing.value);
                          };
                          if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Either.Left) {
                              return new Data_Either.Left(v.value0.value0);
                          };
                          if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Either.Right) {
                              return new Data_Either.Right(new Data_Maybe.Just(v.value0.value0));
                          };
                          throw new Error("Failed pattern match at Control.Monad.Maybe.Trans line 78, column 1 - line 86, column 1: " + [ v.constructor.name ]);
                      })());
                  });
              })($51));
          };
      });
  };
  var monadStateMaybeT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadMaybeT(dictMonadState["__superclass_Prelude.Monad_0"]());
      }, function (f) {
          return Control_Monad_Trans.lift(monadTransMaybeT)(dictMonadState["__superclass_Prelude.Monad_0"]())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadWriterMaybeT = function (dictMonad) {
      return function (dictMonadWriter) {
          return new Control_Monad_Writer_Class.MonadWriter(function () {
              return monadMaybeT(dictMonad);
          }, mapMaybeT(function (m) {
              return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function (v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(Prelude["<$>"](Data_Maybe.functorMaybe)(function (r) {
                      return new Data_Tuple.Tuple(r, v.value1);
                  })(v.value0));
              });
          }), mapMaybeT(function (m) {
              return Control_Monad_Writer_Class.pass(dictMonadWriter)(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(m)(function (v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())((function () {
                      if (v instanceof Data_Maybe.Nothing) {
                          return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Prelude.id(Prelude.categoryFn));
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return new Data_Tuple.Tuple(new Data_Maybe.Just(v.value0.value0), v.value0.value1);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Maybe.Trans line 103, column 1 - line 114, column 1: " + [ v.constructor.name ]);
                  })());
              }));
          }), function (wd) {
              return Control_Monad_Trans.lift(monadTransMaybeT)(dictMonad)(Control_Monad_Writer_Class.writer(dictMonadWriter)(wd));
          });
      };
  };
  var monadRWSMaybeT = function (dictMonoid) {
      return function (dictMonadRWS) {
          return new Control_Monad_RWS_Class.MonadRWS(function () {
              return monadReaderMaybeT(dictMonadRWS["__superclass_Control.Monad.Reader.Class.MonadReader_1"]());
          }, function () {
              return monadStateMaybeT(dictMonadRWS["__superclass_Control.Monad.State.Class.MonadState_3"]());
          }, function () {
              return monadWriterMaybeT((dictMonadRWS["__superclass_Control.Monad.State.Class.MonadState_3"]())["__superclass_Prelude.Monad_0"]())(dictMonadRWS["__superclass_Control.Monad.Writer.Class.MonadWriter_2"]());
          }, function () {
              return dictMonoid;
          });
      };
  };
  var altMaybeT = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return functorMaybeT(dictMonad);
      }, function (m1) {
          return function (m2) {
              return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(runMaybeT(m1))(function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return runMaybeT(m2);
                  };
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(v);
              });
          };
      });
  };
  var plusMaybeT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altMaybeT(dictMonad);
      }, Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(Data_Maybe.Nothing.value));
  };
  var alternativeMaybeT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return plusMaybeT(dictMonad);
      }, function () {
          return applicativeMaybeT(dictMonad);
      });
  };
  var monadPlusMaybeT = function (dictMonad) {
      return new Control_MonadPlus.MonadPlus(function () {
          return alternativeMaybeT(dictMonad);
      }, function () {
          return monadMaybeT(dictMonad);
      });
  };
  exports["MaybeT"] = MaybeT;
  exports["mapMaybeT"] = mapMaybeT;
  exports["runMaybeT"] = runMaybeT;
  exports["functorMaybeT"] = functorMaybeT;
  exports["applyMaybeT"] = applyMaybeT;
  exports["applicativeMaybeT"] = applicativeMaybeT;
  exports["bindMaybeT"] = bindMaybeT;
  exports["monadMaybeT"] = monadMaybeT;
  exports["monadTransMaybeT"] = monadTransMaybeT;
  exports["altMaybeT"] = altMaybeT;
  exports["plusMaybeT"] = plusMaybeT;
  exports["alternativeMaybeT"] = alternativeMaybeT;
  exports["monadPlusMaybeT"] = monadPlusMaybeT;
  exports["monadRecMaybeT"] = monadRecMaybeT;
  exports["monadEffMaybe"] = monadEffMaybe;
  exports["monadContMaybeT"] = monadContMaybeT;
  exports["monadErrorMaybeT"] = monadErrorMaybeT;
  exports["monadReaderMaybeT"] = monadReaderMaybeT;
  exports["monadStateMaybeT"] = monadStateMaybeT;
  exports["monadWriterMaybeT"] = monadWriterMaybeT;
  exports["monadRWSMaybeT"] = monadRWSMaybeT;;
 
})(PS["Control.Monad.Maybe.Trans"] = PS["Control.Monad.Maybe.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_RWS_Class = PS["Control.Monad.RWS.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];     
  var RWSResult = (function () {
      function RWSResult(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RWSResult.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RWSResult(value0, value1, value2);
              };
          };
      };
      return RWSResult;
  })();
  var RWST = function (x) {
      return x;
  };
  var runRWST = function (v) {
      return v;
  };
  var withRWST = function (f) {
      return function (m) {
          return function (r) {
              return function (s) {
                  return Data_Tuple.uncurry(runRWST(m))(f(r)(s));
              };
          };
      };
  };
  var monadTransRWST = function (dictMonoid) {
      return new Control_Monad_Trans.MonadTrans(function (dictMonad) {
          return function (m) {
              return function (v) {
                  return function (s) {
                      return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(m)(function (a) {
                          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                      });
                  };
              };
          };
      });
  };
  var mapRWST = function (f) {
      return function (m) {
          return function (r) {
              return function (s) {
                  return f(runRWST(m)(r)(s));
              };
          };
      };
  };
  var functorRWST = function (dictFunctor) {
      return function (dictMonoid) {
          return new Prelude.Functor(function (f) {
              return function (m) {
                  return function (r) {
                      return function (s) {
                          return Prelude["<$>"](dictFunctor)(function (v) {
                              return new RWSResult(v.value0, f(v.value1), v.value2);
                          })(runRWST(m)(r)(s));
                      };
                  };
              };
          });
      };
  };
  var execRWST = function (dictMonad) {
      return function (m) {
          return function (r) {
              return function (s) {
                  return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(runRWST(m)(r)(s))(function (v) {
                      return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(v.value0, v.value2));
                  });
              };
          };
      };
  };
  var evalRWST = function (dictMonad) {
      return function (m) {
          return function (r) {
              return function (s) {
                  return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(runRWST(m)(r)(s))(function (v) {
                      return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(v.value1, v.value2));
                  });
              };
          };
      };
  };
  var applyRWST = function (dictBind) {
      return function (dictMonoid) {
          return new Prelude.Apply(function () {
              return functorRWST((dictBind["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(dictMonoid);
          }, function (f) {
              return function (m) {
                  return function (r) {
                      return function (s) {
                          return Prelude[">>="](dictBind)(runRWST(f)(r)(s))(function (v) {
                              return Prelude["<#>"]((dictBind["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(runRWST(m)(r)(v.value0))(function (v1) {
                                  return new RWSResult(v1.value0, v.value1(v1.value1), Prelude["++"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(v.value2)(v1.value2));
                              });
                          });
                      };
                  };
              };
          });
      };
  };
  var bindRWST = function (dictBind) {
      return function (dictMonoid) {
          return new Prelude.Bind(function () {
              return applyRWST(dictBind)(dictMonoid);
          }, function (m) {
              return function (f) {
                  return function (r) {
                      return function (s) {
                          return Prelude[">>="](dictBind)(runRWST(m)(r)(s))(function (v) {
                              return Prelude["<#>"]((dictBind["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(runRWST(f(v.value1))(r)(v.value0))(function (v1) {
                                  return new RWSResult(v1.value0, v1.value1, Prelude["++"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(v.value2)(v1.value2));
                              });
                          });
                      };
                  };
              };
          });
      };
  };
  var applicativeRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Prelude.Applicative(function () {
              return applyRWST(dictMonad["__superclass_Prelude.Bind_1"]())(dictMonoid);
          }, function (a) {
              return function (v) {
                  return function (s) {
                      return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                  };
              };
          });
      };
  };
  var monadRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Prelude.Monad(function () {
              return applicativeRWST(dictMonad)(dictMonoid);
          }, function () {
              return bindRWST(dictMonad["__superclass_Prelude.Bind_1"]())(dictMonoid);
          });
      };
  };
  var monadEffRWS = function (dictMonad) {
      return function (dictMonoid) {
          return function (dictMonadEff) {
              return new Control_Monad_Eff_Class.MonadEff(function () {
                  return monadRWST(dictMonad)(dictMonoid);
              }, function ($107) {
                  return Control_Monad_Trans.lift(monadTransRWST(dictMonoid))(dictMonad)(Control_Monad_Eff_Class.liftEff(dictMonadEff)($107));
              });
          };
      };
  };
  var monadErrorRWST = function (dictMonadError) {
      return function (dictMonoid) {
          return new Control_Monad_Error_Class.MonadError(function () {
              return monadRWST(dictMonadError["__superclass_Prelude.Monad_0"]())(dictMonoid);
          }, function (m) {
              return function (h) {
                  return RWST(function (r) {
                      return function (s) {
                          return Control_Monad_Error_Class.catchError(dictMonadError)(runRWST(m)(r)(s))(function (e) {
                              return runRWST(h(e))(r)(s);
                          });
                      };
                  });
              };
          }, function (e) {
              return Control_Monad_Trans.lift(monadTransRWST(dictMonoid))(dictMonadError["__superclass_Prelude.Monad_0"]())(Control_Monad_Error_Class.throwError(dictMonadError)(e));
          });
      };
  };
  var monadReaderRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Reader_Class.MonadReader(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (r) {
              return function (s) {
                  return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new RWSResult(s, r, Data_Monoid.mempty(dictMonoid)));
              };
          }, function (f) {
              return function (m) {
                  return function (r) {
                      return function (s) {
                          return runRWST(m)(f(r))(s);
                      };
                  };
              };
          });
      };
  };
  var monadRecRWST = function (dictMonoid) {
      return function (dictMonadRec) {
          return new Control_Monad_Rec_Class.MonadRec(function () {
              return monadRWST(dictMonadRec["__superclass_Prelude.Monad_0"]())(dictMonoid);
          }, function (k) {
              return function (a) {
                  var k$prime = function (r) {
                      return function (v) {
                          return Prelude.bind((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(runRWST(k(v.value1))(r)(v.value0))(function (v1) {
                              return Prelude["return"]((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())((function () {
                                  if (v1.value1 instanceof Data_Either.Left) {
                                      return new Data_Either.Left(new RWSResult(v1.value0, v1.value1.value0, Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(v.value2)(v1.value2)));
                                  };
                                  if (v1.value1 instanceof Data_Either.Right) {
                                      return new Data_Either.Right(new RWSResult(v1.value0, v1.value1.value0, Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(v.value2)(v1.value2)));
                                  };
                                  throw new Error("Failed pattern match at Control.Monad.RWS.Trans line 98, column 5 - line 102, column 75: " + [ v1.value1.constructor.name ]);
                              })());
                          });
                      };
                  };
                  return function (r) {
                      return function (s) {
                          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(new RWSResult(s, a, Data_Monoid.mempty(dictMonoid)));
                      };
                  };
              };
          });
      };
  };
  var monadStateRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_State_Class.MonadState(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (f) {
              return function (v) {
                  return function (s) {
                      var $90 = f(s);
                      return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new RWSResult($90.value1, $90.value0, Data_Monoid.mempty(dictMonoid)));
                  };
              };
          });
      };
  };
  var monadWriterRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_Writer_Class.MonadWriter(function () {
              return monadRWST(dictMonad)(dictMonoid);
          }, function (m) {
              return function (r) {
                  return function (s) {
                      return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(runRWST(m)(r)(s))(function (v) {
                          return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new RWSResult(v.value0, new Data_Tuple.Tuple(v.value1, v.value2), v.value2));
                      });
                  };
              };
          }, function (m) {
              return function (r) {
                  return function (s) {
                      return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(runRWST(m)(r)(s))(function (v) {
                          return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new RWSResult(v.value0, v.value1.value0, v.value1.value1(v.value2)));
                      });
                  };
              };
          }, function (v) {
              return function (v1) {
                  return function (s) {
                      return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(new RWSResult(s, v.value0, v.value1));
                  };
              };
          });
      };
  };
  var monadRWSRWST = function (dictMonad) {
      return function (dictMonoid) {
          return new Control_Monad_RWS_Class.MonadRWS(function () {
              return monadReaderRWST(dictMonad)(dictMonoid);
          }, function () {
              return monadStateRWST(dictMonad)(dictMonoid);
          }, function () {
              return monadWriterRWST(dictMonad)(dictMonoid);
          }, function () {
              return dictMonoid;
          });
      };
  };
  exports["RWST"] = RWST;
  exports["RWSResult"] = RWSResult;
  exports["withRWST"] = withRWST;
  exports["mapRWST"] = mapRWST;
  exports["execRWST"] = execRWST;
  exports["evalRWST"] = evalRWST;
  exports["runRWST"] = runRWST;
  exports["functorRWST"] = functorRWST;
  exports["applyRWST"] = applyRWST;
  exports["bindRWST"] = bindRWST;
  exports["applicativeRWST"] = applicativeRWST;
  exports["monadRWST"] = monadRWST;
  exports["monadTransRWST"] = monadTransRWST;
  exports["monadEffRWS"] = monadEffRWS;
  exports["monadReaderRWST"] = monadReaderRWST;
  exports["monadStateRWST"] = monadStateRWST;
  exports["monadWriterRWST"] = monadWriterRWST;
  exports["monadRWSRWST"] = monadRWSRWST;
  exports["monadErrorRWST"] = monadErrorRWST;
  exports["monadRecRWST"] = monadRecRWST;;
 
})(PS["Control.Monad.RWS.Trans"] = PS["Control.Monad.RWS.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_RWS_Class = PS["Control.Monad.RWS.Class"];
  var Control_Monad_RWS_Trans = PS["Control.Monad.RWS.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Tuple = PS["Data.Tuple"];     
  var withRWS = Control_Monad_RWS_Trans.withRWST;
  var rws = function (f) {
      return function (r) {
          return function (s) {
              return Prelude["return"](Data_Identity.applicativeIdentity)(f(r)(s));
          };
      };
  };
  var runRWS = function (m) {
      return function (r) {
          return function (s) {
              return Data_Identity.runIdentity(Control_Monad_RWS_Trans.runRWST(m)(r)(s));
          };
      };
  };
  var mapRWS = function (f) {
      return Control_Monad_RWS_Trans.mapRWST(function ($0) {
          return Data_Identity.Identity(f(Data_Identity.runIdentity($0)));
      });
  };
  var execRWS = function (m) {
      return function (r) {
          return function (s) {
              return Data_Identity.runIdentity(Control_Monad_RWS_Trans.execRWST(Data_Identity.monadIdentity)(m)(r)(s));
          };
      };
  };
  var evalRWS = function (m) {
      return function (r) {
          return function (s) {
              return Data_Identity.runIdentity(Control_Monad_RWS_Trans.evalRWST(Data_Identity.monadIdentity)(m)(r)(s));
          };
      };
  };
  exports["withRWS"] = withRWS;
  exports["mapRWS"] = mapRWS;
  exports["execRWS"] = execRWS;
  exports["evalRWS"] = evalRWS;
  exports["runRWS"] = runRWS;
  exports["rws"] = rws;;
 
})(PS["Control.Monad.RWS"] = PS["Control.Monad.RWS"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Identity = PS["Data.Identity"];     
  var Distributive = function (__superclass_Prelude$dotFunctor_0, collect, distribute) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.collect = collect;
      this.distribute = distribute;
  };
  var distributiveIdentity = new Distributive(function () {
      return Data_Identity.functorIdentity;
  }, function (dictFunctor) {
      return function (f) {
          return function ($7) {
              return Data_Identity.Identity(Prelude.map(dictFunctor)(function ($8) {
                  return Data_Identity.runIdentity(f($8));
              })($7));
          };
      };
  }, function (dictFunctor) {
      return function ($9) {
          return Data_Identity.Identity(Prelude.map(dictFunctor)(Data_Identity.runIdentity)($9));
      };
  });
  var distribute = function (dict) {
      return dict.distribute;
  };
  var distributiveFunction = new Distributive(function () {
      return Prelude.functorFn;
  }, function (dictFunctor) {
      return function (f) {
          return function ($10) {
              return distribute(distributiveFunction)(dictFunctor)(Prelude.map(dictFunctor)(f)($10));
          };
      };
  }, function (dictFunctor) {
      return function (a) {
          return function (e) {
              return Prelude.map(dictFunctor)(function (v) {
                  return v(e);
              })(a);
          };
      };
  });
  var cotraverse = function (dictDistributive) {
      return function (dictFunctor) {
          return function (f) {
              return function ($11) {
                  return Prelude.map(dictDistributive["__superclass_Prelude.Functor_0"]())(f)(distribute(dictDistributive)(dictFunctor)($11));
              };
          };
      };
  };
  var collect = function (dict) {
      return dict.collect;
  };
  exports["Distributive"] = Distributive;
  exports["cotraverse"] = cotraverse;
  exports["collect"] = collect;
  exports["distribute"] = distribute;
  exports["distributiveIdentity"] = distributiveIdentity;
  exports["distributiveFunction"] = distributiveFunction;;
 
})(PS["Data.Distributive"] = PS["Data.Distributive"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Either = PS["Data.Either"];     
  var ReaderT = function (x) {
      return x;
  };
  var runReaderT = function (v) {
      return v;
  };
  var withReaderT = function (f) {
      return function (m) {
          return ReaderT(function ($27) {
              return runReaderT(m)(f($27));
          });
      };
  };
  var monadTransReaderT = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
      return function ($28) {
          return ReaderT(Prelude["const"]($28));
      };
  });
  var mapReaderT = function (f) {
      return function (m) {
          return ReaderT(function ($29) {
              return f(runReaderT(m)($29));
          });
      };
  };
  var functorReaderT = function (dictFunctor) {
      return new Prelude.Functor(function (f) {
          return mapReaderT(Prelude["<$>"](dictFunctor)(f));
      });
  };
  var distributiveReaderT = function (dictDistributive) {
      return new Data_Distributive.Distributive(function () {
          return functorReaderT(dictDistributive["__superclass_Prelude.Functor_0"]());
      }, function (dictFunctor) {
          return function (f) {
              return function ($30) {
                  return Data_Distributive.distribute(distributiveReaderT(dictDistributive))(dictFunctor)(Prelude.map(dictFunctor)(f)($30));
              };
          };
      }, function (dictFunctor) {
          return function (a) {
              return function (e) {
                  return Data_Distributive.collect(dictDistributive)(dictFunctor)(Prelude.flip(runReaderT)(e))(a);
              };
          };
      });
  };
  var applyReaderT = function (dictApplicative) {
      return new Prelude.Apply(function () {
          return functorReaderT((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
      }, function (f) {
          return function (v) {
              return function (r) {
                  return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(runReaderT(f)(r))(runReaderT(v)(r));
              };
          };
      });
  };
  var bindReaderT = function (dictMonad) {
      return new Prelude.Bind(function () {
          return applyReaderT(dictMonad["__superclass_Prelude.Applicative_0"]());
      }, function (m) {
          return function (k) {
              return function (r) {
                  return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(runReaderT(m)(r))(function (v) {
                      return runReaderT(k(v))(r);
                  });
              };
          };
      });
  };
  var applicativeReaderT = function (dictApplicative) {
      return new Prelude.Applicative(function () {
          return applyReaderT(dictApplicative);
      }, function ($31) {
          return ReaderT(Prelude["const"](Prelude.pure(dictApplicative)($31)));
      });
  };
  var monadReaderT = function (dictMonad) {
      return new Prelude.Monad(function () {
          return applicativeReaderT(dictMonad["__superclass_Prelude.Applicative_0"]());
      }, function () {
          return bindReaderT(dictMonad);
      });
  };
  var monadContReaderT = function (dictMonadCont) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadReaderT(dictMonadCont["__superclass_Prelude.Monad_0"]());
      }, function (f) {
          return ReaderT(function (r) {
              return Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                  return runReaderT(f(function (a) {
                      return ReaderT(Prelude["const"](c(a)));
                  }))(r);
              });
          });
      });
  };
  var monadEffReader = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadReaderT(dictMonadEff["__superclass_Prelude.Monad_0"]());
      }, function ($32) {
          return Control_Monad_Trans.lift(monadTransReaderT)(dictMonadEff["__superclass_Prelude.Monad_0"]())(Control_Monad_Eff_Class.liftEff(dictMonadEff)($32));
      });
  };
  var monadErrorReaderT = function (dictMonadError) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadReaderT(dictMonadError["__superclass_Prelude.Monad_0"]());
      }, function (m) {
          return function (h) {
              return ReaderT(function (r) {
                  return Control_Monad_Error_Class.catchError(dictMonadError)(runReaderT(m)(r))(function (e) {
                      return runReaderT(h(e))(r);
                  });
              });
          };
      }, function (e) {
          return Control_Monad_Trans.lift(monadTransReaderT)(dictMonadError["__superclass_Prelude.Monad_0"]())(Control_Monad_Error_Class.throwError(dictMonadError)(e));
      });
  };
  var monadReaderReaderT = function (dictMonad) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadReaderT(dictMonad);
      }, Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]()), withReaderT);
  };
  var monadRecReaderT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadReaderT(dictMonadRec["__superclass_Prelude.Monad_0"]());
      }, function (k) {
          return function (a) {
              var k$prime = function (r) {
                  return function (a1) {
                      return Prelude.bind((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(runReaderT(k(a1))(r))(function (v) {
                          return Prelude["return"]((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())(Data_Either.either(Data_Either.Left.create)(Data_Either.Right.create)(v));
                      });
                  };
              };
              return function (r) {
                  return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(a);
              };
          };
      });
  };
  var monadStateReaderT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadReaderT(dictMonadState["__superclass_Prelude.Monad_0"]());
      }, function (f) {
          return Control_Monad_Trans.lift(monadTransReaderT)(dictMonadState["__superclass_Prelude.Monad_0"]())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadWriterReaderT = function (dictMonad) {
      return function (dictMonadWriter) {
          return new Control_Monad_Writer_Class.MonadWriter(function () {
              return monadReaderT(dictMonad);
          }, mapReaderT(Control_Monad_Writer_Class.listen(dictMonadWriter)), mapReaderT(Control_Monad_Writer_Class.pass(dictMonadWriter)), function (wd) {
              return Control_Monad_Trans.lift(monadTransReaderT)(dictMonad)(Control_Monad_Writer_Class.writer(dictMonadWriter)(wd));
          });
      };
  };
  var altReaderT = function (dictAlt) {
      return new Control_Alt.Alt(function () {
          return functorReaderT(dictAlt["__superclass_Prelude.Functor_0"]());
      }, function (m) {
          return function (n) {
              return function (r) {
                  return Control_Alt["<|>"](dictAlt)(runReaderT(m)(r))(runReaderT(n)(r));
              };
          };
      });
  };
  var plusReaderT = function (dictPlus) {
      return new Control_Plus.Plus(function () {
          return altReaderT(dictPlus["__superclass_Control.Alt.Alt_0"]());
      }, Prelude["const"](Control_Plus.empty(dictPlus)));
  };
  var alternativeReaderT = function (dictAlternative) {
      return new Control_Alternative.Alternative(function () {
          return plusReaderT(dictAlternative["__superclass_Control.Plus.Plus_1"]());
      }, function () {
          return applicativeReaderT(dictAlternative["__superclass_Prelude.Applicative_0"]());
      });
  };
  var monadPlusReaderT = function (dictMonadPlus) {
      return new Control_MonadPlus.MonadPlus(function () {
          return alternativeReaderT(dictMonadPlus["__superclass_Control.Alternative.Alternative_1"]());
      }, function () {
          return monadReaderT(dictMonadPlus["__superclass_Prelude.Monad_0"]());
      });
  };
  exports["ReaderT"] = ReaderT;
  exports["mapReaderT"] = mapReaderT;
  exports["withReaderT"] = withReaderT;
  exports["runReaderT"] = runReaderT;
  exports["functorReaderT"] = functorReaderT;
  exports["applyReaderT"] = applyReaderT;
  exports["applicativeReaderT"] = applicativeReaderT;
  exports["altReaderT"] = altReaderT;
  exports["plusReaderT"] = plusReaderT;
  exports["alternativeReaderT"] = alternativeReaderT;
  exports["bindReaderT"] = bindReaderT;
  exports["monadReaderT"] = monadReaderT;
  exports["monadPlusReaderT"] = monadPlusReaderT;
  exports["monadTransReaderT"] = monadTransReaderT;
  exports["monadEffReader"] = monadEffReader;
  exports["monadContReaderT"] = monadContReaderT;
  exports["monadErrorReaderT"] = monadErrorReaderT;
  exports["monadReaderReaderT"] = monadReaderReaderT;
  exports["monadStateReaderT"] = monadStateReaderT;
  exports["monadWriterReaderT"] = monadWriterReaderT;
  exports["distributiveReaderT"] = distributiveReaderT;
  exports["monadRecReaderT"] = monadRecReaderT;;
 
})(PS["Control.Monad.Reader.Trans"] = PS["Control.Monad.Reader.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Data_Identity = PS["Data.Identity"];     
  var withReader = Control_Monad_Reader_Trans.withReaderT;
  var runReader = function (m) {
      return function ($0) {
          return Data_Identity.runIdentity(Control_Monad_Reader_Trans.runReaderT(m)($0));
      };
  };
  var mapReader = function (f) {
      return Control_Monad_Reader_Trans.mapReaderT(function ($1) {
          return Data_Identity.Identity(f(Data_Identity.runIdentity($1)));
      });
  };
  exports["withReader"] = withReader;
  exports["mapReader"] = mapReader;
  exports["runReader"] = runReader;;
 
})(PS["Control.Monad.Reader"] = PS["Control.Monad.Reader"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Either = PS["Data.Either"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];     
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  };
  var withStateT = function (f) {
      return function (s) {
          return StateT(function ($60) {
              return runStateT(s)(f($60));
          });
      };
  };
  var monadTransStateT = new Control_Monad_Trans.MonadTrans(function (dictMonad) {
      return function (m) {
          return function (s) {
              return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(m)(function (v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(v, s));
              });
          };
      };
  });
  var mapStateT = function (f) {
      return function (m) {
          return StateT(function ($61) {
              return f(runStateT(m)($61));
          });
      };
  };
  var lazyStateT = new Control_Lazy.Lazy(function (f) {
      return StateT(function (s) {
          return runStateT(f(Prelude.unit))(s);
      });
  });
  var execStateT = function (dictApply) {
      return function (m) {
          return function (s) {
              return Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Data_Tuple.snd)(runStateT(m)(s));
          };
      };
  };
  var evalStateT = function (dictApply) {
      return function (m) {
          return function (s) {
              return Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Data_Tuple.fst)(runStateT(m)(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Prelude.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var functorStateT = function (dictMonad) {
      return new Prelude.Functor(Prelude.liftM1(monadStateT(dictMonad)));
  };
  var bindStateT = function (dictMonad) {
      return new Prelude.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(v(s))(function (v1) {
                      return runStateT(f(v1.value0))(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Prelude.Apply(function () {
          return functorStateT(dictMonad);
      }, Prelude.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Prelude.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return StateT(function (s) {
              return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(a, s));
          });
      });
  };
  var monadContStateT = function (dictMonadCont) {
      return new Control_Monad_Cont_Class.MonadCont(function () {
          return monadStateT(dictMonadCont["__superclass_Prelude.Monad_0"]());
      }, function (f) {
          return StateT(function (s) {
              return Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                  return runStateT(f(function (a) {
                      return StateT(function (s$prime) {
                          return c(new Data_Tuple.Tuple(a, s$prime));
                      });
                  }))(s);
              });
          });
      });
  };
  var monadEffState = function (dictMonad) {
      return function (dictMonadEff) {
          return new Control_Monad_Eff_Class.MonadEff(function () {
              return monadStateT(dictMonad);
          }, function ($62) {
              return Control_Monad_Trans.lift(monadTransStateT)(dictMonad)(Control_Monad_Eff_Class.liftEff(dictMonadEff)($62));
          });
      };
  };
  var monadErrorStateT = function (dictMonadError) {
      return new Control_Monad_Error_Class.MonadError(function () {
          return monadStateT(dictMonadError["__superclass_Prelude.Monad_0"]());
      }, function (m) {
          return function (h) {
              return StateT(function (s) {
                  return Control_Monad_Error_Class.catchError(dictMonadError)(runStateT(m)(s))(function (e) {
                      return runStateT(h(e))(s);
                  });
              });
          };
      }, function (e) {
          return Control_Monad_Trans.lift(monadTransStateT)(dictMonadError["__superclass_Prelude.Monad_0"]())(Control_Monad_Error_Class.throwError(dictMonadError)(e));
      });
  };
  var monadReaderStateT = function (dictMonadReader) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadStateT(dictMonadReader["__superclass_Prelude.Monad_0"]());
      }, Control_Monad_Trans.lift(monadTransStateT)(dictMonadReader["__superclass_Prelude.Monad_0"]())(Control_Monad_Reader_Class.ask(dictMonadReader)), function (f) {
          return mapStateT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
      });
  };
  var monadRecStateT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadStateT(dictMonadRec["__superclass_Prelude.Monad_0"]());
      }, function (f) {
          return function (a) {
              var f$prime = function (v) {
                  return Prelude.bind((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(runStateT(f(v.value0))(v.value1))(function (v1) {
                      return Prelude["return"]((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())((function () {
                          if (v1.value0 instanceof Data_Either.Left) {
                              return new Data_Either.Left(new Data_Tuple.Tuple(v1.value0.value0, v1.value1));
                          };
                          if (v1.value0 instanceof Data_Either.Right) {
                              return new Data_Either.Right(new Data_Tuple.Tuple(v1.value0.value0, v1.value1));
                          };
                          throw new Error("Failed pattern match at Control.Monad.State.Trans line 83, column 5 - line 89, column 1: " + [ v1.value0.constructor.name ]);
                      })());
                  });
              };
              return function (s) {
                  return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, s));
              };
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT(function ($63) {
              return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(f($63));
          });
      });
  };
  var monadWriterStateT = function (dictMonad) {
      return function (dictMonadWriter) {
          return new Control_Monad_Writer_Class.MonadWriter(function () {
              return monadStateT(dictMonad);
          }, function (m) {
              return StateT(function (s) {
                  return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(Control_Monad_Writer_Class.listen(dictMonadWriter)(runStateT(m)(s)))(function (v) {
                      return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
                  });
              });
          }, function (m) {
              return StateT(function (s) {
                  return Control_Monad_Writer_Class.pass(dictMonadWriter)(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(runStateT(m)(s))(function (v) {
                      return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value0, v.value1), v.value0.value1));
                  }));
              });
          }, function (wd) {
              return Control_Monad_Trans.lift(monadTransStateT)(dictMonad)(Control_Monad_Writer_Class.writer(dictMonadWriter)(wd));
          });
      };
  };
  var altStateT = function (dictMonad) {
      return function (dictAlt) {
          return new Control_Alt.Alt(function () {
              return functorStateT(dictMonad);
          }, function (x) {
              return function (y) {
                  return StateT(function (s) {
                      return Control_Alt["<|>"](dictAlt)(runStateT(x)(s))(runStateT(y)(s));
                  });
              };
          });
      };
  };
  var plusStateT = function (dictMonad) {
      return function (dictPlus) {
          return new Control_Plus.Plus(function () {
              return altStateT(dictMonad)(dictPlus["__superclass_Control.Alt.Alt_0"]());
          }, StateT(function (v) {
              return Control_Plus.empty(dictPlus);
          }));
      };
  };
  var alternativeStateT = function (dictMonad) {
      return function (dictAlternative) {
          return new Control_Alternative.Alternative(function () {
              return plusStateT(dictMonad)(dictAlternative["__superclass_Control.Plus.Plus_1"]());
          }, function () {
              return applicativeStateT(dictMonad);
          });
      };
  };
  var monadPlusStateT = function (dictMonadPlus) {
      return new Control_MonadPlus.MonadPlus(function () {
          return alternativeStateT(dictMonadPlus["__superclass_Prelude.Monad_0"]())(dictMonadPlus["__superclass_Control.Alternative.Alternative_1"]());
      }, function () {
          return monadStateT(dictMonadPlus["__superclass_Prelude.Monad_0"]());
      });
  };
  exports["StateT"] = StateT;
  exports["withStateT"] = withStateT;
  exports["mapStateT"] = mapStateT;
  exports["execStateT"] = execStateT;
  exports["evalStateT"] = evalStateT;
  exports["runStateT"] = runStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["altStateT"] = altStateT;
  exports["plusStateT"] = plusStateT;
  exports["alternativeStateT"] = alternativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadRecStateT"] = monadRecStateT;
  exports["monadPlusStateT"] = monadPlusStateT;
  exports["monadTransStateT"] = monadTransStateT;
  exports["lazyStateT"] = lazyStateT;
  exports["monadEffState"] = monadEffState;
  exports["monadContStateT"] = monadContStateT;
  exports["monadErrorStateT"] = monadErrorStateT;
  exports["monadReaderStateT"] = monadReaderStateT;
  exports["monadStateStateT"] = monadStateStateT;
  exports["monadWriterStateT"] = monadWriterStateT;;
 
})(PS["Control.Monad.State.Trans"] = PS["Control.Monad.State.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Tuple = PS["Data.Tuple"];     
  var withState = Control_Monad_State_Trans.withStateT;
  var runState = function (s) {
      return function ($0) {
          return Data_Identity.runIdentity(Control_Monad_State_Trans.runStateT(s)($0));
      };
  };
  var mapState = function (f) {
      return Control_Monad_State_Trans.mapStateT(function ($1) {
          return Data_Identity.Identity(f(Data_Identity.runIdentity($1)));
      });
  };
  var execState = function (m) {
      return function (s) {
          return Data_Tuple.snd(runState(m)(s));
      };
  };
  var evalState = function (m) {
      return function (s) {
          return Data_Tuple.fst(runState(m)(s));
      };
  };
  exports["withState"] = withState;
  exports["mapState"] = mapState;
  exports["execState"] = execState;
  exports["evalState"] = evalState;
  exports["runState"] = runState;;
 
})(PS["Control.Monad.State"] = PS["Control.Monad.State"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Tuple = PS["Data.Tuple"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans = PS["Control.Monad.Trans"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];     
  var WriterT = function (x) {
      return x;
  };
  var runWriterT = function (v) {
      return v;
  };
  var monadTransWriterT = function (dictMonoid) {
      return new Control_Monad_Trans.MonadTrans(function (dictMonad) {
          return function (m) {
              return WriterT(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(m)(function (v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(v, Data_Monoid.mempty(dictMonoid)));
              }));
          };
      });
  };
  var mapWriterT = function (f) {
      return function (m) {
          return WriterT(f(runWriterT(m)));
      };
  };
  var functorWriterT = function (dictFunctor) {
      return new Prelude.Functor(function (f) {
          return mapWriterT(Prelude["<$>"](dictFunctor)(function (v) {
              return new Data_Tuple.Tuple(f(v.value0), v.value1);
          }));
      });
  };
  var execWriterT = function (dictApply) {
      return function (m) {
          return Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(Data_Tuple.snd)(runWriterT(m));
      };
  };
  var applyWriterT = function (dictSemigroup) {
      return function (dictApply) {
          return new Prelude.Apply(function () {
              return functorWriterT(dictApply["__superclass_Prelude.Functor_0"]());
          }, function (f) {
              return function (v) {
                  return WriterT((function () {
                      var k = function (v1) {
                          return function (v2) {
                              return new Data_Tuple.Tuple(v1.value0(v2.value0), Prelude["<>"](dictSemigroup)(v1.value1)(v2.value1));
                          };
                      };
                      return Prelude["<*>"](dictApply)(Prelude["<$>"](dictApply["__superclass_Prelude.Functor_0"]())(k)(runWriterT(f)))(runWriterT(v));
                  })());
              };
          });
      };
  };
  var bindWriterT = function (dictSemigroup) {
      return function (dictMonad) {
          return new Prelude.Bind(function () {
              return applyWriterT(dictSemigroup)((dictMonad["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]());
          }, function (m) {
              return function (k) {
                  return WriterT(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(runWriterT(m))(function (v) {
                      return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(runWriterT(k(v.value0)))(function (v1) {
                          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(v1.value0, Prelude["<>"](dictSemigroup)(v.value1)(v1.value1)));
                      });
                  }));
              };
          });
      };
  };
  var applicativeWriterT = function (dictMonoid) {
      return function (dictApplicative) {
          return new Prelude.Applicative(function () {
              return applyWriterT(dictMonoid["__superclass_Prelude.Semigroup_0"]())(dictApplicative["__superclass_Prelude.Apply_0"]());
          }, function (a) {
              return WriterT(Prelude.pure(dictApplicative)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
          });
      };
  };
  var monadWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Prelude.Monad(function () {
              return applicativeWriterT(dictMonoid)(dictMonad["__superclass_Prelude.Applicative_0"]());
          }, function () {
              return bindWriterT(dictMonoid["__superclass_Prelude.Semigroup_0"]())(dictMonad);
          });
      };
  };
  var monadContWriterT = function (dictMonoid) {
      return function (dictMonadCont) {
          return new Control_Monad_Cont_Class.MonadCont(function () {
              return monadWriterT(dictMonoid)(dictMonadCont["__superclass_Prelude.Monad_0"]());
          }, function (f) {
              return WriterT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function (c) {
                  return runWriterT(f(function (a) {
                      return WriterT(c(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
                  }));
              }));
          });
      };
  };
  var monadEffWriter = function (dictMonad) {
      return function (dictMonoid) {
          return function (dictMonadEff) {
              return new Control_Monad_Eff_Class.MonadEff(function () {
                  return monadWriterT(dictMonoid)(dictMonad);
              }, function ($78) {
                  return Control_Monad_Trans.lift(monadTransWriterT(dictMonoid))(dictMonad)(Control_Monad_Eff_Class.liftEff(dictMonadEff)($78));
              });
          };
      };
  };
  var monadErrorWriterT = function (dictMonoid) {
      return function (dictMonadError) {
          return new Control_Monad_Error_Class.MonadError(function () {
              return monadWriterT(dictMonoid)(dictMonadError["__superclass_Prelude.Monad_0"]());
          }, function (m) {
              return function (h) {
                  return WriterT(Control_Monad_Error_Class.catchError(dictMonadError)(runWriterT(m))(function (e) {
                      return runWriterT(h(e));
                  }));
              };
          }, function (e) {
              return Control_Monad_Trans.lift(monadTransWriterT(dictMonoid))(dictMonadError["__superclass_Prelude.Monad_0"]())(Control_Monad_Error_Class.throwError(dictMonadError)(e));
          });
      };
  };
  var monadReaderWriterT = function (dictMonoid) {
      return function (dictMonadReader) {
          return new Control_Monad_Reader_Class.MonadReader(function () {
              return monadWriterT(dictMonoid)(dictMonadReader["__superclass_Prelude.Monad_0"]());
          }, Control_Monad_Trans.lift(monadTransWriterT(dictMonoid))(dictMonadReader["__superclass_Prelude.Monad_0"]())(Control_Monad_Reader_Class.ask(dictMonadReader)), function (f) {
              return mapWriterT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
          });
      };
  };
  var monadRecWriterT = function (dictMonoid) {
      return function (dictMonadRec) {
          return new Control_Monad_Rec_Class.MonadRec(function () {
              return monadWriterT(dictMonoid)(dictMonadRec["__superclass_Prelude.Monad_0"]());
          }, function (f) {
              return function (a) {
                  var f$prime = function (v) {
                      return Prelude.bind((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(runWriterT(f(v.value0)))(function (v1) {
                          return Prelude["return"]((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())((function () {
                              if (v1.value0 instanceof Data_Either.Left) {
                                  return new Data_Either.Left(new Data_Tuple.Tuple(v1.value0.value0, Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(v.value1)(v1.value1)));
                              };
                              if (v1.value0 instanceof Data_Either.Right) {
                                  return new Data_Either.Right(new Data_Tuple.Tuple(v1.value0.value0, Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(v.value1)(v1.value1)));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Writer.Trans line 78, column 5 - line 84, column 1: " + [ v1.value0.constructor.name ]);
                          })());
                      });
                  };
                  return WriterT(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(f$prime)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
              };
          });
      };
  };
  var monadStateWriterT = function (dictMonoid) {
      return function (dictMonadState) {
          return new Control_Monad_State_Class.MonadState(function () {
              return monadWriterT(dictMonoid)(dictMonadState["__superclass_Prelude.Monad_0"]());
          }, function (f) {
              return Control_Monad_Trans.lift(monadTransWriterT(dictMonoid))(dictMonadState["__superclass_Prelude.Monad_0"]())(Control_Monad_State_Class.state(dictMonadState)(f));
          });
      };
  };
  var monadWriterWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Monad_Writer_Class.MonadWriter(function () {
              return monadWriterT(dictMonoid)(dictMonad);
          }, function (m) {
              return WriterT(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(runWriterT(m))(function (v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0, v.value1), v.value1));
              }));
          }, function (m) {
              return WriterT(Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(runWriterT(m))(function (v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(v.value0.value0, v.value0.value1(v.value1)));
              }));
          }, function ($79) {
              return WriterT(Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())($79));
          });
      };
  };
  var altWriterT = function (dictAlt) {
      return new Control_Alt.Alt(function () {
          return functorWriterT(dictAlt["__superclass_Prelude.Functor_0"]());
      }, function (m) {
          return function (n) {
              return WriterT(Control_Alt["<|>"](dictAlt)(runWriterT(m))(runWriterT(n)));
          };
      });
  };
  var plusWriterT = function (dictPlus) {
      return new Control_Plus.Plus(function () {
          return altWriterT(dictPlus["__superclass_Control.Alt.Alt_0"]());
      }, Control_Plus.empty(dictPlus));
  };
  var alternativeWriterT = function (dictMonoid) {
      return function (dictAlternative) {
          return new Control_Alternative.Alternative(function () {
              return plusWriterT(dictAlternative["__superclass_Control.Plus.Plus_1"]());
          }, function () {
              return applicativeWriterT(dictMonoid)(dictAlternative["__superclass_Prelude.Applicative_0"]());
          });
      };
  };
  var monadPlusWriterT = function (dictMonoid) {
      return function (dictMonadPlus) {
          return new Control_MonadPlus.MonadPlus(function () {
              return alternativeWriterT(dictMonoid)(dictMonadPlus["__superclass_Control.Alternative.Alternative_1"]());
          }, function () {
              return monadWriterT(dictMonoid)(dictMonadPlus["__superclass_Prelude.Monad_0"]());
          });
      };
  };
  exports["WriterT"] = WriterT;
  exports["mapWriterT"] = mapWriterT;
  exports["execWriterT"] = execWriterT;
  exports["runWriterT"] = runWriterT;
  exports["functorWriterT"] = functorWriterT;
  exports["applyWriterT"] = applyWriterT;
  exports["applicativeWriterT"] = applicativeWriterT;
  exports["altWriterT"] = altWriterT;
  exports["plusWriterT"] = plusWriterT;
  exports["alternativeWriterT"] = alternativeWriterT;
  exports["bindWriterT"] = bindWriterT;
  exports["monadWriterT"] = monadWriterT;
  exports["monadRecWriterT"] = monadRecWriterT;
  exports["monadPlusWriterT"] = monadPlusWriterT;
  exports["monadTransWriterT"] = monadTransWriterT;
  exports["monadEffWriter"] = monadEffWriter;
  exports["monadContWriterT"] = monadContWriterT;
  exports["monadErrorWriterT"] = monadErrorWriterT;
  exports["monadReaderWriterT"] = monadReaderWriterT;
  exports["monadStateWriterT"] = monadStateWriterT;
  exports["monadWriterWriterT"] = monadWriterWriterT;;
 
})(PS["Control.Monad.Writer.Trans"] = PS["Control.Monad.Writer.Trans"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Tuple = PS["Data.Tuple"];     
  var runWriter = function ($0) {
      return Data_Identity.runIdentity(Control_Monad_Writer_Trans.runWriterT($0));
  };
  var mapWriter = function (f) {
      return Control_Monad_Writer_Trans.mapWriterT(function ($1) {
          return Data_Identity.Identity(f(Data_Identity.runIdentity($1)));
      });
  };
  var execWriter = function (m) {
      return Data_Tuple.snd(runWriter(m));
  };
  exports["mapWriter"] = mapWriter;
  exports["execWriter"] = execWriter;
  exports["runWriter"] = runWriter;;
 
})(PS["Control.Monad.Writer"] = PS["Control.Monad.Writer"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = [];
      for (var i = start, n = 0; i !== end; i += step) {
        result[n++] = i;
      }
      result[n] = i;
      return result;
    };
  };

  exports.replicate = function (n) {
    return function (v) {
      if (n < 1) return [];
      var r = new Array(n);
      for (var i = 0; i < n; i++) r[i] = v;
      return r;
    };
  };

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports.findLastIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = xs.length - 1; i >= 0; i--) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._insertAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i > l.length) return nothing;
            var l1 = l.slice();
            l1.splice(i, 0, a);
            return just(l1);
          };
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      /* jshint maxparams: 2 */
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];     
  var $colon = $foreign.cons;
  var $dot$dot = $foreign.range;
  var zipWithA = function (dictApplicative) {
      return function (f) {
          return function (xs) {
              return function (ys) {
                  return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictApplicative)($foreign.zipWith(f)(xs)(ys));
              };
          };
      };
  };
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var updateAt = $foreign._updateAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unzip = $foreign["uncons'"](function (v) {
      return new Data_Tuple.Tuple([  ], [  ]);
  })(function (v) {
      return function (ts) {
          var $36 = unzip(ts);
          return new Data_Tuple.Tuple($colon(v.value0)($36.value0), $colon(v.value1)($36.value1));
      };
  });
  var uncons = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x, 
              tail: xs
          });
      };
  });
  var take = $foreign.slice(0);
  var tail = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var span = function (p) {
      var go = function (__copy_acc) {
          return function (__copy_xs) {
              var acc = __copy_acc;
              var xs = __copy_xs;
              tco: while (true) {
                  var $42 = uncons(xs);
                  if ($42 instanceof Data_Maybe.Just && p($42.value0.head)) {
                      var __tco_acc = $colon($42.value0.head)(acc);
                      acc = __tco_acc;
                      xs = $42.value0.tail;
                      continue tco;
                  };
                  return {
                      init: $foreign.reverse(acc), 
                      rest: xs
                  };
              };
          };
      };
      return go([  ]);
  };
  var takeWhile = function (p) {
      return function (xs) {
          return (span(p)(xs)).init;
      };
  };
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var $46 = comp(x)(y);
                  if ($46 instanceof Prelude.GT) {
                      return 1;
                  };
                  if ($46 instanceof Prelude.EQ) {
                      return 0;
                  };
                  if ($46 instanceof Prelude.LT) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.Array line 409, column 3 - line 414, column 1: " + [ $46.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Prelude.compare(dictOrd))(xs);
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var replicateM = function (dictMonad) {
      return function (n) {
          return function (m) {
              if (n < 1) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())([  ]);
              };
              if (Prelude.otherwise) {
                  return Data_Traversable.sequence(Data_Traversable.traversableArray)(dictMonad["__superclass_Prelude.Applicative_0"]())($foreign.replicate(n)(m));
              };
              throw new Error("Failed pattern match at Data.Array line 136, column 1 - line 137, column 1: " + [ n.constructor.name, m.constructor.name ]);
          };
      };
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var nubBy = function (eq) {
      return function (xs) {
          var $49 = uncons(xs);
          if ($49 instanceof Data_Maybe.Just) {
              return $colon($49.value0.head)(nubBy(eq)($foreign.filter(function (y) {
                  return !eq($49.value0.head)(y);
              })($49.value0.tail)));
          };
          if ($49 instanceof Data_Maybe.Nothing) {
              return [  ];
          };
          throw new Error("Failed pattern match: " + [ $49.constructor.name ]);
      };
  };
  var nub = function (dictEq) {
      return nubBy(Prelude.eq(dictEq));
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Prelude["<*>"]((dictAlternative["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())($colon)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt["<|>"]((dictAlternative["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(dictAlternative)(dictLazy)(v))(Prelude.pure(dictAlternative["__superclass_Prelude.Applicative_0"]())([  ]));
          };
      };
  };
  var insertAt = $foreign._insertAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var init = function (xs) {
      if ($$null(xs)) {
          return Data_Maybe.Nothing.value;
      };
      if (Prelude.otherwise) {
          return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1)(xs));
      };
      throw new Error("Failed pattern match at Data.Array line 226, column 1 - line 227, column 1: " + [ xs.constructor.name ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var $bang$bang = index;
  var last = function (xs) {
      return $bang$bang(xs)($foreign.length(xs) - 1);
  };
  var modifyAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  return updateAt(i)(f(x))(xs);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)($bang$bang(xs)(i));
          };
      };
  };
  var head = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (v) {
          return new Data_Maybe.Just(x);
      };
  });
  var groupBy = function (op) {
      var go = function (__copy_acc) {
          return function (__copy_xs) {
              var acc = __copy_acc;
              var xs = __copy_xs;
              tco: while (true) {
                  var $54 = uncons(xs);
                  if ($54 instanceof Data_Maybe.Just) {
                      var sp = span(op($54.value0.head))($54.value0.tail);
                      var __tco_acc = $colon($colon($54.value0.head)(sp.init))(acc);
                      acc = __tco_acc;
                      xs = sp.rest;
                      continue tco;
                  };
                  if ($54 instanceof Data_Maybe.Nothing) {
                      return $foreign.reverse(acc);
                  };
                  throw new Error("Failed pattern match at Data.Array line 476, column 1 - line 477, column 1: " + [ $54.constructor.name ]);
              };
          };
      };
      return go([  ]);
  };
  var group = function (dictEq) {
      return function (xs) {
          return groupBy(Prelude.eq(dictEq))(xs);
      };
  };
  var group$prime = function (dictOrd) {
      return function ($68) {
          return group(dictOrd["__superclass_Prelude.Eq_0"]())(sort(dictOrd)($68));
      };
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (a) {
              return $foreign["uncons'"](function (v) {
                  return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())(a);
              })(function (b) {
                  return function (bs) {
                      return Prelude[">>="](dictMonad["__superclass_Prelude.Bind_1"]())(f(a)(b))(function (a$prime) {
                          return foldM(dictMonad)(f)(a$prime)(bs);
                      });
                  };
              });
          };
      };
  };
  var findLastIndex = $foreign.findLastIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var insertBy = function (cmp) {
      return function (x) {
          return function (ys) {
              var i = Data_Maybe.maybe(0)(function (v) {
                  return v + 1 | 0;
              })(findLastIndex(function (y) {
                  return Prelude["=="](Prelude.eqOrdering)(cmp(x)(y))(Prelude.GT.value);
              })(ys));
              return Data_Maybe_Unsafe.fromJust(insertAt(i)(x)(ys));
          };
      };
  };
  var insert = function (dictOrd) {
      return insertBy(Prelude.compare(dictOrd));
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var intersectBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return $foreign.filter(function (x) {
                  return Data_Maybe.isJust(findIndex(eq(x))(ys));
              })(xs);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Prelude.eq(dictEq));
  };
  var filterM = function (dictMonad) {
      return function (p) {
          return $foreign["uncons'"](function (v) {
              return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())([  ]);
          })(function (x) {
              return function (xs) {
                  return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(p(x))(function (v) {
                      return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(filterM(dictMonad)(p)(xs))(function (v1) {
                          return Prelude["return"](dictMonad["__superclass_Prelude.Applicative_0"]())((function () {
                              if (v) {
                                  return $colon(x)(v1);
                              };
                              if (!v) {
                                  return v1;
                              };
                              throw new Error("Failed pattern match: " + [ v.constructor.name ]);
                          })());
                      });
                  });
              };
          });
      };
  };
  var elemLastIndex = function (dictEq) {
      return function (x) {
          return findLastIndex(function (v) {
              return Prelude["=="](dictEq)(v)(x);
          });
      };
  };
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Prelude["=="](dictEq)(v)(x);
          });
      };
  };
  var dropWhile = function (p) {
      return function (xs) {
          return (span(p)(xs)).rest;
      };
  };
  var deleteAt = $foreign._deleteAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Maybe_Unsafe.fromJust(deleteAt(i)(v2));
              })(findIndex(v(v1))(v2));
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Prelude["++"](Prelude.semigroupArray)(xs)(Data_Foldable.foldl(Data_Foldable.foldableArray)(Prelude.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Prelude["=="](dictEq));
  };
  var $$delete = function (dictEq) {
      return deleteBy(Prelude.eq(dictEq));
  };
  var $bslash$bslash = function (dictEq) {
      return function (xs) {
          return function (ys) {
              if ($$null(xs)) {
                  return [  ];
              };
              if (Prelude.otherwise) {
                  return $foreign["uncons'"](Prelude["const"](xs))(function (y) {
                      return function (ys2) {
                          return $bslash$bslash(dictEq)($$delete(dictEq)(y)(xs))(ys2);
                      };
                  })(ys);
              };
              throw new Error("Failed pattern match: " + [ xs.constructor.name, ys.constructor.name ]);
          };
      };
  };
  var concatMap = Prelude.flip(Prelude.bind(Prelude.bindArray));
  var mapMaybe = function (f) {
      return concatMap(function ($69) {
          return Data_Maybe.maybe([  ])(singleton)(f($69));
      });
  };
  var catMaybes = mapMaybe(Prelude.id(Prelude.categoryFn));
  var alterAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  var $66 = f(x);
                  if ($66 instanceof Data_Maybe.Nothing) {
                      return deleteAt(i)(xs);
                  };
                  if ($66 instanceof Data_Maybe.Just) {
                      return updateAt(i)($66.value0)(xs);
                  };
                  throw new Error("Failed pattern match at Data.Array line 349, column 3 - line 358, column 1: " + [ $66.constructor.name ]);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)($bang$bang(xs)(i));
          };
      };
  };
  exports["foldM"] = foldM;
  exports["unzip"] = unzip;
  exports["zip"] = zip;
  exports["zipWithA"] = zipWithA;
  exports["intersectBy"] = intersectBy;
  exports["intersect"] = intersect;
  exports["\\\\"] = $bslash$bslash;
  exports["deleteBy"] = deleteBy;
  exports["delete"] = $$delete;
  exports["unionBy"] = unionBy;
  exports["union"] = union;
  exports["nubBy"] = nubBy;
  exports["nub"] = nub;
  exports["groupBy"] = groupBy;
  exports["group'"] = group$prime;
  exports["group"] = group;
  exports["span"] = span;
  exports["dropWhile"] = dropWhile;
  exports["takeWhile"] = takeWhile;
  exports["take"] = take;
  exports["sortBy"] = sortBy;
  exports["sort"] = sort;
  exports["catMaybes"] = catMaybes;
  exports["mapMaybe"] = mapMaybe;
  exports["filterM"] = filterM;
  exports["concatMap"] = concatMap;
  exports["alterAt"] = alterAt;
  exports["modifyAt"] = modifyAt;
  exports["updateAt"] = updateAt;
  exports["deleteAt"] = deleteAt;
  exports["insertAt"] = insertAt;
  exports["findLastIndex"] = findLastIndex;
  exports["findIndex"] = findIndex;
  exports["elemLastIndex"] = elemLastIndex;
  exports["elemIndex"] = elemIndex;
  exports["index"] = index;
  exports["!!"] = $bang$bang;
  exports["uncons"] = uncons;
  exports["init"] = init;
  exports["tail"] = tail;
  exports["last"] = last;
  exports["head"] = head;
  exports["insertBy"] = insertBy;
  exports["insert"] = insert;
  exports[":"] = $colon;
  exports["null"] = $$null;
  exports["many"] = many;
  exports["some"] = some;
  exports["replicateM"] = replicateM;
  exports[".."] = $dot$dot;
  exports["singleton"] = singleton;
  exports["zipWith"] = $foreign.zipWith;
  exports["drop"] = $foreign.drop;
  exports["slice"] = $foreign.slice;
  exports["filter"] = $foreign.filter;
  exports["concat"] = $foreign.concat;
  exports["reverse"] = $foreign.reverse;
  exports["snoc"] = $foreign.snoc;
  exports["cons"] = $foreign.cons;
  exports["length"] = $foreign.length;
  exports["replicate"] = $foreign.replicate;
  exports["range"] = $foreign.range;;
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array.Unsafe

  exports.unsafeIndex = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
 
})(PS["Data.Array.Unsafe"] = PS["Data.Array.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Array.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];     
  var tail = function (xs) {
      return Data_Array.slice(1)(Data_Array.length(xs))(xs);
  };
  var last = function (xs) {
      return $foreign.unsafeIndex(xs)(Data_Array.length(xs) - 1);
  };
  var init = function (xs) {
      return Data_Array.slice(0)(Data_Array.length(xs) - 1)(xs);
  };
  var head = function (xs) {
      return $foreign.unsafeIndex(xs)(0);
  };
  exports["init"] = init;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["head"] = head;
  exports["unsafeIndex"] = $foreign.unsafeIndex;;
 
})(PS["Data.Array.Unsafe"] = PS["Data.Array.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];     
  var Clown = (function () {
      function Clown(value0) {
          this.value0 = value0;
      };
      Clown.create = function (value0) {
          return new Clown(value0);
      };
      return Clown;
  })();
  var runClown = function (v) {
      return v.value0;
  };
  var clownFunctor = new Prelude.Functor(function (v) {
      return function ($15) {
          return Clown.create(runClown($15));
      };
  });
  var clownBifunctor = function (dictFunctor) {
      return new Data_Bifunctor.Bifunctor(function (f) {
          return function (v) {
              return function ($16) {
                  return Clown.create(Prelude.map(dictFunctor)(f)(runClown($16)));
              };
          };
      });
  };
  var clownBiapply = function (dictApply) {
      return new Control_Biapply.Biapply(function () {
          return clownBifunctor(dictApply["__superclass_Prelude.Functor_0"]());
      }, function (v) {
          return function (v1) {
              return new Clown(Prelude["<*>"](dictApply)(v.value0)(v1.value0));
          };
      });
  };
  var clownBiapplicative = function (dictApplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return clownBiapply(dictApplicative["__superclass_Prelude.Apply_0"]());
      }, function (a) {
          return function (v) {
              return new Clown(Prelude.pure(dictApplicative)(a));
          };
      });
  };
  exports["Clown"] = Clown;
  exports["runClown"] = runClown;
  exports["clownBifunctor"] = clownBifunctor;
  exports["clownFunctor"] = clownFunctor;
  exports["clownBiapply"] = clownBiapply;
  exports["clownBiapplicative"] = clownBiapplicative;;
 
})(PS["Data.Bifunctor.Clown"] = PS["Data.Bifunctor.Clown"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];     
  var Flip = (function () {
      function Flip(value0) {
          this.value0 = value0;
      };
      Flip.create = function (value0) {
          return new Flip(value0);
      };
      return Flip;
  })();
  var runFlip = function (v) {
      return v.value0;
  };
  var flipFunctor = function (dictBifunctor) {
      return new Prelude.Functor(function (f) {
          return function ($13) {
              return Flip.create(Data_Bifunctor.lmap(dictBifunctor)(f)(runFlip($13)));
          };
      });
  };
  var flipBifunctor = function (dictBifunctor) {
      return new Data_Bifunctor.Bifunctor(function (f) {
          return function (g) {
              return function ($14) {
                  return Flip.create(Data_Bifunctor.bimap(dictBifunctor)(g)(f)(runFlip($14)));
              };
          };
      });
  };
  var flipBiapply = function (dictBiapply) {
      return new Control_Biapply.Biapply(function () {
          return flipBifunctor(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]());
      }, function (v) {
          return function (v1) {
              return new Flip(Control_Biapply["<<*>>"](dictBiapply)(v.value0)(v1.value0));
          };
      });
  };
  var flipBiapplicative = function (dictBiapplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return flipBiapply(dictBiapplicative["__superclass_Control.Biapply.Biapply_0"]());
      }, function (a) {
          return function (b) {
              return new Flip(Control_Biapplicative.bipure(dictBiapplicative)(b)(a));
          };
      });
  };
  exports["Flip"] = Flip;
  exports["runFlip"] = runFlip;
  exports["flipBifunctor"] = flipBifunctor;
  exports["flipFunctor"] = flipFunctor;
  exports["flipBiapply"] = flipBiapply;
  exports["flipBiapplicative"] = flipBiapplicative;;
 
})(PS["Data.Bifunctor.Flip"] = PS["Data.Bifunctor.Flip"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];     
  var Join = (function () {
      function Join(value0) {
          this.value0 = value0;
      };
      Join.create = function (value0) {
          return new Join(value0);
      };
      return Join;
  })();
  var runJoin = function (v) {
      return v.value0;
  };
  var joinFunctor = function (dictBifunctor) {
      return new Prelude.Functor(function (f) {
          return Prelude["<$>"](Prelude.functorFn)(Join.create)(function ($12) {
              return Data_Bifunctor.bimap(dictBifunctor)(f)(f)(runJoin($12));
          });
      });
  };
  var joinApply = function (dictBiapply) {
      return new Prelude.Apply(function () {
          return joinFunctor(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]());
      }, function (v) {
          return function (v1) {
              return new Join(Control_Biapply["<<*>>"](dictBiapply)(v.value0)(v1.value0));
          };
      });
  };
  var joinApplicative = function (dictBiapplicative) {
      return new Prelude.Applicative(function () {
          return joinApply(dictBiapplicative["__superclass_Control.Biapply.Biapply_0"]());
      }, function (a) {
          return new Join(Control_Biapplicative.bipure(dictBiapplicative)(a)(a));
      });
  };
  exports["Join"] = Join;
  exports["runJoin"] = runJoin;
  exports["joinFunctor"] = joinFunctor;
  exports["joinApply"] = joinApply;
  exports["joinApplicative"] = joinApplicative;;
 
})(PS["Data.Bifunctor.Join"] = PS["Data.Bifunctor.Join"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];     
  var Joker = (function () {
      function Joker(value0) {
          this.value0 = value0;
      };
      Joker.create = function (value0) {
          return new Joker(value0);
      };
      return Joker;
  })();
  var runJoker = function (v) {
      return v.value0;
  };
  var jokerFunctor = function (dictFunctor) {
      return new Prelude.Functor(function (g) {
          return function ($15) {
              return Joker.create(Prelude.map(dictFunctor)(g)(runJoker($15)));
          };
      });
  };
  var jokerBifunctor = function (dictFunctor) {
      return new Data_Bifunctor.Bifunctor(function (v) {
          return function (g) {
              return function ($16) {
                  return Joker.create(Prelude.map(dictFunctor)(g)(runJoker($16)));
              };
          };
      });
  };
  var jokerBiapply = function (dictApply) {
      return new Control_Biapply.Biapply(function () {
          return jokerBifunctor(dictApply["__superclass_Prelude.Functor_0"]());
      }, function (v) {
          return function (v1) {
              return new Joker(Prelude["<*>"](dictApply)(v.value0)(v1.value0));
          };
      });
  };
  var jokerBiapplicative = function (dictApplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return jokerBiapply(dictApplicative["__superclass_Prelude.Apply_0"]());
      }, function (v) {
          return function (b) {
              return new Joker(Prelude.pure(dictApplicative)(b));
          };
      });
  };
  exports["Joker"] = Joker;
  exports["runJoker"] = runJoker;
  exports["jokerBifunctor"] = jokerBifunctor;
  exports["jokerFunctor"] = jokerFunctor;
  exports["jokerBiapply"] = jokerBiapply;
  exports["jokerBiapplicative"] = jokerBiapplicative;;
 
})(PS["Data.Bifunctor.Joker"] = PS["Data.Bifunctor.Joker"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];     
  var Pair = (function () {
      function Pair(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Pair.create = function (value0) {
          return function (value1) {
              return new Pair(value0, value1);
          };
      };
      return Pair;
  })();
  var productBifunctor = function (dictBifunctor) {
      return function (dictBifunctor1) {
          return new Data_Bifunctor.Bifunctor(function (f) {
              return function (g) {
                  return function (v) {
                      return new Pair(Data_Bifunctor.bimap(dictBifunctor)(f)(g)(v.value0), Data_Bifunctor.bimap(dictBifunctor1)(f)(g)(v.value1));
                  };
              };
          });
      };
  };
  var productBiapply = function (dictBiapply) {
      return function (dictBiapply1) {
          return new Control_Biapply.Biapply(function () {
              return productBifunctor(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(dictBiapply1["__superclass_Data.Bifunctor.Bifunctor_0"]());
          }, function (v) {
              return function (v1) {
                  return new Pair(Control_Biapply.biapply(dictBiapply)(v.value0)(v1.value0), Control_Biapply.biapply(dictBiapply1)(v.value1)(v1.value1));
              };
          });
      };
  };
  var productBiapplicative = function (dictBiapplicative) {
      return function (dictBiapplicative1) {
          return new Control_Biapplicative.Biapplicative(function () {
              return productBiapply(dictBiapplicative["__superclass_Control.Biapply.Biapply_0"]())(dictBiapplicative1["__superclass_Control.Biapply.Biapply_0"]());
          }, function (a) {
              return function (b) {
                  return new Pair(Control_Biapplicative.bipure(dictBiapplicative)(a)(b), Control_Biapplicative.bipure(dictBiapplicative1)(a)(b));
              };
          });
      };
  };
  exports["Pair"] = Pair;
  exports["productBifunctor"] = productBifunctor;
  exports["productBiapply"] = productBiapply;
  exports["productBiapplicative"] = productBiapplicative;;
 
})(PS["Data.Bifunctor.Product"] = PS["Data.Bifunctor.Product"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Data_Bifunctor = PS["Data.Bifunctor"];     
  var Wrap = (function () {
      function Wrap(value0) {
          this.value0 = value0;
      };
      Wrap.create = function (value0) {
          return new Wrap(value0);
      };
      return Wrap;
  })();
  var unwrap = function (v) {
      return v.value0;
  };
  var wrapBifunctor = function (dictBifunctor) {
      return new Data_Bifunctor.Bifunctor(function (f) {
          return function (g) {
              return function ($13) {
                  return Wrap.create(Data_Bifunctor.bimap(dictBifunctor)(f)(g)(unwrap($13)));
              };
          };
      });
  };
  var wrapBiapply = function (dictBiapply) {
      return new Control_Biapply.Biapply(function () {
          return wrapBifunctor(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]());
      }, function (v) {
          return function (v1) {
              return new Wrap(Control_Biapply["<<*>>"](dictBiapply)(v.value0)(v1.value0));
          };
      });
  };
  var wrapBiapplicative = function (dictBiapplicative) {
      return new Control_Biapplicative.Biapplicative(function () {
          return wrapBiapply(dictBiapplicative["__superclass_Control.Biapply.Biapply_0"]());
      }, function (a) {
          return function (b) {
              return new Wrap(Control_Biapplicative.bipure(dictBiapplicative)(a)(b));
          };
      });
  };
  var wrapFunctor = function (dictBifunctor) {
      return new Prelude.Functor(function (f) {
          return function ($14) {
              return Wrap.create(Data_Bifunctor.rmap(dictBifunctor)(f)(unwrap($14)));
          };
      });
  };
  exports["Wrap"] = Wrap;
  exports["unwrap"] = unwrap;
  exports["wrapBifunctor"] = wrapBifunctor;
  exports["wrapFunctor"] = wrapFunctor;
  exports["wrapBiapply"] = wrapBiapply;
  exports["wrapBiapplicative"] = wrapBiapplicative;;
 
})(PS["Data.Bifunctor.Wrap"] = PS["Data.Bifunctor.Wrap"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Char

  exports.toString = function (c) {
    return c;
  };

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };

  exports.toLower = function (c) {
    return c.toLowerCase();
  };

  exports.toUpper = function (c) {
    return c.toUpperCase();
  };
 
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Char"];
  var Prelude = PS["Prelude"];
  exports["toUpper"] = $foreign.toUpper;
  exports["toLower"] = $foreign.toLower;
  exports["toCharCode"] = $foreign.toCharCode;
  exports["fromCharCode"] = $foreign.fromCharCode;
  exports["toString"] = $foreign.toString;;
 
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];     
  var either9of9 = function (v) {
      return new Data_Either.Right(v);
  };
  var either9of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Right(v));
  };
  var either8of9 = function (v) {
      return new Data_Either.Left(new Data_Either.Right(v));
  };
  var either8of8 = function (v) {
      return new Data_Either.Right(v);
  };
  var either8of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
  };
  var either7of9 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
  };
  var either7of8 = function (v) {
      return new Data_Either.Left(new Data_Either.Right(v));
  };
  var either7of7 = function (v) {
      return new Data_Either.Right(v);
  };
  var either7of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))));
  };
  var either6of9 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))));
  };
  var either6of8 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
  };
  var either6of7 = function (v) {
      return new Data_Either.Left(new Data_Either.Right(v));
  };
  var either6of6 = function (v) {
      return new Data_Either.Right(v);
  };
  var either6of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))));
  };
  var either5of9 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))));
  };
  var either5of8 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))));
  };
  var either5of7 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
  };
  var either5of6 = function (v) {
      return new Data_Either.Left(new Data_Either.Right(v));
  };
  var either5of5 = function (v) {
      return new Data_Either.Right(v);
  };
  var either5of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))))));
  };
  var either4of9 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))))));
  };
  var either4of8 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))));
  };
  var either4of7 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))));
  };
  var either4of6 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
  };
  var either4of5 = function (v) {
      return new Data_Either.Left(new Data_Either.Right(v));
  };
  var either4of4 = function (v) {
      return new Data_Either.Right(v);
  };
  var either4of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))))));
  };
  var either3of9 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))))));
  };
  var either3of8 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))))));
  };
  var either3of7 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))));
  };
  var either3of6 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))));
  };
  var either3of5 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
  };
  var either3of4 = function (v) {
      return new Data_Either.Left(new Data_Either.Right(v));
  };
  var either3of3 = function (v) {
      return new Data_Either.Right(v);
  };
  var either3of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))))))));
  };
  var either2of9 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))))))));
  };
  var either2of8 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))))));
  };
  var either2of7 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))))));
  };
  var either2of6 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))));
  };
  var either2of5 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v))));
  };
  var either2of4 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)));
  };
  var either2of3 = function (v) {
      return new Data_Either.Left(new Data_Either.Right(v));
  };
  var either2of2 = Data_Either.Right.create;
  var either2of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Right(v)))))))));
  };
  var either2 = Data_Either.either;
  var either3 = function (a) {
      return function (b) {
          return function (z) {
              return Data_Either.either(either2(a)(b))(z);
          };
      };
  };
  var either4 = function (a) {
      return function (b) {
          return function (c) {
              return function (z) {
                  return Data_Either.either(either3(a)(b)(c))(z);
              };
          };
      };
  };
  var either5 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (z) {
                      return Data_Either.either(either4(a)(b)(c)(d))(z);
                  };
              };
          };
      };
  };
  var either6 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (z) {
                          return Data_Either.either(either5(a)(b)(c)(d)(e))(z);
                      };
                  };
              };
          };
      };
  };
  var either7 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (z) {
                              return Data_Either.either(either6(a)(b)(c)(d)(e)(f))(z);
                          };
                      };
                  };
              };
          };
      };
  };
  var either8 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (z) {
                                  return Data_Either.either(either7(a)(b)(c)(d)(e)(f)(g))(z);
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var either9 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (z) {
                                      return Data_Either.either(either8(a)(b)(c)(d)(e)(f)(g)(h))(z);
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var either1of9 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v))))))));
  };
  var either1of8 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v)))))));
  };
  var either1of7 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v))))));
  };
  var either1of6 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v)))));
  };
  var either1of5 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v))));
  };
  var either1of4 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v)));
  };
  var either1of3 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(v));
  };
  var either1of2 = Data_Either.Left.create;
  var either1of10 = function (v) {
      return new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(new Data_Either.Left(v)))))))));
  };
  var either10of10 = function (v) {
      return new Data_Either.Right(v);
  };
  var either10 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (z) {
                                          return Data_Either.either(either9(a)(b)(c)(d)(e)(f)(g)(h)(i))(z);
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  exports["either10"] = either10;
  exports["either9"] = either9;
  exports["either8"] = either8;
  exports["either7"] = either7;
  exports["either6"] = either6;
  exports["either5"] = either5;
  exports["either4"] = either4;
  exports["either3"] = either3;
  exports["either2"] = either2;
  exports["either10of10"] = either10of10;
  exports["either9of10"] = either9of10;
  exports["either8of10"] = either8of10;
  exports["either7of10"] = either7of10;
  exports["either6of10"] = either6of10;
  exports["either5of10"] = either5of10;
  exports["either4of10"] = either4of10;
  exports["either3of10"] = either3of10;
  exports["either2of10"] = either2of10;
  exports["either1of10"] = either1of10;
  exports["either9of9"] = either9of9;
  exports["either8of9"] = either8of9;
  exports["either7of9"] = either7of9;
  exports["either6of9"] = either6of9;
  exports["either5of9"] = either5of9;
  exports["either4of9"] = either4of9;
  exports["either3of9"] = either3of9;
  exports["either2of9"] = either2of9;
  exports["either1of9"] = either1of9;
  exports["either8of8"] = either8of8;
  exports["either7of8"] = either7of8;
  exports["either6of8"] = either6of8;
  exports["either5of8"] = either5of8;
  exports["either4of8"] = either4of8;
  exports["either3of8"] = either3of8;
  exports["either2of8"] = either2of8;
  exports["either1of8"] = either1of8;
  exports["either7of7"] = either7of7;
  exports["either6of7"] = either6of7;
  exports["either5of7"] = either5of7;
  exports["either4of7"] = either4of7;
  exports["either3of7"] = either3of7;
  exports["either2of7"] = either2of7;
  exports["either1of7"] = either1of7;
  exports["either6of6"] = either6of6;
  exports["either5of6"] = either5of6;
  exports["either4of6"] = either4of6;
  exports["either3of6"] = either3of6;
  exports["either2of6"] = either2of6;
  exports["either1of6"] = either1of6;
  exports["either5of5"] = either5of5;
  exports["either4of5"] = either4of5;
  exports["either3of5"] = either3of5;
  exports["either2of5"] = either2of5;
  exports["either1of5"] = either1of5;
  exports["either4of4"] = either4of4;
  exports["either3of4"] = either3of4;
  exports["either2of4"] = either2of4;
  exports["either1of4"] = either1of4;
  exports["either3of3"] = either3of3;
  exports["either2of3"] = either2of3;
  exports["either1of3"] = either1of3;
  exports["either2of2"] = either2of2;
  exports["either1of2"] = either1of2;;
 
})(PS["Data.Either.Nested"] = PS["Data.Either.Nested"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foreign

  // jshint maxparams: 3
  exports.parseJSONImpl = function (left, right, str) {
    try {
      return right(JSON.parse(str));
    } catch (e) {
      return left(e.toString());
    }
  };

  // jshint maxparams: 1
  exports.toForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };

  exports.isNull = function (value) {
    return value === null;
  };

  exports.isUndefined = function (value) {
    return value === undefined;
  };

  exports.isArray = Array.isArray || function (value) {
    return Object.prototype.toString.call(value) === "[object Array]";
  };
 
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Function

  exports.mkFn0 = function (fn) {
    return function () {
      return fn({});
    };
  };

  exports.mkFn1 = function (fn) {
    return function (a) {
      return fn(a);
    };
  };

  exports.mkFn2 = function (fn) {
    /* jshint maxparams: 2 */
    return function (a, b) {
      return fn(a)(b);
    };
  };

  exports.mkFn3 = function (fn) {
    /* jshint maxparams: 3 */
    return function (a, b, c) {
      return fn(a)(b)(c);
    };
  };

  exports.mkFn4 = function (fn) {
    /* jshint maxparams: 4 */
    return function (a, b, c, d) {
      return fn(a)(b)(c)(d);
    };
  };

  exports.mkFn5 = function (fn) {
    /* jshint maxparams: 5 */
    return function (a, b, c, d, e) {
      return fn(a)(b)(c)(d)(e);
    };
  };

  exports.mkFn6 = function (fn) {
    /* jshint maxparams: 6 */
    return function (a, b, c, d, e, f) {
      return fn(a)(b)(c)(d)(e)(f);
    };
  };

  exports.mkFn7 = function (fn) {
    /* jshint maxparams: 7 */
    return function (a, b, c, d, e, f, g) {
      return fn(a)(b)(c)(d)(e)(f)(g);
    };
  };

  exports.mkFn8 = function (fn) {
    /* jshint maxparams: 8 */
    return function (a, b, c, d, e, f, g, h) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h);
    };
  };

  exports.mkFn9 = function (fn) {
    /* jshint maxparams: 9 */
    return function (a, b, c, d, e, f, g, h, i) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);
    };
  };

  exports.mkFn10 = function (fn) {
    /* jshint maxparams: 10 */
    return function (a, b, c, d, e, f, g, h, i, j) {
      return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
    };
  };

  exports.runFn0 = function (fn) {
    return fn();
  };

  exports.runFn1 = function (fn) {
    return function (a) {
      return fn(a);
    };
  };

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };

  exports.runFn3 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return fn(a, b, c);
        };
      };
    };
  };

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };

  exports.runFn5 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return fn(a, b, c, d, e);
            };
          };
        };
      };
    };
  };

  exports.runFn6 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return fn(a, b, c, d, e, f);
              };
            };
          };
        };
      };
    };
  };

  exports.runFn7 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return fn(a, b, c, d, e, f, g);
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runFn8 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return fn(a, b, c, d, e, f, g, h);
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runFn9 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return function (i) {
                      return fn(a, b, c, d, e, f, g, h, i);
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };

  exports.runFn10 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return function (e) {
              return function (f) {
                return function (g) {
                  return function (h) {
                    return function (i) {
                      return function (j) {
                        return fn(a, b, c, d, e, f, g, h, i, j);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
  };
 
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Function"];
  var Prelude = PS["Prelude"];     
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  exports["on"] = on;
  exports["runFn10"] = $foreign.runFn10;
  exports["runFn9"] = $foreign.runFn9;
  exports["runFn8"] = $foreign.runFn8;
  exports["runFn7"] = $foreign.runFn7;
  exports["runFn6"] = $foreign.runFn6;
  exports["runFn5"] = $foreign.runFn5;
  exports["runFn4"] = $foreign.runFn4;
  exports["runFn3"] = $foreign.runFn3;
  exports["runFn2"] = $foreign.runFn2;
  exports["runFn1"] = $foreign.runFn1;
  exports["runFn0"] = $foreign.runFn0;
  exports["mkFn10"] = $foreign.mkFn10;
  exports["mkFn9"] = $foreign.mkFn9;
  exports["mkFn8"] = $foreign.mkFn8;
  exports["mkFn7"] = $foreign.mkFn7;
  exports["mkFn6"] = $foreign.mkFn6;
  exports["mkFn5"] = $foreign.mkFn5;
  exports["mkFn4"] = $foreign.mkFn4;
  exports["mkFn3"] = $foreign.mkFn3;
  exports["mkFn2"] = $foreign.mkFn2;
  exports["mkFn1"] = $foreign.mkFn1;
  exports["mkFn0"] = $foreign.mkFn0;;
 
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.String

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports._charCodeAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charCodeAt(i)) : nothing;
        };
      };
    };
  };

  exports._toChar = function (just) {
    return function (nothing) {
      return function (s) {
        return s.length === 1 ? just(s) : nothing;
      };
    };
  };

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports["_indexOf'"] = function (just) {
    return function (nothing) {
      return function (x) {
        return function (startAt) {
          return function (s) {
            if (startAt < 0 || startAt > s.length) return nothing;
            var i = s.indexOf(x, startAt);
            return i === -1 ? nothing : just(i);
          };
        };
      };
    };
  };

  exports._lastIndexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.lastIndexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports["_lastIndexOf'"] = function (just) {
    return function (nothing) {
      return function (x) {
        return function (startAt) {
          return function (s) {
            if (startAt < 0 || startAt > s.length) return nothing;
            var i = s.lastIndexOf(x, startAt);
            return i === -1 ? nothing : just(i);
          };
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._localeCompare = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (s1) {
          return function (s2) {
            var result = s1.localeCompare(s2);
            return result < 0 ? lt : result > 0 ? gt : eq;
          };
        };
      };
    };
  };

  exports.replace = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(s1, s2);
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substr(n);
    };
  };

  exports.count = function (p) {
    return function (s) {
      for (var i = 0; i < s.length && p(s.charAt(i)); i++); {}
      return i;
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.toLower = function (s) {
    return s.toLowerCase();
  };

  exports.toUpper = function (s) {
    return s.toUpperCase();
  };

  exports.trim = function (s) {
    return s.trim();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
 
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.String.Unsafe

  exports.charCodeAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charCodeAt(i);
      throw new Error("Data.String.Unsafe.charCodeAt: Invalid index.");
    };
  };

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };

  exports.char = function (s) {
    if (s.length === 1) return s.charAt(0);
    throw new Error("Data.String.Unsafe.char: Expected string of length 1.");
  };
 
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.String.Unsafe"];
  exports["charCodeAt"] = $foreign.charCodeAt;
  exports["charAt"] = $foreign.charAt;
  exports["char"] = $foreign["char"];;
 
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Char = PS["Data.Char"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];     
  var uncons = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just({
          head: Data_String_Unsafe.charAt(0)(v), 
          tail: $foreign.drop(1)(v)
      });
  };
  var toChar = $foreign._toChar(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var takeWhile = function (p) {
      return function (s) {
          return $foreign.take($foreign.count(p)(s))(s);
      };
  };
  var $$null = function (s) {
      return $foreign.length(s) === 0;
  };
  var localeCompare = $foreign._localeCompare(Prelude.LT.value)(Prelude.EQ.value)(Prelude.GT.value);
  var lastIndexOf$prime = $foreign["_lastIndexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var lastIndexOf = $foreign._lastIndexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var stripSuffix = function (suffix) {
      return function (str) {
          var $2 = lastIndexOf(suffix)(str);
          if ($2 instanceof Data_Maybe.Just && $2.value0 === $foreign.length(str) - $foreign.length(suffix)) {
              return Data_Maybe.Just.create($foreign.take($2.value0)(str));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var indexOf$prime = $foreign["_indexOf'"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var stripPrefix = function (prefix) {
      return function (str) {
          var $4 = indexOf(prefix)(str);
          if ($4 instanceof Data_Maybe.Just && $4.value0 === 0) {
              return Data_Maybe.Just.create($foreign.drop($foreign.length(prefix))(str));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  var fromChar = Data_Char.toString;
  var singleton = fromChar;
  var dropWhile = function (p) {
      return function (s) {
          return $foreign.drop($foreign.count(p)(s))(s);
      };
  };
  var contains = function (x) {
      return function (s) {
          return Data_Maybe.isJust(indexOf(x)(s));
      };
  };
  var charCodeAt = $foreign._charCodeAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var charAt = $foreign._charAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["stripSuffix"] = stripSuffix;
  exports["stripPrefix"] = stripPrefix;
  exports["dropWhile"] = dropWhile;
  exports["takeWhile"] = takeWhile;
  exports["localeCompare"] = localeCompare;
  exports["singleton"] = singleton;
  exports["uncons"] = uncons;
  exports["null"] = $$null;
  exports["lastIndexOf'"] = lastIndexOf$prime;
  exports["lastIndexOf"] = lastIndexOf;
  exports["indexOf'"] = indexOf$prime;
  exports["indexOf"] = indexOf;
  exports["contains"] = contains;
  exports["toChar"] = toChar;
  exports["fromChar"] = fromChar;
  exports["charCodeAt"] = charCodeAt;
  exports["charAt"] = charAt;
  exports["joinWith"] = $foreign.joinWith;
  exports["trim"] = $foreign.trim;
  exports["toUpper"] = $foreign.toUpper;
  exports["toLower"] = $foreign.toLower;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["split"] = $foreign.split;
  exports["drop"] = $foreign.drop;
  exports["take"] = $foreign.take;
  exports["count"] = $foreign.count;
  exports["replace"] = $foreign.replace;
  exports["length"] = $foreign.length;
  exports["fromCharArray"] = $foreign.fromCharArray;;
 
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Foreign"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Function = PS["Data.Function"];
  var Data_Int = PS["Data.Int"];
  var Data_String = PS["Data.String"];     
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var JSONError = (function () {
      function JSONError(value0) {
          this.value0 = value0;
      };
      JSONError.create = function (value0) {
          return new JSONError(value0);
      };
      return JSONError;
  })();
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Prelude.pure(Data_Either.applicativeEither)($foreign.unsafeFromForeign(value));
          };
          return new Data_Either.Left(new TypeMismatch(tag, $foreign.tagOf(value)));
      };
  };
  var showForeignError = new Prelude.Show(function (v) {
      if (v instanceof TypeMismatch) {
          return "Type mismatch: expected " + (v.value0 + (", found " + v.value1));
      };
      if (v instanceof ErrorAtIndex) {
          return "Error at array index " + (Prelude.show(Prelude.showInt)(v.value0) + (": " + Prelude.show(showForeignError)(v.value1)));
      };
      if (v instanceof ErrorAtProperty) {
          return "Error at property " + (Prelude.show(Prelude.showString)(v.value0) + (": " + Prelude.show(showForeignError)(v.value1)));
      };
      if (v instanceof JSONError) {
          return "JSON error: " + v.value0;
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  });
  var readString = unsafeReadTagged("String");
  var readNumber = unsafeReadTagged("Number");
  var readInt = function (value) {
      var error = Data_Either.Left.create(new TypeMismatch("Int", $foreign.tagOf(value)));
      var fromNumber = function ($30) {
          return Data_Maybe.maybe(error)(Prelude.pure(Data_Either.applicativeEither))(Data_Int.fromNumber($30));
      };
      return Data_Either.either(Prelude["const"](error))(fromNumber)(readNumber(value));
  };
  var readChar = function (value) {
      var error = Data_Either.Left.create(new TypeMismatch("Char", $foreign.tagOf(value)));
      var fromString = function ($31) {
          return Data_Maybe.maybe(error)(Prelude.pure(Data_Either.applicativeEither))(Data_String.toChar($31));
      };
      return Data_Either.either(Prelude["const"](error))(fromString)(readString(value));
  };
  var readBoolean = unsafeReadTagged("Boolean");
  var readArray = function (value) {
      if ($foreign.isArray(value)) {
          return Prelude.pure(Data_Either.applicativeEither)($foreign.unsafeFromForeign(value));
      };
      return new Data_Either.Left(new TypeMismatch("array", $foreign.tagOf(value)));
  };
  var parseJSON = function (json) {
      return $foreign.parseJSONImpl(function ($32) {
          return Data_Either.Left.create(JSONError.create($32));
      }, Data_Either.Right.create, json);
  };
  var eqForeignError = new Prelude.Eq(function (v) {
      return function (v1) {
          if (v instanceof TypeMismatch && v1 instanceof TypeMismatch) {
              return v.value0 === v1.value0 && v.value1 === v1.value1;
          };
          if (v instanceof ErrorAtIndex && v1 instanceof ErrorAtIndex) {
              return v.value0 === v1.value0 && Prelude["=="](eqForeignError)(v.value1)(v1.value1);
          };
          if (v instanceof ErrorAtProperty && v1 instanceof ErrorAtProperty) {
              return v.value0 === v1.value0 && Prelude["=="](eqForeignError)(v.value1)(v1.value1);
          };
          if (v instanceof JSONError && v1 instanceof JSONError) {
              return v.value0 === v1.value0;
          };
          return false;
      };
  });
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtIndex"] = ErrorAtIndex;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["JSONError"] = JSONError;
  exports["readArray"] = readArray;
  exports["readInt"] = readInt;
  exports["readNumber"] = readNumber;
  exports["readBoolean"] = readBoolean;
  exports["readChar"] = readChar;
  exports["readString"] = readString;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["parseJSON"] = parseJSON;
  exports["showForeignError"] = showForeignError;
  exports["eqForeignError"] = eqForeignError;
  exports["isArray"] = $foreign.isArray;
  exports["isUndefined"] = $foreign.isUndefined;
  exports["isNull"] = $foreign.isNull;
  exports["tagOf"] = $foreign.tagOf;
  exports["typeOf"] = $foreign.typeOf;
  exports["unsafeFromForeign"] = $foreign.unsafeFromForeign;
  exports["toForeign"] = $foreign.toForeign;;
 
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foreign.Index

  // jshint maxparams: 4
  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };

  // jshint maxparams: 2
  exports.unsafeHasOwnProperty = function (prop, value) {
    return Object.prototype.hasOwnProperty.call(value, prop);
  };

  exports.unsafeHasProperty = function (prop, value) {
    return prop in value;
  };
 
})(PS["Data.Foreign.Index"] = PS["Data.Foreign.Index"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Foreign.Index"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Int = PS["Data.Int"];     
  var Index = function (errorAt, hasOwnProperty, hasProperty, ix) {
      this.errorAt = errorAt;
      this.hasOwnProperty = hasOwnProperty;
      this.hasProperty = hasProperty;
      this.ix = ix;
  };
  var unsafeReadProp = function (k) {
      return function (value) {
          return $foreign.unsafeReadPropImpl(new Data_Either.Left(new Data_Foreign.TypeMismatch("object", Data_Foreign.typeOf(value))), Prelude.pure(Data_Either.applicativeEither), k, value);
      };
  };
  var prop = unsafeReadProp;
  var ix = function (dict) {
      return dict.ix;
  };
  var $bang = function (dictIndex) {
      return ix(dictIndex);
  };
  var index = unsafeReadProp;
  var hasPropertyImpl = function (v) {
      return function (value) {
          if (Data_Foreign.isNull(value)) {
              return false;
          };
          if (Data_Foreign.isUndefined(value)) {
              return false;
          };
          if (Data_Foreign.typeOf(value) === "object" || Data_Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasProperty(v, value);
          };
          return false;
      };
  };
  var hasProperty = function (dict) {
      return dict.hasProperty;
  };
  var hasOwnPropertyImpl = function (v) {
      return function (value) {
          if (Data_Foreign.isNull(value)) {
              return false;
          };
          if (Data_Foreign.isUndefined(value)) {
              return false;
          };
          if (Data_Foreign.typeOf(value) === "object" || Data_Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasOwnProperty(v, value);
          };
          return false;
      };
  };
  var indexInt = new Index(Data_Foreign.ErrorAtIndex.create, hasOwnPropertyImpl, hasPropertyImpl, Prelude.flip(index));
  var indexString = new Index(Data_Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl, Prelude.flip(prop));
  var hasOwnProperty = function (dict) {
      return dict.hasOwnProperty;
  };
  var errorAt = function (dict) {
      return dict.errorAt;
  };
  exports["Index"] = Index;
  exports["errorAt"] = errorAt;
  exports["hasOwnProperty"] = hasOwnProperty;
  exports["hasProperty"] = hasProperty;
  exports["!"] = $bang;
  exports["ix"] = ix;
  exports["index"] = index;
  exports["prop"] = prop;
  exports["indexString"] = indexString;
  exports["indexInt"] = indexInt;;
 
})(PS["Data.Foreign.Index"] = PS["Data.Foreign.Index"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Either = PS["Data.Either"];     
  var Null = function (x) {
      return x;
  };
  var runNull = function (v) {
      return v;
  };
  var readNull = function (v) {
      return function (value) {
          if (Data_Foreign.isNull(value)) {
              return Prelude.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
          };
          return Prelude["<$>"](Data_Either.functorEither)(function ($5) {
              return Null(Data_Maybe.Just.create($5));
          })(v(value));
      };
  };
  exports["Null"] = Null;
  exports["readNull"] = readNull;
  exports["runNull"] = runNull;;
 
})(PS["Data.Foreign.Null"] = PS["Data.Foreign.Null"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Either = PS["Data.Either"];     
  var NullOrUndefined = function (x) {
      return x;
  };
  var runNullOrUndefined = function (v) {
      return v;
  };
  var readNullOrUndefined = function (v) {
      return function (value) {
          if (Data_Foreign.isNull(value) || Data_Foreign.isUndefined(value)) {
              return Prelude.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
          };
          return Prelude["<$>"](Data_Either.functorEither)(function ($5) {
              return NullOrUndefined(Data_Maybe.Just.create($5));
          })(v(value));
      };
  };
  exports["NullOrUndefined"] = NullOrUndefined;
  exports["readNullOrUndefined"] = readNullOrUndefined;
  exports["runNullOrUndefined"] = runNullOrUndefined;;
 
})(PS["Data.Foreign.NullOrUndefined"] = PS["Data.Foreign.NullOrUndefined"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Either = PS["Data.Either"];     
  var Undefined = function (x) {
      return x;
  };
  var runUndefined = function (v) {
      return v;
  };
  var readUndefined = function (v) {
      return function (value) {
          if (Data_Foreign.isUndefined(value)) {
              return Prelude.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
          };
          return Prelude["<$>"](Data_Either.functorEither)(function ($5) {
              return Undefined(Data_Maybe.Just.create($5));
          })(v(value));
      };
  };
  exports["Undefined"] = Undefined;
  exports["readUndefined"] = readUndefined;
  exports["runUndefined"] = runUndefined;;
 
})(PS["Data.Foreign.Undefined"] = PS["Data.Foreign.Undefined"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Index = PS["Data.Foreign.Index"];
  var Data_Foreign_Null = PS["Data.Foreign.Null"];
  var Data_Foreign_NullOrUndefined = PS["Data.Foreign.NullOrUndefined"];
  var Data_Foreign_Undefined = PS["Data.Foreign.Undefined"];
  var Data_Int = PS["Data.Int"];
  var Data_Traversable = PS["Data.Traversable"];     
  var IsForeign = function (read) {
      this.read = read;
  };
  var stringIsForeign = new IsForeign(Data_Foreign.readString);
  var read = function (dict) {
      return dict.read;
  };
  var readJSON = function (dictIsForeign) {
      return function (json) {
          return Prelude[">>="](Data_Either.bindEither)(Data_Foreign.parseJSON(json))(read(dictIsForeign));
      };
  };
  var readWith = function (dictIsForeign) {
      return function (f) {
          return function (value) {
              return Data_Either.either(function ($8) {
                  return Data_Either.Left.create(f($8));
              })(Data_Either.Right.create)(read(dictIsForeign)(value));
          };
      };
  };
  var readProp = function (dictIsForeign) {
      return function (dictIndex) {
          return function (prop) {
              return function (value) {
                  return Prelude[">>="](Data_Either.bindEither)(Data_Foreign_Index["!"](dictIndex)(value)(prop))(readWith(dictIsForeign)(Data_Foreign_Index.errorAt(dictIndex)(prop)));
              };
          };
      };
  };
  var undefinedIsForeign = function (dictIsForeign) {
      return new IsForeign(Data_Foreign_Undefined.readUndefined(read(dictIsForeign)));
  };
  var numberIsForeign = new IsForeign(Data_Foreign.readNumber);
  var nullOrUndefinedIsForeign = function (dictIsForeign) {
      return new IsForeign(Data_Foreign_NullOrUndefined.readNullOrUndefined(read(dictIsForeign)));
  };
  var nullIsForeign = function (dictIsForeign) {
      return new IsForeign(Data_Foreign_Null.readNull(read(dictIsForeign)));
  };
  var intIsForeign = new IsForeign(Data_Foreign.readInt);
  var foreignIsForeign = new IsForeign(function (f) {
      return Prelude["return"](Data_Either.applicativeEither)(f);
  });
  var charIsForeign = new IsForeign(Data_Foreign.readChar);
  var booleanIsForeign = new IsForeign(Data_Foreign.readBoolean);
  var arrayIsForeign = function (dictIsForeign) {
      return new IsForeign(function (value) {
          var readElement = function (i) {
              return function (value1) {
                  return readWith(dictIsForeign)(Data_Foreign.ErrorAtIndex.create(i))(value1);
              };
          };
          var readElements = function (arr) {
              return Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Array.zipWith(readElement)(Data_Array.range(0)(Data_Array.length(arr)))(arr));
          };
          return Prelude[">>="](Data_Either.bindEither)(Data_Foreign.readArray(value))(readElements);
      });
  };
  exports["IsForeign"] = IsForeign;
  exports["readProp"] = readProp;
  exports["readWith"] = readWith;
  exports["readJSON"] = readJSON;
  exports["read"] = read;
  exports["foreignIsForeign"] = foreignIsForeign;
  exports["stringIsForeign"] = stringIsForeign;
  exports["charIsForeign"] = charIsForeign;
  exports["booleanIsForeign"] = booleanIsForeign;
  exports["numberIsForeign"] = numberIsForeign;
  exports["intIsForeign"] = intIsForeign;
  exports["arrayIsForeign"] = arrayIsForeign;
  exports["nullIsForeign"] = nullIsForeign;
  exports["undefinedIsForeign"] = undefinedIsForeign;
  exports["nullOrUndefinedIsForeign"] = nullOrUndefinedIsForeign;;
 
})(PS["Data.Foreign.Class"] = PS["Data.Foreign.Class"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foreign.EasyFFI

  exports.unsafeForeignProcedure = function(args) {
      return function (stmt) {
          return Function(wrap(args.slice()))();
          function wrap() {
              return !args.length ? stmt : 'return function (' + args.shift() + ') { ' + wrap() + ' };';
          }
      };
  };
 
})(PS["Data.Foreign.EasyFFI"] = PS["Data.Foreign.EasyFFI"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Foreign.EasyFFI"];
  var Prelude = PS["Prelude"];     
  var unsafeForeignFunction = function (args) {
      return function (expr) {
          return $foreign.unsafeForeignProcedure(args)("return " + (expr + ";"));
      };
  };
  exports["unsafeForeignFunction"] = unsafeForeignFunction;
  exports["unsafeForeignProcedure"] = $foreign.unsafeForeignProcedure;;
 
})(PS["Data.Foreign.EasyFFI"] = PS["Data.Foreign.EasyFFI"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foreign.Keys

  exports.unsafeKeys = Object.keys || function (value) {
    var keys = [];
    for (var prop in value) {
      if (Object.prototype.hasOwnProperty.call(value, prop)) {
        keys.push(prop);
      }
    }
    return keys;
  };
 
})(PS["Data.Foreign.Keys"] = PS["Data.Foreign.Keys"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.Foreign.Keys"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];     
  var keys = function (value) {
      if (Data_Foreign.isNull(value)) {
          return Data_Either.Left.create(new Data_Foreign.TypeMismatch("object", "null"));
      };
      if (Data_Foreign.isUndefined(value)) {
          return Data_Either.Left.create(new Data_Foreign.TypeMismatch("object", "undefined"));
      };
      if (Data_Foreign.typeOf(value) === "object") {
          return Data_Either.Right.create($foreign.unsafeKeys(value));
      };
      return Data_Either.Left.create(new Data_Foreign.TypeMismatch("object", Data_Foreign.typeOf(value)));
  };
  exports["keys"] = keys;;
 
})(PS["Data.Foreign.Keys"] = PS["Data.Foreign.Keys"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var List = function (x) {
      return x;
  };
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var runList = function (v) {
      return v;
  };
  var step = function ($220) {
      return Data_Lazy.force(runList($220));
  };
  var semigroupList = new Prelude.Semigroup(function (xs) {
      return function (ys) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return step(ys);
              };
              if (v instanceof Cons) {
                  return new Cons(v.value0, Prelude["<>"](semigroupList)(v.value1)(ys));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 671, column 5 - line 672, column 5: " + [ v.constructor.name ]);
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  });
  var showList = function (dictShow) {
      return new Prelude.Show(function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return "Nil";
              };
              if (v instanceof Cons) {
                  return "Cons (" + (Prelude.show(dictShow)(v.value0) + (") (" + (go(step(v.value1)) + ")")));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 640, column 1 - line 646, column 1: " + [ v.constructor.name ]);
          };
          return "fromStrict (" + (go(step(xs)) + ")");
      });
  };
  var uncons = function (xs) {
      var $73 = step(xs);
      if ($73 instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if ($73 instanceof Cons) {
          return new Data_Maybe.Just({
              head: $73.value0, 
              tail: $73.value1
          });
      };
      throw new Error("Failed pattern match at Data.List.Lazy line 281, column 1 - line 282, column 1: " + [ $73.constructor.name ]);
  };
  var tail = function (xs) {
      return Prelude["<$>"](Data_Maybe.functorMaybe)(function (v) {
          return v.tail;
      })(uncons(xs));
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Prelude["<$>"](Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var take = function (n) {
      return function (xs) {
          var go = function (v) {
              return function (v1) {
                  if (v === 0) {
                      return Nil.value;
                  };
                  if (v1 instanceof Nil) {
                      return Nil.value;
                  };
                  if (v1 instanceof Cons) {
                      return new Cons(v1.value0, take(v - 1)(v1.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 448, column 3 - line 449, column 3: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
      };
  };
  var takeWhile = function (p) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Cons && p(v.value0)) {
                  return new Cons(v.value0, takeWhile(p)(v.value1));
              };
              return Nil.value;
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  };
  var updateAt = function (n) {
      return function (x) {
          return function (xs) {
              var go = function (v) {
                  return function (v1) {
                      if (v1 instanceof Nil) {
                          return Nil.value;
                      };
                      if (v === 0 && v1 instanceof Cons) {
                          return new Cons(x, v1.value1);
                      };
                      if (v1 instanceof Cons) {
                          return new Cons(v1.value0, updateAt(v - 1)(x)(v1.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 344, column 3 - line 345, column 3: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
          };
      };
  };
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function (v) {
                  return function (v1) {
                      if (v instanceof Nil) {
                          return Nil.value;
                      };
                      if (v1 instanceof Nil) {
                          return Nil.value;
                      };
                      if (v instanceof Cons && v1 instanceof Cons) {
                          return new Cons(f(v.value0)(v1.value0), zipWith(f)(v.value1)(v1.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 615, column 3 - line 616, column 3: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Prelude["<*>"](Data_Lazy.applyLazy)(Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs)))(runList(ys));
          };
      };
  };
  var zip = zipWith(Data_Tuple.Tuple.create);
  var $$null = function ($221) {
      return Data_Maybe.isNothing(uncons($221));
  };
  var nil = List(Data_Lazy.defer(function (v) {
      return Nil.value;
  }));
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, nil);
  var mapMaybe = function (f) {
      return function (xs) {
          var go = function (__copy_v) {
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return Nil.value;
                  };
                  if (v instanceof Cons) {
                      var $97 = f(v.value0);
                      if ($97 instanceof Data_Maybe.Nothing) {
                          var __tco_v = step(v.value1);
                          v = __tco_v;
                          continue tco;
                      };
                      if ($97 instanceof Data_Maybe.Just) {
                          return new Cons($97.value0, mapMaybe(f)(v.value1));
                      };
                      throw new Error("Failed pattern match: " + [ $97.constructor.name ]);
                  };
                  throw new Error("Failed pattern match: " + [ v.constructor.name ]);
              };
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  };
  var length = function (xs) {
      var go = function (v) {
          if (v instanceof Nil) {
              return 0;
          };
          if (v instanceof Cons) {
              return 1 + go(step(v.value1)) | 0;
          };
          throw new Error("Failed pattern match at Data.List.Lazy line 196, column 1 - line 197, column 1: " + [ v.constructor.name ]);
      };
      return go(step(xs));
  };
  var lazyList = new Control_Lazy.Lazy(function (f) {
      return List(Data_Lazy.defer(function ($222) {
          return step(f($222));
      }));
  });
  var last = function (xs) {
      var go = function (__copy_v) {
          var v = __copy_v;
          tco: while (true) {
              if (v instanceof Cons) {
                  if ($$null(v.value1)) {
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (Prelude.otherwise) {
                      var __tco_v = step(v.value1);
                      v = __tco_v;
                      continue tco;
                  };
              };
              return Data_Maybe.Nothing.value;
          };
      };
      return go(step(xs));
  };
  var index = function (xs) {
      var go = function (__copy_v) {
          return function (__copy_v1) {
              var v = __copy_v;
              var v1 = __copy_v1;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Cons && v1 === 0) {
                      return new Data_Maybe.Just(v.value0);
                  };
                  if (v instanceof Cons) {
                      var __tco_v = step(v.value1);
                      var __tco_v1 = v1 - 1;
                      v = __tco_v;
                      v1 = __tco_v1;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 293, column 1 - line 294, column 1: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
      };
      return go(step(xs));
  };
  var $bang$bang = index;
  var head = function (xs) {
      return Prelude["<$>"](Data_Maybe.functorMaybe)(function (v) {
          return v.head;
      })(uncons(xs));
  };
  var functorList = new Prelude.Functor(function (f) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return new Cons(f(v.value0), Prelude["<$>"](functorList)(f)(v.value1));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 680, column 5 - line 681, column 5: " + [ v.constructor.name ]);
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  });
  var fromStep = function ($223) {
      return List(Prelude.pure(Data_Lazy.applicativeLazy)($223));
  };
  var insertBy = function (cmp) {
      return function (x) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return new Cons(x, nil);
                  };
                  if (v instanceof Cons) {
                      var $117 = cmp(x)(v.value0);
                      if ($117 instanceof Prelude.GT) {
                          return new Cons(v.value0, insertBy(cmp)(x)(v.value1));
                      };
                      return new Cons(x, fromStep(v));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 234, column 3 - line 235, column 3: " + [ v.constructor.name ]);
              };
              return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
          };
      };
  };
  var insert = function (dictOrd) {
      return insertBy(Prelude.compare(dictOrd));
  };
  var fromList = function (dictUnfoldable) {
      return toUnfoldable(dictUnfoldable);
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return Data_Monoid.mempty(dictMonoid);
                  };
                  if (v instanceof Cons) {
                      return Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(f(v.value0))(Data_Foldable.foldMap(foldableList)(dictMonoid)(f)(v.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 699, column 5 - line 700, column 5: " + [ v.constructor.name ]);
              };
              return go(step(xs));
          };
      };
  }, function (o) {
      return function (b) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return b;
                  };
                  if (v instanceof Cons) {
                      return Data_Foldable.foldl(foldableList)(o)(o(b)(v.value0))(v.value1);
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 693, column 5 - line 694, column 5: " + [ v.constructor.name ]);
              };
              return go(step(xs));
          };
      };
  }, function (o) {
      return function (b) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return b;
                  };
                  if (v instanceof Cons) {
                      return o(v.value0)(Data_Foldable.foldr(foldableList)(o)(b)(v.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 687, column 5 - line 688, column 5: " + [ v.constructor.name ]);
              };
              return go(step(xs));
          };
      };
  });
  var filter = function (p) {
      return function (xs) {
          var go = function (__copy_v) {
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return Nil.value;
                  };
                  if (v instanceof Cons) {
                      if (p(v.value0)) {
                          return new Cons(v.value0, filter(p)(v.value1));
                      };
                      if (Prelude.otherwise) {
                          var __tco_v = step(v.value1);
                          v = __tco_v;
                          continue tco;
                      };
                  };
                  throw new Error("Failed pattern match: " + [ v.constructor.name ]);
              };
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  };
  var intersectBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return filter(function (x) {
                  return Data_Foldable.any(foldableList)(Prelude.booleanAlgebraBoolean)(eq(x))(ys);
              })(xs);
          };
      };
  };
  var intersect = function (dictEq) {
      return intersectBy(Prelude["=="](dictEq));
  };
  var nubBy = function (eq) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return new Cons(v.value0, nubBy(eq)(filter(function (y) {
                      return !eq(v.value0)(y);
                  })(v.value1)));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 542, column 3 - line 543, column 3: " + [ v.constructor.name ]);
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  };
  var nub = function (dictEq) {
      return nubBy(Prelude.eq(dictEq));
  };
  var eqList = function (dictEq) {
      return new Prelude.Eq(function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      tco: while (true) {
                          if (v instanceof Nil && v1 instanceof Nil) {
                              return true;
                          };
                          if (v instanceof Cons && (v1 instanceof Cons && Prelude["=="](dictEq)(v.value0)(v1.value0))) {
                              var __tco_v = step(v.value1);
                              var __tco_v1 = step(v1.value1);
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          return false;
                      };
                  };
              };
              return go(step(xs))(step(ys));
          };
      });
  };
  var ordList = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqList(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (xs) {
          return function (ys) {
              var go = function (__copy_v) {
                  return function (__copy_v1) {
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      tco: while (true) {
                          if (v instanceof Nil && v1 instanceof Nil) {
                              return Prelude.EQ.value;
                          };
                          if (v instanceof Nil) {
                              return Prelude.LT.value;
                          };
                          if (v1 instanceof Nil) {
                              return Prelude.GT.value;
                          };
                          if (v instanceof Cons && v1 instanceof Cons) {
                              var $143 = Prelude.compare(dictOrd)(v.value0)(v1.value0);
                              if ($143 instanceof Prelude.EQ) {
                                  var __tco_v = step(v.value1);
                                  var __tco_v1 = step(v1.value1);
                                  v = __tco_v;
                                  v1 = __tco_v1;
                                  continue tco;
                              };
                              return $143;
                          };
                          throw new Error("Failed pattern match at Data.List.Lazy line 654, column 1 - line 665, column 1: " + [ v.constructor.name, v1.constructor.name ]);
                      };
                  };
              };
              return go(step(xs))(step(ys));
          };
      });
  };
  var dropWhile = function (p) {
      return function (xs) {
          var go = function (__copy_v) {
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Cons && p(v.value0)) {
                      var __tco_v = step(v.value1);
                      v = __tco_v;
                      continue tco;
                  };
                  return fromStep(v);
              };
          };
          return go(step(xs));
      };
  };
  var drop = function (n) {
      return function (xs) {
          var go = function (__copy_v) {
              return function (__copy_v1) {
                  var v = __copy_v;
                  var v1 = __copy_v1;
                  tco: while (true) {
                      if (v === 0) {
                          return v1;
                      };
                      if (v1 instanceof Nil) {
                          return Nil.value;
                      };
                      if (v1 instanceof Cons) {
                          var __tco_v = v - 1;
                          var __tco_v1 = step(v1.value1);
                          v = __tco_v;
                          v1 = __tco_v1;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 465, column 1 - line 466, column 1: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
      };
  };
  var deleteBy = function (eq) {
      return function (x) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return Nil.value;
                  };
                  if (v instanceof Cons) {
                      if (eq(x)(v.value0)) {
                          return step(v.value1);
                      };
                      if (Prelude.otherwise) {
                          return new Cons(v.value0, deleteBy(eq)(x)(v.value1));
                      };
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 571, column 3 - line 572, column 3: " + [ v.constructor.name ]);
              };
              return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Prelude["<>"](semigroupList)(xs)(Data_Foldable.foldl(foldableList)(Prelude.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Prelude["=="](dictEq));
  };
  var deleteAt = function (n) {
      return function (xs) {
          var go = function (v) {
              return function (v1) {
                  if (v1 instanceof Nil) {
                      return Nil.value;
                  };
                  if (v === 0 && v1 instanceof Cons) {
                      return step(v1.value1);
                  };
                  if (v1 instanceof Cons) {
                      return new Cons(v1.value0, deleteAt(v - 1)(v1.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 330, column 3 - line 331, column 3: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
      };
  };
  var $$delete = function (dictEq) {
      return deleteBy(Prelude["=="](dictEq));
  };
  var $bslash$bslash = function (dictEq) {
      return Data_Foldable.foldl(foldableList)(Prelude.flip($$delete(dictEq)));
  };
  var cycle = function (xs) {
      return Control_Lazy.fix(lazyList)(function (ys) {
          return Prelude["<>"](semigroupList)(xs)(ys);
      });
  };
  var cons = function (x) {
      return function (xs) {
          return List(Data_Lazy.defer(function (v) {
              return new Cons(x, xs);
          }));
      };
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(cons)(nil);
  };
  var toList = function (dictFoldable) {
      return fromFoldable(dictFoldable);
  };
  var init = function (xs) {
      var go = function (v) {
          if (v instanceof Cons) {
              if ($$null(v.value1)) {
                  return new Data_Maybe.Just(nil);
              };
              if (Prelude.otherwise) {
                  return Prelude["<$>"](Data_Maybe.functorMaybe)(cons(v.value0))(go(step(v.value1)));
              };
          };
          return Data_Maybe.Nothing.value;
      };
      return go(step(xs));
  };
  var insertAt = function (v) {
      return function (x) {
          return function (xs) {
              if (v === 0) {
                  return cons(x)(xs);
              };
              var go = function (v1) {
                  if (v1 instanceof Nil) {
                      return new Cons(x, nil);
                  };
                  if (v1 instanceof Cons) {
                      return new Cons(v1.value0, insertAt(v - 1)(x)(v1.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 317, column 3 - line 318, column 3: " + [ v1.constructor.name ]);
              };
              return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
          };
      };
  };
  var iterate = function (f) {
      return function (x) {
          return Control_Lazy.fix(lazyList)(function (xs) {
              return cons(x)(Prelude["<$>"](functorList)(f)(xs));
          });
      };
  };
  var repeat = function (x) {
      return Control_Lazy.fix(lazyList)(function (xs) {
          return cons(x)(xs);
      });
  };
  var reverse = function (xs) {
      var go = function (__copy_acc) {
          return function (__copy_v) {
              var acc = __copy_acc;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return acc;
                  };
                  if (v instanceof Cons) {
                      var __tco_acc = cons(v.value0)(acc);
                      var __tco_v = step(v.value1);
                      acc = __tco_acc;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 383, column 1 - line 384, column 1: " + [ acc.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go(nil)(step(xs));
  };
  var singleton = function (a) {
      return cons(a)(nil);
  };
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Prelude.otherwise) {
              var go = function (__copy_s) {
                  return function (__copy_e) {
                      return function (__copy_step$prime) {
                          return function (__copy_rest) {
                              var s = __copy_s;
                              var e = __copy_e;
                              var step$prime = __copy_step$prime;
                              var rest = __copy_rest;
                              tco: while (true) {
                                  if (s === e) {
                                      return cons(s)(rest);
                                  };
                                  if (Prelude.otherwise) {
                                      var __tco_s = s + step$prime | 0;
                                      var __tco_e = e;
                                      var __tco_step$prime = step$prime;
                                      var __tco_rest = cons(s)(rest);
                                      s = __tco_s;
                                      e = __tco_e;
                                      step$prime = __tco_step$prime;
                                      rest = __tco_rest;
                                      continue tco;
                                  };
                                  throw new Error("Failed pattern match at Data.List.Lazy line 164, column 1 - line 165, column 1: " + [ s.constructor.name, e.constructor.name, step$prime.constructor.name, rest.constructor.name ]);
                              };
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var $184 = start > end;
                  if ($184) {
                      return 1;
                  };
                  if (!$184) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 164, column 1 - line 165, column 1: " + [ $184.constructor.name ]);
              })())(nil);
          };
          throw new Error("Failed pattern match at Data.List.Lazy line 164, column 1 - line 165, column 1: " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var $dot$dot = range;
  var span = function (p) {
      return function (xs) {
          var $185 = uncons(xs);
          if ($185 instanceof Data_Maybe.Just && p($185.value0.head)) {
              var $186 = span(p)($185.value0.tail);
              return {
                  init: cons($185.value0.head)($186.init), 
                  rest: $186.rest
              };
          };
          return {
              init: nil, 
              rest: xs
          };
      };
  };
  var groupBy = function (eq) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  var $193 = span(eq(v.value0))(v.value1);
                  return new Cons(cons(v.value0)($193.init), groupBy(eq)($193.rest));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 520, column 3 - line 521, column 3: " + [ v.constructor.name ]);
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  };
  var group = function (dictEq) {
      return groupBy(Prelude["=="](dictEq));
  };
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Prelude.pure(dictApplicative)(nil);
              };
              if (v instanceof Cons) {
                  return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(cons)(v.value0))(Data_Traversable.sequence(traversableList)(dictApplicative)(v.value1));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 720, column 5 - line 721, column 5: " + [ v.constructor.name ]);
          };
          return go(step(xs));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (xs) {
              var go = function (v) {
                  if (v instanceof Nil) {
                      return Prelude.pure(dictApplicative)(nil);
                  };
                  if (v instanceof Cons) {
                      return Prelude["<*>"](dictApplicative["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(cons)(f(v.value0)))(Data_Traversable.traverse(traversableList)(dictApplicative)(f)(v.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy line 714, column 5 - line 715, column 5: " + [ v.constructor.name ]);
              };
              return go(step(xs));
          };
      };
  });
  var $colon = cons;
  var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
      return function (b) {
          var go = function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return nil;
              };
              if (v instanceof Data_Maybe.Just) {
                  return $colon(v.value0.value0)(Control_Lazy.defer(lazyList)(function (v1) {
                      return go(f(v.value0.value1));
                  }));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 702, column 1 - line 710, column 1: " + [ v.constructor.name ]);
          };
          return go(f(b));
      };
  });
  var concatMap = function (f) {
      return function (xs) {
          var go = function (v) {
              if (v instanceof Nil) {
                  return Nil.value;
              };
              if (v instanceof Cons) {
                  return step(Prelude["<>"](semigroupList)(f(v.value0))(concatMap(f)(v.value1)));
              };
              throw new Error("Failed pattern match at Data.List.Lazy line 402, column 3 - line 403, column 3: " + [ v.constructor.name ]);
          };
          return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
      };
  };
  var catMaybes = mapMaybe(Prelude.id(Prelude.categoryFn));
  var monadList = new Prelude.Monad(function () {
      return applicativeList;
  }, function () {
      return bindList;
  });
  var bindList = new Prelude.Bind(function () {
      return applyList;
  }, Prelude.flip(concatMap));
  var applyList = new Prelude.Apply(function () {
      return functorList;
  }, Prelude.ap(monadList));
  var applicativeList = new Prelude.Applicative(function () {
      return applyList;
  }, singleton);
  var concat = function (v) {
      return Prelude[">>="](bindList)(v)(Prelude.id(Prelude.categoryFn));
  };
  var alterAt = function (n) {
      return function (f) {
          return function (xs) {
              var go = function (v) {
                  return function (v1) {
                      if (v1 instanceof Nil) {
                          return Nil.value;
                      };
                      if (v === 0 && v1 instanceof Cons) {
                          var $214 = f(v1.value0);
                          if ($214 instanceof Data_Maybe.Nothing) {
                              return step(v1.value1);
                          };
                          if ($214 instanceof Data_Maybe.Just) {
                              return new Cons($214.value0, v1.value1);
                          };
                          throw new Error("Failed pattern match at Data.List.Lazy line 370, column 3 - line 371, column 3: " + [ $214.constructor.name ]);
                      };
                      if (v1 instanceof Cons) {
                          return new Cons(v1.value0, alterAt(v - 1)(f)(v1.value1));
                      };
                      throw new Error("Failed pattern match at Data.List.Lazy line 370, column 3 - line 371, column 3: " + [ v.constructor.name, v1.constructor.name ]);
                  };
              };
              return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
          };
      };
  };
  var modifyAt = function (n) {
      return function (f) {
          return alterAt(n)(function ($224) {
              return Data_Maybe.Just.create(f($224));
          });
      };
  };
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Prelude.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, nil);
  var alternativeList = new Control_Alternative.Alternative(function () {
      return plusList;
  }, function () {
      return applicativeList;
  });
  var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
      return alternativeList;
  }, function () {
      return monadList;
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["List"] = List;
  exports["fromList"] = fromList;
  exports["toList"] = toList;
  exports["zip"] = zip;
  exports["zipWith"] = zipWith;
  exports["intersectBy"] = intersectBy;
  exports["intersect"] = intersect;
  exports["\\\\"] = $bslash$bslash;
  exports["deleteBy"] = deleteBy;
  exports["delete"] = $$delete;
  exports["unionBy"] = unionBy;
  exports["union"] = union;
  exports["nubBy"] = nubBy;
  exports["nub"] = nub;
  exports["groupBy"] = groupBy;
  exports["group"] = group;
  exports["span"] = span;
  exports["dropWhile"] = dropWhile;
  exports["drop"] = drop;
  exports["takeWhile"] = takeWhile;
  exports["take"] = take;
  exports["catMaybes"] = catMaybes;
  exports["mapMaybe"] = mapMaybe;
  exports["filter"] = filter;
  exports["concatMap"] = concatMap;
  exports["concat"] = concat;
  exports["reverse"] = reverse;
  exports["alterAt"] = alterAt;
  exports["modifyAt"] = modifyAt;
  exports["updateAt"] = updateAt;
  exports["deleteAt"] = deleteAt;
  exports["insertAt"] = insertAt;
  exports["index"] = index;
  exports["!!"] = $bang$bang;
  exports["uncons"] = uncons;
  exports["init"] = init;
  exports["tail"] = tail;
  exports["last"] = last;
  exports["head"] = head;
  exports["insertBy"] = insertBy;
  exports["insert"] = insert;
  exports["cons"] = cons;
  exports[":"] = $colon;
  exports["length"] = length;
  exports["null"] = $$null;
  exports["cycle"] = cycle;
  exports["iterate"] = iterate;
  exports["repeat"] = repeat;
  exports["range"] = range;
  exports[".."] = $dot$dot;
  exports["singleton"] = singleton;
  exports["nil"] = nil;
  exports["step"] = step;
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["runList"] = runList;
  exports["showList"] = showList;
  exports["eqList"] = eqList;
  exports["ordList"] = ordList;
  exports["lazyList"] = lazyList;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["traversableList"] = traversableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
  exports["monadList"] = monadList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["alternativeList"] = alternativeList;
  exports["monadPlusList"] = monadPlusList;;
 
})(PS["Data.List.Lazy"] = PS["Data.List.Lazy"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.List.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
 
})(PS["Data.List.Unsafe"] = PS["Data.List.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.List.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];     
  var tail = function (v) {
      if (v instanceof Data_List.Cons) {
          return v.value1;
      };
      if (v instanceof Data_List.Nil) {
          return $foreign.unsafeThrow("Data.List.Unsafe.tail called on empty list");
      };
      throw new Error("Failed pattern match at Data.List.Unsafe line 26, column 1 - line 27, column 1: " + [ v.constructor.name ]);
  };
  var last = function (__copy_v) {
      var v = __copy_v;
      tco: while (true) {
          if (v instanceof Data_List.Cons && v.value1 instanceof Data_List.Nil) {
              return v.value0;
          };
          if (v instanceof Data_List.Cons) {
              var __tco_v = v.value1;
              v = __tco_v;
              continue tco;
          };
          if (v instanceof Data_List.Nil) {
              return $foreign.unsafeThrow("Data.List.Unsafe.last called on empty list");
          };
          throw new Error("Failed pattern match: " + [ v.constructor.name ]);
      };
  };
  var init = function (v) {
      if (v instanceof Data_List.Cons && v.value1 instanceof Data_List.Nil) {
          return Data_List.Nil.value;
      };
      if (v instanceof Data_List.Cons) {
          return new Data_List.Cons(v.value0, init(v.value1));
      };
      if (v instanceof Data_List.Nil) {
          return $foreign.unsafeThrow("Data.List.Unsafe.init called on empty list");
      };
      throw new Error("Failed pattern match: " + [ v.constructor.name ]);
  };
  var head = function (v) {
      if (v instanceof Data_List.Cons) {
          return v.value0;
      };
      if (v instanceof Data_List.Nil) {
          return $foreign.unsafeThrow("Data.List.Unsafe.head called on empty list");
      };
      throw new Error("Failed pattern match at Data.List.Unsafe line 19, column 1 - line 20, column 1: " + [ v.constructor.name ]);
  };
  exports["init"] = init;
  exports["last"] = last;
  exports["tail"] = tail;
  exports["head"] = head;;
 
})(PS["Data.List.Unsafe"] = PS["Data.List.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var ZipList = function (x) {
      return x;
  };
  var showZipList = function (dictShow) {
      return new Prelude.Show(function (v) {
          return "(ZipList " + (Prelude.show(Data_List_Lazy.showList(dictShow))(v) + ")");
      });
  };
  var runZipList = function (v) {
      return v;
  };
  var semigroupZipList = new Prelude.Semigroup(function (z1) {
      return function (z2) {
          return Prelude["++"](Data_List_Lazy.semigroupList)(runZipList(z1))(runZipList(z2));
      };
  });
  var monoidZipList = new Data_Monoid.Monoid(function () {
      return semigroupZipList;
  }, Data_Monoid.mempty(Data_List_Lazy.monoidList));
  var functorZipList = new Prelude.Functor(function (f) {
      return function (v) {
          return Prelude.map(Data_List_Lazy.functorList)(f)(v);
      };
  });
  var foldableZipList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              return Data_Foldable.foldMap(Data_List_Lazy.foldableList)(dictMonoid)(f)(v);
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return Data_Foldable.foldl(Data_List_Lazy.foldableList)(f)(b)(v);
          };
      };
  }, function (f) {
      return function (b) {
          return function (v) {
              return Data_Foldable.foldr(Data_List_Lazy.foldableList)(f)(b)(v);
          };
      };
  });
  var traversableZipList = new Data_Traversable.Traversable(function () {
      return foldableZipList;
  }, function () {
      return functorZipList;
  }, function (dictApplicative) {
      return function (v) {
          return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(ZipList)(Data_Traversable.sequence(Data_List_Lazy.traversableList)(dictApplicative)(v));
      };
  }, function (dictApplicative) {
      return function (f) {
          return function (v) {
              return Prelude["<$>"]((dictApplicative["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(ZipList)(Data_Traversable.traverse(Data_List_Lazy.traversableList)(dictApplicative)(f)(v));
          };
      };
  });
  var eqZipList = function (dictEq) {
      return new Prelude.Eq(function (z1) {
          return function (z2) {
              return Prelude.eq(Data_List_Lazy.eqList(dictEq))(runZipList(z1))(runZipList(z2));
          };
      });
  };
  var ordZipList = function (dictOrd) {
      return new Prelude.Ord(function () {
          return eqZipList(dictOrd["__superclass_Prelude.Eq_0"]());
      }, function (z1) {
          return function (z2) {
              return Prelude.compare(Data_List_Lazy.ordList(dictOrd))(runZipList(z1))(runZipList(z2));
          };
      });
  };
  var applyZipList = new Prelude.Apply(function () {
      return functorZipList;
  }, function (v) {
      return function (v1) {
          return Data_List_Lazy.zipWith(Prelude["$"])(v)(v1);
      };
  });
  var applicativeZipList = new Prelude.Applicative(function () {
      return applyZipList;
  }, function ($33) {
      return ZipList(Data_List_Lazy.repeat($33));
  });
  var altZipList = new Control_Alt.Alt(function () {
      return functorZipList;
  }, Prelude.append(semigroupZipList));
  var plusZipList = new Control_Plus.Plus(function () {
      return altZipList;
  }, Data_Monoid.mempty(monoidZipList));
  var alternativeZipList = new Control_Alternative.Alternative(function () {
      return plusZipList;
  }, function () {
      return applicativeZipList;
  });
  exports["ZipList"] = ZipList;
  exports["runZipList"] = runZipList;
  exports["showZipList"] = showZipList;
  exports["eqZipList"] = eqZipList;
  exports["ordZipList"] = ordZipList;
  exports["semigroupZipList"] = semigroupZipList;
  exports["monoidZipList"] = monoidZipList;
  exports["foldableZipList"] = foldableZipList;
  exports["traversableZipList"] = traversableZipList;
  exports["functorZipList"] = functorZipList;
  exports["applyZipList"] = applyZipList;
  exports["applicativeZipList"] = applicativeZipList;
  exports["altZipList"] = altZipList;
  exports["plusZipList"] = plusZipList;
  exports["alternativeZipList"] = alternativeZipList;;
 
})(PS["Data.List.ZipList"] = PS["Data.List.ZipList"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.String.Regex

  exports["showRegex'"] = function (r) {
    return "" + r;
  };

  exports["regex'"] = function (s1) {
    return function (s2) {
      return new RegExp(s1, s2);
    };
  };

  exports.source = function (r) {
    return r.source;
  };

  exports.flags = function (r) {
    return {
      multiline: r.multiline,
      ignoreCase: r.ignoreCase,
      global: r.global,
      sticky: !!r.sticky,
      unicode: !!r.unicode
    };
  };

  exports.test = function (r) {
    return function (s) {
      return r.test(s);
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null) {
            return nothing;
          } else {
            var list = [];
            for (var i = 0; i < m.length; i++) {
              list.push(m[i] == null ? nothing : just(m[i]));
            }
            return just(list);
          }
        };
      };
    };
  };

  exports.replace = function (r) {
    return function (s1) {
      return function (s2) {
        return s2.replace(r, s1);
      };
    };
  };

  exports["replace'"] = function (r) {
    return function (f) {
      return function (s2) {
        return s2.replace(r, function (match) {
          return f(match)(Array.prototype.splice.call(arguments, 1, arguments.length - 3));
        });
      };
    };
  };

  exports._search = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var result = s.search(r);
          return result === -1 ? nothing : just(result);
        };
      };
    };
  };

  exports.split = function (r) {
    return function (s) {
      return s.split(r);
    };
  };
 
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Data.String.Regex"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];     
  var showRegex = new Prelude.Show($foreign["showRegex'"]);
  var search = $foreign._search(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var renderFlags = function (f) {
      return (function () {
          if (f.global) {
              return "g";
          };
          if (!f.global) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 63, column 1 - line 64, column 1: " + [ f.global.constructor.name ]);
      })() + ((function () {
          if (f.ignoreCase) {
              return "i";
          };
          if (!f.ignoreCase) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 63, column 1 - line 64, column 1: " + [ f.ignoreCase.constructor.name ]);
      })() + ((function () {
          if (f.multiline) {
              return "m";
          };
          if (!f.multiline) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 63, column 1 - line 64, column 1: " + [ f.multiline.constructor.name ]);
      })() + ((function () {
          if (f.sticky) {
              return "y";
          };
          if (!f.sticky) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 63, column 1 - line 64, column 1: " + [ f.sticky.constructor.name ]);
      })() + (function () {
          if (f.unicode) {
              return "u";
          };
          if (!f.unicode) {
              return "";
          };
          throw new Error("Failed pattern match at Data.String.Regex line 63, column 1 - line 64, column 1: " + [ f.unicode.constructor.name ]);
      })())));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign["regex'"](s)(renderFlags(f));
      };
  };
  var parseFlags = function (s) {
      return {
          global: Data_String.contains("g")(s), 
          ignoreCase: Data_String.contains("i")(s), 
          multiline: Data_String.contains("m")(s), 
          sticky: Data_String.contains("y")(s), 
          unicode: Data_String.contains("u")(s)
      };
  };
  var noFlags = {
      global: false, 
      ignoreCase: false, 
      multiline: false, 
      sticky: false, 
      unicode: false
  };
  var match = $foreign._match(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["noFlags"] = noFlags;
  exports["search"] = search;
  exports["match"] = match;
  exports["parseFlags"] = parseFlags;
  exports["renderFlags"] = renderFlags;
  exports["regex"] = regex;
  exports["showRegex"] = showRegex;
  exports["split"] = $foreign.split;
  exports["replace'"] = $foreign["replace'"];
  exports["replace"] = $foreign.replace;
  exports["test"] = $foreign.test;
  exports["flags"] = $foreign.flags;
  exports["source"] = $foreign.source;;
 
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];     
  var $div$bslash = function (a) {
      return function (b) {
          return new Data_Tuple.Tuple(a, b);
      };
  };
  var uncurry9 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0.value0.value0.value0.value0.value0.value0.value0)(v.value0.value0.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value1)(v.value0.value0.value0.value1)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var uncurry8 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0.value0.value0.value0.value0.value0.value0)(v.value0.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value1)(v.value0.value0.value0.value1)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var uncurry7 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0.value0.value0.value0.value0.value0)(v.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value1)(v.value0.value0.value0.value1)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var uncurry6 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0.value0.value0.value0.value0)(v.value0.value0.value0.value0.value1)(v.value0.value0.value0.value1)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var uncurry5 = function (f) {
      return function (v) {
          return f(v.value0.value0.value0.value0)(v.value0.value0.value0.value1)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var uncurry4 = function (f) {
      return function (v) {
          return f(v.value0.value0.value0)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var uncurry3 = function (f) {
      return function (v) {
          return f(v.value0.value0)(v.value0.value1)(v.value1);
      };
  };
  var uncurry2 = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var uncurry10 = function (f$prime) {
      return function (v) {
          return f$prime(v.value0.value0.value0.value0.value0.value0.value0.value0.value0)(v.value0.value0.value0.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value0.value1)(v.value0.value0.value0.value0.value1)(v.value0.value0.value0.value1)(v.value0.value0.value1)(v.value0.value1)(v.value1);
      };
  };
  var tuple9 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h), i);
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple8 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h);
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple7 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g);
                          };
                      };
                  };
              };
          };
      };
  };
  var tuple6 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f);
                      };
                  };
              };
          };
      };
  };
  var tuple5 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e);
                  };
              };
          };
      };
  };
  var tuple4 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d);
              };
          };
      };
  };
  var tuple3 = function (a) {
      return function (b) {
          return function (c) {
              return new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c);
          };
      };
  };
  var tuple2 = Data_Tuple.Tuple.create;
  var tuple10 = function (a) {
      return function (b) {
          return function (c) {
              return function (d) {
                  return function (e) {
                      return function (f) {
                          return function (g) {
                              return function (h) {
                                  return function (i) {
                                      return function (j) {
                                          return new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h), i), j);
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry9 = function (f$prime) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return function (f) {
                              return function (g) {
                                  return function (h) {
                                      return function (i) {
                                          return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h), i));
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry8 = function (f$prime) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return function (f) {
                              return function (g) {
                                  return function (h) {
                                      return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h));
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry7 = function (f$prime) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return function (f) {
                              return function (g) {
                                  return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g));
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var curry6 = function (f$prime) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return function (f) {
                              return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f));
                          };
                      };
                  };
              };
          };
      };
  };
  var curry5 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return f(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e));
                      };
                  };
              };
          };
      };
  };
  var curry4 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return f(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d));
                  };
              };
          };
      };
  };
  var curry3 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return f(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c));
              };
          };
      };
  };
  var curry2 = function (f) {
      return function (a) {
          return function (b) {
              return f(new Data_Tuple.Tuple(a, b));
          };
      };
  };
  var curry10 = function (f$prime) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return function (e) {
                          return function (f) {
                              return function (g) {
                                  return function (h) {
                                      return function (i) {
                                          return function (j) {
                                              return f$prime(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(new Data_Tuple.Tuple(a, b), c), d), e), f), g), h), i), j));
                                          };
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  exports["/\\"] = $div$bslash;
  exports["curry10"] = curry10;
  exports["uncurry10"] = uncurry10;
  exports["curry9"] = curry9;
  exports["uncurry9"] = uncurry9;
  exports["curry8"] = curry8;
  exports["uncurry8"] = uncurry8;
  exports["curry7"] = curry7;
  exports["uncurry7"] = uncurry7;
  exports["curry6"] = curry6;
  exports["uncurry6"] = uncurry6;
  exports["curry5"] = curry5;
  exports["uncurry5"] = uncurry5;
  exports["curry4"] = curry4;
  exports["uncurry4"] = uncurry4;
  exports["curry3"] = curry3;
  exports["uncurry3"] = uncurry3;
  exports["curry2"] = curry2;
  exports["uncurry2"] = uncurry2;
  exports["tuple10"] = tuple10;
  exports["tuple9"] = tuple9;
  exports["tuple8"] = tuple8;
  exports["tuple7"] = tuple7;
  exports["tuple6"] = tuple6;
  exports["tuple5"] = tuple5;
  exports["tuple4"] = tuple4;
  exports["tuple3"] = tuple3;
  exports["tuple2"] = tuple2;;
 
})(PS["Data.Tuple.Nested"] = PS["Data.Tuple.Nested"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var API_PouchDB = PS["API.PouchDB"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];     
  var showDBInfo = function (anyData) {
      return API_PouchDB.logRaw(anyData);
  };
  var main = function __do() {
      var v = API_PouchDB.pouchDB(new Data_Maybe.Just("dummyDB"))(Data_Maybe.Nothing.value)();
      API_PouchDB.info(showDBInfo)(v)();
      return Control_Monad_Eff_Console.log("PouchDB database created!")();
  };
  exports["main"] = main;
  exports["showDBInfo"] = showDBInfo;;
 
})(PS["DemoApp.PouchDB"] = PS["DemoApp.PouchDB"] || {});
(function(exports) {
  /* global exports, ArrayBuffer, Float32Array, Int32Array */
  "use strict";

  // module Test.QuickCheck.Gen

  exports.float32ToInt32 = function (n) {
    var arr = new ArrayBuffer(4);
    var fv = new Float32Array(arr);
    var iv = new Int32Array(arr);
    fv[0] = n;
    return iv[0];
  };
 
})(PS["Test.QuickCheck.Gen"] = PS["Test.QuickCheck.Gen"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var $$Math = PS["Math"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];     
  var Seed = function (x) {
      return x;
  };
  var showSeed = new Prelude.Show(function (v) {
      return "Seed " + Prelude.show(Prelude.showInt)(v);
  });
  var seedMin = 1;
  var runSeed = function (v) {
      return v;
  };
  var lcgN = 2147483647;
  var lcgM = 48271;
  var lcgPerturb = function (d) {
      var go = function (n) {
          return Data_Maybe_Unsafe.fromJust(Data_Int.fromNumber($$Math["%"](Data_Int.toNumber(lcgM) * Data_Int.toNumber(n) + d)(Data_Int.toNumber(lcgN))));
      };
      return function ($8) {
          return Seed(go(runSeed($8)));
      };
  };
  var seedMax = lcgM - 1;
  var lcgC = 0;
  var lcgNext = lcgPerturb(Data_Int.toNumber(lcgC));
  var eqSeed = new Prelude.Eq(function (v) {
      return function (v1) {
          return v === v1;
      };
  });
  var ensureBetween = function (min) {
      return function (max) {
          return function (n) {
              var rangeSize = max - min;
              return (n % rangeSize + rangeSize | 0) % rangeSize + min | 0;
          };
      };
  };
  var mkSeed = function (x) {
      return ensureBetween(seedMin)(seedMax)(x);
  };
  var randomSeed = Prelude["<$>"](Control_Monad_Eff.functorEff)(mkSeed)(Control_Monad_Eff_Random.randomInt(seedMin)(seedMax));
  exports["randomSeed"] = randomSeed;
  exports["lcgPerturb"] = lcgPerturb;
  exports["lcgNext"] = lcgNext;
  exports["lcgN"] = lcgN;
  exports["lcgC"] = lcgC;
  exports["lcgM"] = lcgM;
  exports["runSeed"] = runSeed;
  exports["mkSeed"] = mkSeed;
  exports["showSeed"] = showSeed;
  exports["eqSeed"] = eqSeed;;
 
})(PS["Test.QuickCheck.LCG"] = PS["Test.QuickCheck.LCG"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var $foreign = PS["Test.QuickCheck.Gen"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var $$Math = PS["Math"];
  var Data_Array = PS["Data.Array"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Either = PS["Data.Either"];
  var Data_List = PS["Data.List"];
  var Test_QuickCheck_LCG = PS["Test.QuickCheck.LCG"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var runGen = Control_Monad_State.runState;
  var stateful = function (f) {
      return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (s) {
          return runGen(f(s))(s);
      });
  };
  var sized = function (f) {
      return stateful(function (s) {
          return f(s.size);
      });
  };
  var variant = function (n) {
      return function (g) {
          return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (s) {
              return runGen(g)((function () {
                  var $12 = {};
                  for (var $13 in s) {
                      if (s.hasOwnProperty($13)) {
                          $12[$13] = s[$13];
                      };
                  };
                  $12.newSeed = n;
                  return $12;
              })());
          });
      };
  };
  var resize = function (sz) {
      return function (g) {
          return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (s) {
              return runGen(g)((function () {
                  var $14 = {};
                  for (var $15 in s) {
                      if (s.hasOwnProperty($15)) {
                          $14[$15] = s[$15];
                      };
                  };
                  $14.size = sz;
                  return $14;
              })());
          });
      };
  };
  var replicateMRec = function (dictMonadRec) {
      return function (k) {
          return function (v) {
              if (k <= 0) {
                  return Prelude["return"]((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())(Data_List.Nil.value);
              };
              var go = function (v1) {
                  if (v1.value1 === 0) {
                      return Prelude["return"]((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())(new Data_Either.Right(v1.value0));
                  };
                  return Prelude["<#>"]((((dictMonadRec["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(v)(function (x) {
                      return new Data_Either.Left(new Data_Tuple.Tuple(new Data_List.Cons(x, v1.value0), v1.value1 - 1));
                  });
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(new Data_Tuple.Tuple(Data_List.Nil.value, k));
          };
      };
  };
  var repeatable = function (f) {
      return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (s) {
          return new Data_Tuple.Tuple(function (a) {
              return Data_Tuple.fst(runGen(f(a))(s));
          }, (function () {
              var $23 = {};
              for (var $24 in s) {
                  if (s.hasOwnProperty($24)) {
                      $23[$24] = s[$24];
                  };
              };
              $23.newSeed = Test_QuickCheck_LCG.lcgNext(s.newSeed);
              return $23;
          })());
      });
  };
  var perturbGen = function (n) {
      return function (gen) {
          return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Control_Monad_State_Class.modify(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(function (s) {
              var $25 = {};
              for (var $26 in s) {
                  if (s.hasOwnProperty($26)) {
                      $25[$26] = s[$26];
                  };
              };
              $25.newSeed = Test_QuickCheck_LCG.lcgPerturb(Data_Int.toNumber($foreign.float32ToInt32(n)))(s.newSeed);
              return $25;
          }))(function () {
              return gen;
          });
      };
  };
  var listOf = replicateMRec(Control_Monad_State_Trans.monadRecStateT(Control_Monad_Rec_Class.monadRecIdentity));
  var vectorOf = function (k) {
      return function (g) {
          return Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(Data_List.fromList(Data_Unfoldable.unfoldableArray))(listOf(k)(g));
      };
  };
  var lcgStep = (function () {
      var f = function (s) {
          return new Data_Tuple.Tuple(Test_QuickCheck_LCG.runSeed(s.newSeed), (function () {
              var $27 = {};
              for (var $28 in s) {
                  if (s.hasOwnProperty($28)) {
                      $27[$28] = s[$28];
                  };
              };
              $27.newSeed = Test_QuickCheck_LCG.lcgNext(s.newSeed);
              return $27;
          })());
      };
      return Control_Monad_State_Class.state(Control_Monad_State_Trans.monadStateStateT(Data_Identity.monadIdentity))(f);
  })();
  var uniform = Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(function (n) {
      return Data_Int.toNumber(n) / Data_Int.toNumber(Test_QuickCheck_LCG.lcgN);
  })(lcgStep);
  var evalGen = Control_Monad_State.evalState;
  var sample = function (seed) {
      return function (sz) {
          return function (g) {
              return evalGen(vectorOf(sz)(g))({
                  newSeed: seed, 
                  size: sz
              });
          };
      };
  };
  var randomSample$prime = function (n) {
      return function (g) {
          return function __do() {
              var v = Test_QuickCheck_LCG.randomSeed();
              return sample(v)(n)(g);
          };
      };
  };
  var randomSample = randomSample$prime(10);
  var chooseInt = function (a) {
      return function (b) {
          var clamp = function (x) {
              var $30 = x % ((b - a) + 1 | 0);
              if ($30 >= 0) {
                  return a + $30 | 0;
              };
              if (Prelude.otherwise) {
                  return (b + $30 | 0) + 1 | 0;
              };
              throw new Error("Failed pattern match at Test.QuickCheck.Gen line 95, column 3 - line 96, column 3: " + [ $30.constructor.name ]);
          };
          return Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(clamp)(lcgStep);
      };
  };
  var elements = function (x) {
      return function (xs) {
          return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(chooseInt(0)(Data_Array.length(xs)))(function (v) {
              return Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))((function () {
                  var $32 = v === 0;
                  if ($32) {
                      return x;
                  };
                  if (!$32) {
                      return Data_Maybe.fromMaybe(x)(Data_Array["!!"](xs)(v - 1));
                  };
                  throw new Error("Failed pattern match at Test.QuickCheck.Gen line 151, column 1 - line 152, column 1: " + [ $32.constructor.name ]);
              })());
          });
      };
  };
  var oneOf = function (x) {
      return function (xs) {
          return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(chooseInt(0)(Data_Array.length(xs)))(function (v) {
              var $34 = v < 1;
              if ($34) {
                  return x;
              };
              if (!$34) {
                  return Data_Maybe.fromMaybe(x)(Data_Array["!!"](xs)(v - 1));
              };
              throw new Error("Failed pattern match at Test.QuickCheck.Gen line 102, column 1 - line 103, column 1: " + [ $34.constructor.name ]);
          });
      };
  };
  var choose = function (a) {
      return function (b) {
          var min = $$Math.min(a)(b);
          var max = $$Math.max(a)(b);
          return Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(function ($48) {
              return min + (max - min) * $48;
          })(uniform);
      };
  };
  var frequency = function (x) {
      return function (xs) {
          var xxs = new Data_List.Cons(x, xs);
          var total = Data_Monoid_Additive.runAdditive(Data_Foldable.fold(Data_List.foldableList)(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Prelude.map(Data_List.functorList)(function ($49) {
              return Data_Monoid_Additive.Additive(Data_Tuple.fst($49));
          })(xxs)));
          var pick = function (__copy_n) {
              return function (__copy_d) {
                  return function (__copy_v) {
                      var n = __copy_n;
                      var d = __copy_d;
                      var v = __copy_v;
                      tco: while (true) {
                          if (v instanceof Data_List.Nil) {
                              return d;
                          };
                          if (v instanceof Data_List.Cons) {
                              var $38 = n <= v.value0.value0;
                              if ($38) {
                                  return v.value0.value1;
                              };
                              if (!$38) {
                                  var __tco_n = n - v.value0.value0;
                                  var __tco_d = d;
                                  var __tco_v = v.value1;
                                  n = __tco_n;
                                  d = __tco_d;
                                  v = __tco_v;
                                  continue tco;
                              };
                              throw new Error("Failed pattern match at Test.QuickCheck.Gen line 109, column 1 - line 110, column 1: " + [ $38.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Test.QuickCheck.Gen line 109, column 1 - line 110, column 1: " + [ n.constructor.name, d.constructor.name, v.constructor.name ]);
                      };
                  };
              };
          };
          return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(choose(0)(total))(function (v) {
              return pick(v)(Data_Tuple.snd(x))(xxs);
          });
      };
  };
  var arrayOf1 = function (g) {
      return sized(function (n) {
          return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(chooseInt(0)(n))(function (v) {
              return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(g)(function (v1) {
                  return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(vectorOf(v - 1)(g))(function (v2) {
                      return Prelude["return"](Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Data_Tuple.Tuple(v1, v2));
                  });
              });
          });
      });
  };
  var arrayOf = function (g) {
      return sized(function (n) {
          return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(chooseInt(0)(n))(function (v) {
              return vectorOf(v)(g);
          });
      });
  };
  exports["randomSample'"] = randomSample$prime;
  exports["randomSample"] = randomSample;
  exports["sample"] = sample;
  exports["uniform"] = uniform;
  exports["perturbGen"] = perturbGen;
  exports["evalGen"] = evalGen;
  exports["runGen"] = runGen;
  exports["elements"] = elements;
  exports["vectorOf"] = vectorOf;
  exports["listOf"] = listOf;
  exports["arrayOf1"] = arrayOf1;
  exports["arrayOf"] = arrayOf;
  exports["frequency"] = frequency;
  exports["oneOf"] = oneOf;
  exports["chooseInt"] = chooseInt;
  exports["choose"] = choose;
  exports["resize"] = resize;
  exports["sized"] = sized;
  exports["variant"] = variant;
  exports["stateful"] = stateful;
  exports["repeatable"] = repeatable;;
 
})(PS["Test.QuickCheck.Gen"] = PS["Test.QuickCheck.Gen"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Char = PS["Data.Char"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_Lazy = PS["Data.Lazy"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];
  var Test_QuickCheck_Gen = PS["Test.QuickCheck.Gen"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];     
  var Arbitrary = function (arbitrary) {
      this.arbitrary = arbitrary;
  };
  var Coarbitrary = function (coarbitrary) {
      this.coarbitrary = coarbitrary;
  };
  var coarbitrary = function (dict) {
      return dict.coarbitrary;
  };
  var coarbUnit = new Coarbitrary(function (v) {
      return Test_QuickCheck_Gen.perturbGen(1.0);
  });
  var coarbTuple = function (dictCoarbitrary) {
      return function (dictCoarbitrary1) {
          return new Coarbitrary(function (v) {
              return function ($50) {
                  return coarbitrary(dictCoarbitrary1)(v.value1)(coarbitrary(dictCoarbitrary)(v.value0)($50));
              };
          });
      };
  };
  var coarbOrdering = new Coarbitrary(function (v) {
      if (v instanceof Prelude.LT) {
          return Test_QuickCheck_Gen.perturbGen(1.0);
      };
      if (v instanceof Prelude.EQ) {
          return Test_QuickCheck_Gen.perturbGen(2.0);
      };
      if (v instanceof Prelude.GT) {
          return Test_QuickCheck_Gen.perturbGen(3.0);
      };
      throw new Error("Failed pattern match at Test.QuickCheck.Arbitrary line 79, column 1 - line 84, column 1: " + [ v.constructor.name ]);
  });
  var coarbNumber = new Coarbitrary(Test_QuickCheck_Gen.perturbGen);
  var coarbMaybe = function (dictCoarbitrary) {
      return new Coarbitrary(function (v) {
          if (v instanceof Data_Maybe.Nothing) {
              return Test_QuickCheck_Gen.perturbGen(1.0);
          };
          if (v instanceof Data_Maybe.Just) {
              return coarbitrary(dictCoarbitrary)(v.value0);
          };
          throw new Error("Failed pattern match at Test.QuickCheck.Arbitrary line 109, column 1 - line 113, column 1: " + [ v.constructor.name ]);
      });
  };
  var coarbList = function (dictCoarbitrary) {
      return new Coarbitrary(Data_Foldable.foldl(Data_List.foldableList)(function (f) {
          return function (x) {
              return function ($51) {
                  return f(coarbitrary(dictCoarbitrary)(x)($51));
              };
          };
      })(Prelude.id(Prelude.categoryFn)));
  };
  var coarbLazy = function (dictCoarbitrary) {
      return new Coarbitrary(function (a) {
          return coarbitrary(dictCoarbitrary)(Data_Lazy.force(a));
      });
  };
  var coarbInt = new Coarbitrary(function ($52) {
      return Test_QuickCheck_Gen.perturbGen(Data_Int.toNumber($52));
  });
  var coarbIdentity = function (dictCoarbitrary) {
      return new Coarbitrary(function (v) {
          return coarbitrary(dictCoarbitrary)(v);
      });
  };
  var coarbEither = function (dictCoarbitrary) {
      return function (dictCoarbitrary1) {
          return new Coarbitrary(function (v) {
              if (v instanceof Data_Either.Left) {
                  return coarbitrary(dictCoarbitrary)(v.value0);
              };
              if (v instanceof Data_Either.Right) {
                  return coarbitrary(dictCoarbitrary1)(v.value0);
              };
              throw new Error("Failed pattern match at Test.QuickCheck.Arbitrary line 118, column 1 - line 122, column 1: " + [ v.constructor.name ]);
          });
      };
  };
  var coarbChar = new Coarbitrary(function (c) {
      return coarbitrary(coarbInt)(Data_Char.toCharCode(c));
  });
  var coarbBoolean = new Coarbitrary(function (v) {
      if (v) {
          return Test_QuickCheck_Gen.perturbGen(1.0);
      };
      if (!v) {
          return Test_QuickCheck_Gen.perturbGen(2.0);
      };
      throw new Error("Failed pattern match at Test.QuickCheck.Arbitrary line 42, column 1 - line 46, column 1: " + [ v.constructor.name ]);
  });
  var coarbArray = function (dictCoarbitrary) {
      return new Coarbitrary(Data_Foldable.foldl(Data_Foldable.foldableArray)(function (f) {
          return function (x) {
              return function ($53) {
                  return f(coarbitrary(dictCoarbitrary)(x)($53));
              };
          };
      })(Prelude.id(Prelude.categoryFn)));
  };
  var coarbString = new Coarbitrary(function (s) {
      return coarbitrary(coarbArray(coarbMaybe(coarbInt)))(Prelude["<$>"](Prelude.functorArray)(Data_String.charCodeAt(0))(Data_String.split("")(s)));
  });
  var arbitrary = function (dict) {
      return dict.arbitrary;
  };
  var arbitraryIdentity = function (dictArbitrary) {
      return new Arbitrary(Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(Data_Identity.Identity)(arbitrary(dictArbitrary)));
  };
  var arbitraryLazy = function (dictArbitrary) {
      return new Arbitrary(Prelude[">>="](Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(arbitrary(dictArbitrary))(function ($54) {
          return Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Lazy.defer(Prelude["const"]($54)));
      }));
  };
  var arbitraryList = function (dictArbitrary) {
      return new Arbitrary(Test_QuickCheck_Gen.sized(function (n) {
          return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Test_QuickCheck_Gen.chooseInt(0)(n))(Prelude.flip(Test_QuickCheck_Gen.listOf)(arbitrary(dictArbitrary)));
      }));
  };
  var arbUnit = new Arbitrary(Prelude["return"](Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Prelude.unit));
  var arbTuple = function (dictArbitrary) {
      return function (dictArbitrary1) {
          return new Arbitrary(Prelude["<*>"](Control_Monad_State_Trans.applyStateT(Data_Identity.monadIdentity))(Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(Data_Tuple.Tuple.create)(arbitrary(dictArbitrary)))(arbitrary(dictArbitrary1)));
      };
  };
  var arbOrdering = new Arbitrary(Test_QuickCheck_Gen.oneOf(Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Prelude.LT.value))([ Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Prelude.EQ.value), Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Prelude.GT.value) ]));
  var arbNumber = new Arbitrary(Test_QuickCheck_Gen.uniform);
  var arbInt = new Arbitrary(Test_QuickCheck_Gen.chooseInt(-1000000)(1000000));
  var arbFunction = function (dictCoarbitrary) {
      return function (dictArbitrary) {
          return new Arbitrary(Test_QuickCheck_Gen.repeatable(function (a) {
              return coarbitrary(dictCoarbitrary)(a)(arbitrary(dictArbitrary));
          }));
      };
  };
  var arbChar = new Arbitrary(Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(Data_Char.fromCharCode)(Test_QuickCheck_Gen.chooseInt(0)(65536)));
  var arbBoolean = new Arbitrary(Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Test_QuickCheck_Gen.uniform)(function (v) {
      return Prelude["return"](Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(v * 2.0 < 1.0);
  }));
  var arbEither = function (dictArbitrary) {
      return function (dictArbitrary1) {
          return new Arbitrary(Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(arbitrary(arbBoolean))(function (v) {
              if (v) {
                  return Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(Data_Either.Left.create)(arbitrary(dictArbitrary));
              };
              if (!v) {
                  return Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(Data_Either.Right.create)(arbitrary(dictArbitrary1));
              };
              throw new Error("Failed pattern match at Test.QuickCheck.Arbitrary line 113, column 1 - line 118, column 1: " + [ v.constructor.name ]);
          }));
      };
  };
  var arbMaybe = function (dictArbitrary) {
      return new Arbitrary(Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(arbitrary(arbBoolean))(function (v) {
          if (v) {
              return Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
          };
          if (!v) {
              return Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(Data_Maybe.Just.create)(arbitrary(dictArbitrary));
          };
          throw new Error("Failed pattern match at Test.QuickCheck.Arbitrary line 104, column 1 - line 109, column 1: " + [ v.constructor.name ]);
      }));
  };
  var arbArray = function (dictArbitrary) {
      return new Arbitrary(Test_QuickCheck_Gen.arrayOf(arbitrary(dictArbitrary)));
  };
  var arbString = new Arbitrary(Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(Data_String.fromCharArray)(arbitrary(arbArray(arbChar))));
  var coarbFunction = function (dictArbitrary) {
      return function (dictCoarbitrary) {
          return new Coarbitrary(function (f) {
              return function (gen) {
                  return Prelude.bind(Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(arbitrary(arbArray(dictArbitrary)))(function (v) {
                      return coarbitrary(coarbArray(dictCoarbitrary))(Prelude.map(Prelude.functorArray)(f)(v))(gen);
                  });
              };
          });
      };
  };
  exports["Coarbitrary"] = Coarbitrary;
  exports["Arbitrary"] = Arbitrary;
  exports["coarbitrary"] = coarbitrary;
  exports["arbitrary"] = arbitrary;
  exports["arbBoolean"] = arbBoolean;
  exports["coarbBoolean"] = coarbBoolean;
  exports["arbNumber"] = arbNumber;
  exports["coarbNumber"] = coarbNumber;
  exports["arbInt"] = arbInt;
  exports["coarbInt"] = coarbInt;
  exports["arbString"] = arbString;
  exports["coarbString"] = coarbString;
  exports["arbChar"] = arbChar;
  exports["coarbChar"] = coarbChar;
  exports["arbUnit"] = arbUnit;
  exports["coarbUnit"] = coarbUnit;
  exports["arbOrdering"] = arbOrdering;
  exports["coarbOrdering"] = coarbOrdering;
  exports["arbArray"] = arbArray;
  exports["coarbArray"] = coarbArray;
  exports["arbFunction"] = arbFunction;
  exports["coarbFunction"] = coarbFunction;
  exports["arbTuple"] = arbTuple;
  exports["coarbTuple"] = coarbTuple;
  exports["arbMaybe"] = arbMaybe;
  exports["coarbMaybe"] = coarbMaybe;
  exports["arbEither"] = arbEither;
  exports["coarbEither"] = coarbEither;
  exports["arbitraryList"] = arbitraryList;
  exports["coarbList"] = coarbList;
  exports["arbitraryIdentity"] = arbitraryIdentity;
  exports["coarbIdentity"] = coarbIdentity;
  exports["arbitraryLazy"] = arbitraryLazy;
  exports["coarbLazy"] = coarbLazy;;
 
})(PS["Test.QuickCheck.Arbitrary"] = PS["Test.QuickCheck.Arbitrary"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Data_List = PS["Data.List"];
  var Test_QuickCheck_Arbitrary = PS["Test.QuickCheck.Arbitrary"];
  var Test_QuickCheck_Gen = PS["Test.QuickCheck.Gen"];
  var Test_QuickCheck_LCG = PS["Test.QuickCheck.LCG"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Identity = PS["Data.Identity"];     
  var Success = (function () {
      function Success() {

      };
      Success.value = new Success();
      return Success;
  })();
  var Failed = (function () {
      function Failed(value0) {
          this.value0 = value0;
      };
      Failed.create = function (value0) {
          return new Failed(value0);
      };
      return Failed;
  })();
  var Testable = function (test) {
      this.test = test;
  };
  var $less$qmark$greater = function (v) {
      return function (v1) {
          if (v) {
              return Success.value;
          };
          if (!v) {
              return new Failed(v1);
          };
          throw new Error("Failed pattern match at Test.QuickCheck line 103, column 1 - line 104, column 1: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var $eq$eq$eq = function (dictEq) {
      return function (dictShow) {
          return function (a) {
              return function (b) {
                  return $less$qmark$greater(Prelude["=="](dictEq)(a)(b))(Prelude.show(dictShow)(a) + (" /= " + Prelude.show(dictShow)(b)));
              };
          };
      };
  };
  var $div$eq$eq = function (dictEq) {
      return function (dictShow) {
          return function (a) {
              return function (b) {
                  return $less$qmark$greater(Prelude["/="](dictEq)(a)(b))(Prelude.show(dictShow)(a) + (" == " + Prelude.show(dictShow)(b)));
              };
          };
      };
  };
  var testableResult = new Testable(Prelude["return"](Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)));
  var testableBoolean = new Testable(function (v) {
      if (v) {
          return Prelude["return"](Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(Success.value);
      };
      if (!v) {
          return Prelude["return"](Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))(new Failed("Test returned false"));
      };
      throw new Error("Failed pattern match at Test.QuickCheck line 82, column 1 - line 86, column 1: " + [ v.constructor.name ]);
  });
  var test = function (dict) {
      return dict.test;
  };
  var testableFunction = function (dictArbitrary) {
      return function (dictTestable) {
          return new Testable(function (f) {
              return Prelude[">>="](Control_Monad_State_Trans.bindStateT(Data_Identity.monadIdentity))(Test_QuickCheck_Arbitrary.arbitrary(dictArbitrary))(function ($35) {
                  return test(dictTestable)(f($35));
              });
          });
      };
  };
  var showResult = new Prelude.Show(function (v) {
      if (v instanceof Success) {
          return "Success";
      };
      if (v instanceof Failed) {
          return "Failed: " + v.value0;
      };
      throw new Error("Failed pattern match at Test.QuickCheck line 92, column 1 - line 103, column 1: " + [ v.constructor.name ]);
  });
  var quickCheckPure = function (dictTestable) {
      return function (s) {
          return function (n) {
              return function (prop) {
                  return Test_QuickCheck_Gen.evalGen(Data_List.replicateM(Control_Monad_State_Trans.monadStateT(Data_Identity.monadIdentity))(n)(test(dictTestable)(prop)))({
                      newSeed: s, 
                      size: 10
                  });
              };
          };
      };
  };
  var quickCheck$prime = function (dictTestable) {
      return function (n) {
          return function (prop) {
              var throwOnFirstFailure = function (__copy_v) {
                  return function (__copy_v1) {
                      var v = __copy_v;
                      var v1 = __copy_v1;
                      tco: while (true) {
                          if (v1 instanceof Data_List.Nil) {
                              return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
                          };
                          if (v1 instanceof Data_List.Cons && v1.value0 instanceof Failed) {
                              return Control_Monad_Eff_Exception.throwException(Control_Monad_Eff_Exception.error("Test " + (Prelude.show(Prelude.showInt)(v) + (" failed: \n" + v1.value0.value0))));
                          };
                          if (v1 instanceof Data_List.Cons) {
                              var __tco_v = v + 1 | 0;
                              var __tco_v1 = v1.value1;
                              v = __tco_v;
                              v1 = __tco_v1;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Test.QuickCheck line 43, column 1 - line 44, column 1: " + [ v.constructor.name, v1.constructor.name ]);
                      };
                  };
              };
              var countSuccesses = function (v) {
                  if (v instanceof Data_List.Nil) {
                      return 0;
                  };
                  if (v instanceof Data_List.Cons && v.value0 instanceof Success) {
                      return 1 + countSuccesses(v.value1) | 0;
                  };
                  if (v instanceof Data_List.Cons) {
                      return countSuccesses(v.value1);
                  };
                  throw new Error("Failed pattern match at Test.QuickCheck line 43, column 1 - line 44, column 1: " + [ v.constructor.name ]);
              };
              return function __do() {
                  var v = Test_QuickCheck_LCG.randomSeed();
                  var results = quickCheckPure(dictTestable)(v)(n)(prop);
                  var successes = countSuccesses(results);
                  Control_Monad_Eff_Console.log(Prelude.show(Prelude.showInt)(successes) + ("/" + (Prelude.show(Prelude.showInt)(n) + " test(s) passed.")))();
                  return throwOnFirstFailure(1)(results)();
              };
          };
      };
  };
  var quickCheck = function (dictTestable) {
      return function (prop) {
          return quickCheck$prime(dictTestable)(100)(prop);
      };
  };
  exports["Success"] = Success;
  exports["Failed"] = Failed;
  exports["Testable"] = Testable;
  exports["/=="] = $div$eq$eq;
  exports["==="] = $eq$eq$eq;
  exports["<?>"] = $less$qmark$greater;
  exports["test"] = test;
  exports["quickCheckPure"] = quickCheckPure;
  exports["quickCheck'"] = quickCheck$prime;
  exports["quickCheck"] = quickCheck;
  exports["testableResult"] = testableResult;
  exports["testableBoolean"] = testableBoolean;
  exports["testableFunction"] = testableFunction;
  exports["showResult"] = showResult;;
 
})(PS["Test.QuickCheck"] = PS["Test.QuickCheck"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_String = PS["Data.String"];
  var Test_QuickCheck_Gen = PS["Test.QuickCheck.Gen"];
  var Test_QuickCheck_Arbitrary = PS["Test.QuickCheck.Arbitrary"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Identity = PS["Data.Identity"];     
  var AlphaNumString = function (x) {
      return x;
  };
  var runAlphaNumString = function (v) {
      return v;
  };
  var coarbAlphaNumString = new Test_QuickCheck_Arbitrary.Coarbitrary(function (v) {
      return Test_QuickCheck_Arbitrary.coarbitrary(Test_QuickCheck_Arbitrary.coarbString)(v);
  });
  var arbAlphaNumString = new Test_QuickCheck_Arbitrary.Arbitrary((function () {
      var rest = Data_String.toCharArray("bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789");
      var anyChar = Test_QuickCheck_Gen.oneOf(Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity))("a"))(Prelude.map(Prelude.functorArray)(Prelude.pure(Control_Monad_State_Trans.applicativeStateT(Data_Identity.monadIdentity)))(rest));
      return Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(function ($4) {
          return AlphaNumString(Data_String.fromCharArray($4));
      })(Test_QuickCheck_Gen.arrayOf(anyChar));
  })());
  exports["AlphaNumString"] = AlphaNumString;
  exports["runAlphaNumString"] = runAlphaNumString;
  exports["arbAlphaNumString"] = arbAlphaNumString;
  exports["coarbAlphaNumString"] = coarbAlphaNumString;;
 
})(PS["Test.QuickCheck.Data.AlphaNumString"] = PS["Test.QuickCheck.Data.AlphaNumString"] || {});
(function(exports) {
  // Generated by psc version 0.8.0.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Test_QuickCheck_Arbitrary = PS["Test.QuickCheck.Arbitrary"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Identity = PS["Data.Identity"];     
  var ApproxNumber = function (x) {
      return x;
  };
  var $eq$tilde$eq = function (x) {
      return function (y) {
          return y - x <= 1.0000000000000002e-8 && y - x >= -1.0000000000000002e-8;
      };
  };
  var semiringApproxNumber = new Prelude.Semiring(function (v) {
      return function (v1) {
          return v + v1;
      };
  }, function (v) {
      return function (v1) {
          return v * v1;
      };
  }, 1, 0);
  var ringApproxNumber = new Prelude.Ring(function () {
      return semiringApproxNumber;
  }, function (v) {
      return function (v1) {
          return v - v1;
      };
  });
  var moduloSemiringApproxNumber = new Prelude.ModuloSemiring(function () {
      return semiringApproxNumber;
  }, function (v) {
      return function (v1) {
          return v / v1;
      };
  }, function (v) {
      return function (v1) {
          return Prelude.mod(Prelude.moduloSemiringNumber)(v)(v1);
      };
  });
  var eqApproxNumber = new Prelude.Eq(function (v) {
      return function (v1) {
          return $eq$tilde$eq(v)(v1);
      };
  });
  var ordApproxNumber = new Prelude.Ord(function () {
      return eqApproxNumber;
  }, function (v) {
      return function (v1) {
          return Prelude.compare(Prelude.ordNumber)(v)(v1);
      };
  });
  var divisionRingApproxNumber = new Prelude.DivisionRing(function () {
      return moduloSemiringApproxNumber;
  }, function () {
      return ringApproxNumber;
  });
  var numApproxNumber = new Prelude.Num(function () {
      return divisionRingApproxNumber;
  });
  var coarbitraryApproxNumber = new Test_QuickCheck_Arbitrary.Coarbitrary(function (v) {
      return Test_QuickCheck_Arbitrary.coarbitrary(Test_QuickCheck_Arbitrary.coarbNumber)(v);
  });
  var arbitraryApproxNumber = new Test_QuickCheck_Arbitrary.Arbitrary(Prelude["<$>"](Control_Monad_State_Trans.functorStateT(Data_Identity.monadIdentity))(ApproxNumber)(Test_QuickCheck_Arbitrary.arbitrary(Test_QuickCheck_Arbitrary.arbNumber)));
  exports["ApproxNumber"] = ApproxNumber;
  exports["=~="] = $eq$tilde$eq;
  exports["arbitraryApproxNumber"] = arbitraryApproxNumber;
  exports["coarbitraryApproxNumber"] = coarbitraryApproxNumber;
  exports["eqApproxNumber"] = eqApproxNumber;
  exports["ordApproxNumber"] = ordApproxNumber;
  exports["semiringApproxNumber"] = semiringApproxNumber;
  exports["moduloSemiringApproxNumber"] = moduloSemiringApproxNumber;
  exports["ringApproxNumber"] = ringApproxNumber;
  exports["divisionRingApproxNumber"] = divisionRingApproxNumber;
  exports["numApproxNumber"] = numApproxNumber;;
 
})(PS["Test.QuickCheck.Data.ApproxNumber"] = PS["Test.QuickCheck.Data.ApproxNumber"] || {});
